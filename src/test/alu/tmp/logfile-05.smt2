(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-15 15:44:38
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-const class_ALU<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Driver<TYPE> TYPE)
(declare-const class_Monitor<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [ALU_m: Ref]
(declare-fun $FVF.domain_ALU_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_ALU_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_ALU_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_ALU_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_ALU_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_ALU_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Driver_m: Ref]
(declare-fun $FVF.domain_Driver_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Driver_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Driver_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Driver_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Driver_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Driver_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Monitor_m: Ref]
(declare-fun $FVF.domain_Monitor_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Monitor_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Monitor_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Monitor_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Monitor_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Monitor_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Driver_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Driver_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Monitor_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Monitor_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_ALU<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Driver<TYPE> class_Monitor<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_ALU<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Driver<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Monitor<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [ALU_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_ALU_m vs) ($FVF.domain_ALU_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_ALU_m vs))
            (= ($FVF.lookup_ALU_m vs x) ($FVF.lookup_ALU_m ws x)))
          :pattern (($FVF.lookup_ALU_m vs x) ($FVF.lookup_ALU_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_ALU_m pm r))
    :pattern ($FVF.perm_ALU_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_ALU_m f r) true)
    :pattern ($FVF.loc_ALU_m f r))))
; /field_value_functions_axioms.smt2 [Driver_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Driver_m vs) ($FVF.domain_Driver_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Driver_m vs))
            (= ($FVF.lookup_Driver_m vs x) ($FVF.lookup_Driver_m ws x)))
          :pattern (($FVF.lookup_Driver_m vs x) ($FVF.lookup_Driver_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Driver_m pm r))
    :pattern ($FVF.perm_Driver_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Driver_m f r) true)
    :pattern ($FVF.loc_Driver_m f r))))
; /field_value_functions_axioms.smt2 [Monitor_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Monitor_m vs) ($FVF.domain_Monitor_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Monitor_m vs))
            (= ($FVF.lookup_Monitor_m vs x) ($FVF.lookup_Monitor_m ws x)))
          :pattern (($FVF.lookup_Monitor_m vs x) ($FVF.lookup_Monitor_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Monitor_m pm r))
    :pattern ($FVF.perm_Monitor_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Monitor_m f r) true)
    :pattern ($FVF.loc_Monitor_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 2))
    (and
      (and
        (or
          (< (Seq_index vals@8@00 0) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 0)))
        (or
          (< (Seq_index vals@8@00 1) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 1))))
      (and
        (implies
          (and
            (< (Seq_index vals@8@00 0) (- 0 1))
            (< (Seq_index vals@8@00 1) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (<= (- 0 1) (Seq_index vals@8@00 0))
            (<= (- 0 1) (Seq_index vals@8@00 1)))
          (or
            (and
              (<= (- 0 1) (Seq_index vals@8@00 0))
              (= result@9@00 (Seq_index vals@8@00 0)))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 1))
              (= result@9@00 (Seq_index vals@8@00 1)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- ALU_get_bit_EncodedGlobalVariables_Integer_Integer ----------
(declare-const diz@0@05 $Ref)
(declare-const globals@1@05 $Ref)
(declare-const value@2@05 Int)
(declare-const pos@3@05 Int)
(declare-const sys__result@4@05 Int)
(declare-const diz@5@05 $Ref)
(declare-const globals@6@05 $Ref)
(declare-const value@7@05 Int)
(declare-const pos@8@05 Int)
(declare-const sys__result@9@05 Int)
(push) ; 1
(declare-const $t@10@05 $Snap)
(assert (= $t@10@05 ($Snap.combine ($Snap.first $t@10@05) ($Snap.second $t@10@05))))
(assert (= ($Snap.first $t@10@05) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@5@05 $Ref.null)))
(assert (=
  ($Snap.second $t@10@05)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@10@05))
    ($Snap.second ($Snap.second $t@10@05)))))
(declare-const $k@11@05 $Perm)
(assert ($Perm.isReadVar $k@11@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@11@05 $Perm.No) (< $Perm.No $k@11@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            17
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   2
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            1
;  :datatype-accessor-ax 3
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          264
;  :mk-clause            3
;  :num-allocs           3508183
;  :num-checks           1
;  :propagations         17
;  :quant-instantiations 1
;  :rlimit-count         111756)
(assert (<= $Perm.No $k@11@05))
(assert (<= $k@11@05 $Perm.Write))
(assert (implies (< $Perm.No $k@11@05) (not (= diz@5@05 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@10@05))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@10@05)))
    ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@10@05))) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            23
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            2
;  :datatype-accessor-ax 4
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          267
;  :mk-clause            3
;  :num-allocs           3508183
;  :num-checks           2
;  :propagations         17
;  :quant-instantiations 1
;  :rlimit-count         112009
;  :time                 0.02)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@10@05)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@10@05))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            29
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            3
;  :datatype-accessor-ax 5
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          270
;  :mk-clause            3
;  :num-allocs           3508183
;  :num-checks           3
;  :propagations         17
;  :quant-instantiations 2
;  :rlimit-count         112293)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            34
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            4
;  :datatype-accessor-ax 6
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          271
;  :mk-clause            3
;  :num-allocs           3508183
;  :num-checks           4
;  :propagations         17
;  :quant-instantiations 2
;  :rlimit-count         112480)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            40
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            5
;  :datatype-accessor-ax 7
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          273
;  :mk-clause            3
;  :num-allocs           3508183
;  :num-checks           5
;  :propagations         17
;  :quant-instantiations 2
;  :rlimit-count         112709
;  :time                 0.00)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            47
;  :arith-assert-diseq   2
;  :arith-assert-lower   6
;  :arith-assert-upper   4
;  :arith-eq-adapter     4
;  :binary-propagations  16
;  :conflicts            6
;  :datatype-accessor-ax 8
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          282
;  :mk-clause            6
;  :num-allocs           3508183
;  :num-checks           6
;  :propagations         18
;  :quant-instantiations 5
;  :rlimit-count         113070)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            53
;  :arith-assert-diseq   2
;  :arith-assert-lower   6
;  :arith-assert-upper   4
;  :arith-eq-adapter     4
;  :binary-propagations  16
;  :conflicts            7
;  :datatype-accessor-ax 9
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          284
;  :mk-clause            6
;  :num-allocs           3508183
;  :num-checks           7
;  :propagations         18
;  :quant-instantiations 5
;  :rlimit-count         113319)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.ALU_m.Main_process_state[i] } 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|)
(declare-const i@12@05 Int)
(push) ; 2
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 0 | 0 <= i@12@05 | live]
; [else-branch: 0 | !(0 <= i@12@05) | live]
(push) ; 4
; [then-branch: 0 | 0 <= i@12@05]
(assert (<= 0 i@12@05))
; [eval] i < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            61
;  :arith-assert-diseq   3
;  :arith-assert-lower   10
;  :arith-assert-upper   5
;  :arith-eq-adapter     6
;  :binary-propagations  16
;  :conflicts            8
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          295
;  :mk-clause            9
;  :num-allocs           3508183
;  :num-checks           8
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         113791)
(pop) ; 4
(push) ; 4
; [else-branch: 0 | !(0 <= i@12@05)]
(assert (not (<= 0 i@12@05)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 1 | i@12@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i@12@05 | live]
; [else-branch: 1 | !(i@12@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i@12@05) | live]
(push) ; 4
; [then-branch: 1 | i@12@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i@12@05]
(assert (and
  (<
    i@12@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
  (<= 0 i@12@05)))
; [eval] diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i] == -1
; [eval] diz.ALU_m.Main_process_state[i]
(push) ; 5
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            9
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          297
;  :mk-clause            9
;  :num-allocs           3508183
;  :num-checks           9
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         113952)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= i@12@05 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            9
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          297
;  :mk-clause            9
;  :num-allocs           3508183
;  :num-checks           10
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         113961)
; [eval] -1
(push) ; 5
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05] != -1 | live]
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i@12@05)
  (- 0 1)))
(pop) ; 6
(push) ; 6
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
      i@12@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i]
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            10
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          298
;  :mk-clause            9
;  :num-allocs           3508183
;  :num-checks           11
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114187)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i@12@05 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            10
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          298
;  :mk-clause            9
;  :num-allocs           3508183
;  :num-checks           12
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114196)
(push) ; 7
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05]) | live]
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i@12@05)))
; [eval] diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            11
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          301
;  :mk-clause            10
;  :num-allocs           3627205
;  :num-checks           13
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114369)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@12@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            11
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          301
;  :mk-clause            10
;  :num-allocs           3627205
;  :num-checks           14
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114378)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            12
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          301
;  :mk-clause            10
;  :num-allocs           3627205
;  :num-checks           15
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114426)
(pop) ; 8
(push) ; 8
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
      i@12@05))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(i@12@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i@12@05)]
(assert (not
  (and
    (<
      i@12@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
    (<= 0 i@12@05))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@12@05 Int)) (!
  (implies
    (and
      (<
        i@12@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
      (<= 0 i@12@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
          i@12@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
            i@12@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
            i@12@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i@12@05))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            67
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            13
;  :datatype-accessor-ax 11
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          303
;  :mk-clause            10
;  :num-allocs           3627205
;  :num-checks           16
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         115081)
(declare-const $k@13@05 $Perm)
(assert ($Perm.isReadVar $k@13@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@13@05 $Perm.No) (< $Perm.No $k@13@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            67
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   7
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            14
;  :datatype-accessor-ax 11
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          307
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           17
;  :propagations         20
;  :quant-instantiations 8
;  :rlimit-count         115279)
(assert (<= $Perm.No $k@13@05))
(assert (<= $k@13@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@13@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            73
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            15
;  :datatype-accessor-ax 12
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          310
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           18
;  :propagations         20
;  :quant-instantiations 8
;  :rlimit-count         115612)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            73
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            16
;  :datatype-accessor-ax 12
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          310
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           19
;  :propagations         20
;  :quant-instantiations 8
;  :rlimit-count         115660)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            79
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            17
;  :datatype-accessor-ax 13
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          313
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           20
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116026)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            79
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            18
;  :datatype-accessor-ax 13
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          313
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           21
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116074)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            84
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            19
;  :datatype-accessor-ax 14
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          314
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           22
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116341)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            84
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            20
;  :datatype-accessor-ax 14
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          314
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           23
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116389)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            89
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            21
;  :datatype-accessor-ax 15
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          315
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           24
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116666)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            89
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            22
;  :datatype-accessor-ax 15
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          315
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           25
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116714)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            94
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            23
;  :datatype-accessor-ax 16
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          316
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           26
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117001)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            94
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            24
;  :datatype-accessor-ax 16
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          316
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           27
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117049)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            99
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            25
;  :datatype-accessor-ax 17
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          317
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           28
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117346)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            99
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            26
;  :datatype-accessor-ax 17
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          317
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           29
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117394)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            104
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            27
;  :datatype-accessor-ax 18
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          318
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           30
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117701)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            104
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            28
;  :datatype-accessor-ax 18
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          318
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           31
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117749)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            110
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            29
;  :datatype-accessor-ax 19
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          320
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           32
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118098)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            110
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            30
;  :datatype-accessor-ax 19
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          320
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           33
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118146)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            117
;  :arith-assert-diseq   5
;  :arith-assert-lower   17
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            31
;  :datatype-accessor-ax 20
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          324
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           34
;  :propagations         20
;  :quant-instantiations 10
;  :rlimit-count         118604)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            117
;  :arith-assert-diseq   5
;  :arith-assert-lower   17
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            32
;  :datatype-accessor-ax 20
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          324
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           35
;  :propagations         20
;  :quant-instantiations 10
;  :rlimit-count         118652)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            122
;  :arith-assert-diseq   5
;  :arith-assert-lower   17
;  :arith-assert-upper   9
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            33
;  :datatype-accessor-ax 21
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          326
;  :mk-clause            12
;  :num-allocs           3627205
;  :num-checks           36
;  :propagations         20
;  :quant-instantiations 10
;  :rlimit-count         119035)
(declare-const $k@14@05 $Perm)
(assert ($Perm.isReadVar $k@14@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@14@05 $Perm.No) (< $Perm.No $k@14@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            122
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            34
;  :datatype-accessor-ax 21
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          330
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           37
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         119234)
(assert (<= $Perm.No $k@14@05))
(assert (<= $k@14@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@14@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            128
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            35
;  :datatype-accessor-ax 22
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          333
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           38
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         119667)
(push) ; 2
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            128
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            36
;  :datatype-accessor-ax 22
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          333
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           39
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         119715)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            134
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            37
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          336
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           40
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         120181)
(push) ; 2
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            134
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            38
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          336
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           41
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         120229)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            134
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            38
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          336
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           42
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         120242)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            139
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            39
;  :datatype-accessor-ax 24
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          337
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           43
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         120609)
(push) ; 2
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            139
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            40
;  :datatype-accessor-ax 24
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          337
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           44
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         120657)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            144
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            41
;  :datatype-accessor-ax 25
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          338
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           45
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         121034)
(push) ; 2
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            144
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            42
;  :datatype-accessor-ax 25
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          338
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           46
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         121082)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            149
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            43
;  :datatype-accessor-ax 26
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          339
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           47
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         121469)
(push) ; 2
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            149
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            44
;  :datatype-accessor-ax 26
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          339
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           48
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         121517)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            154
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            45
;  :datatype-accessor-ax 27
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          340
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           49
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         121914)
(push) ; 2
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            154
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            46
;  :datatype-accessor-ax 27
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          340
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           50
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         121962)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            159
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            47
;  :datatype-accessor-ax 28
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          341
;  :mk-clause            14
;  :num-allocs           3627205
;  :num-checks           51
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         122369)
(declare-const $k@15@05 $Perm)
(assert ($Perm.isReadVar $k@15@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@15@05 $Perm.No) (< $Perm.No $k@15@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            159
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            48
;  :datatype-accessor-ax 28
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          345
;  :mk-clause            16
;  :num-allocs           3627205
;  :num-checks           52
;  :propagations         22
;  :quant-instantiations 11
;  :rlimit-count         122567)
(assert (<= $Perm.No $k@15@05))
(assert (<= $k@15@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@15@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            165
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            49
;  :datatype-accessor-ax 29
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          348
;  :mk-clause            16
;  :num-allocs           3627205
;  :num-checks           53
;  :propagations         22
;  :quant-instantiations 11
;  :rlimit-count         123070)
(push) ; 2
(assert (not (< $Perm.No $k@15@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            165
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            50
;  :datatype-accessor-ax 29
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          348
;  :mk-clause            16
;  :num-allocs           3627205
;  :num-checks           54
;  :propagations         22
;  :quant-instantiations 11
;  :rlimit-count         123118)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            51
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          351
;  :mk-clause            16
;  :num-allocs           3627205
;  :num-checks           55
;  :propagations         22
;  :quant-instantiations 12
;  :rlimit-count         123662)
(push) ; 2
(assert (not (< $Perm.No $k@15@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            52
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          351
;  :mk-clause            16
;  :num-allocs           3627205
;  :num-checks           56
;  :propagations         22
;  :quant-instantiations 12
;  :rlimit-count         123710)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            52
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          351
;  :mk-clause            16
;  :num-allocs           3627205
;  :num-checks           57
;  :propagations         22
;  :quant-instantiations 12
;  :rlimit-count         123723)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            53
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          352
;  :mk-clause            16
;  :num-allocs           3627205
;  :num-checks           58
;  :propagations         22
;  :quant-instantiations 12
;  :rlimit-count         124160)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            54
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          352
;  :mk-clause            16
;  :num-allocs           3627205
;  :num-checks           59
;  :propagations         22
;  :quant-instantiations 12
;  :rlimit-count         124208)
(declare-const $k@16@05 $Perm)
(assert ($Perm.isReadVar $k@16@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@16@05 $Perm.No) (< $Perm.No $k@16@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   8
;  :arith-assert-lower   23
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            55
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          356
;  :mk-clause            18
;  :num-allocs           3753090
;  :num-checks           60
;  :propagations         23
;  :quant-instantiations 12
;  :rlimit-count         124407)
(set-option :timeout 10)
(push) ; 2
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               236
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               56
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             381
;  :mk-clause               19
;  :num-allocs              3753090
;  :num-checks              61
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            125235
;  :time                    0.00)
(assert (<= $Perm.No $k@16@05))
(assert (<= $k@16@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@16@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               242
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               57
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             384
;  :mk-clause               19
;  :num-allocs              3753090
;  :num-checks              62
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            125768)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               242
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               58
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             384
;  :mk-clause               19
;  :num-allocs              3753090
;  :num-checks              63
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            125816)
(push) ; 2
(assert (not (< $Perm.No $k@16@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               242
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               59
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             384
;  :mk-clause               19
;  :num-allocs              3753090
;  :num-checks              64
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            125864)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               242
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               60
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             384
;  :mk-clause               19
;  :num-allocs              3753090
;  :num-checks              65
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            125912)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               250
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               61
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             387
;  :mk-clause               19
;  :num-allocs              3753090
;  :num-checks              66
;  :propagations            23
;  :quant-instantiations    13
;  :rlimit-count            126483)
(declare-const $k@17@05 $Perm)
(assert ($Perm.isReadVar $k@17@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@17@05 $Perm.No) (< $Perm.No $k@17@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               250
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               62
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             391
;  :mk-clause               21
;  :num-allocs              3753090
;  :num-checks              67
;  :propagations            24
;  :quant-instantiations    13
;  :rlimit-count            126682)
(declare-const $t@18@05 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@13@05)
    (=
      $t@18@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))
  (implies
    (< $Perm.No $k@17@05)
    (=
      $t@18@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@13@05 $k@17@05)))
(assert (<= (+ $k@13@05 $k@17@05) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@13@05 $k@17@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               255
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      17
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               63
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             397
;  :mk-clause               21
;  :num-allocs              3753090
;  :num-checks              68
;  :propagations            24
;  :quant-instantiations    14
;  :rlimit-count            127381)
(push) ; 2
(assert (not (< $Perm.No (+ $k@13@05 $k@17@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               255
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-conflicts         1
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               64
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             398
;  :mk-clause               21
;  :num-allocs              3753090
;  :num-checks              69
;  :propagations            24
;  :quant-instantiations    14
;  :rlimit-count            127447)
(assert (= $t@18@05 diz@5@05))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@19@05 $Snap)
(assert (= $t@19@05 ($Snap.combine ($Snap.first $t@19@05) ($Snap.second $t@19@05))))
(declare-const $k@20@05 $Perm)
(assert ($Perm.isReadVar $k@20@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@20@05 $Perm.No) (< $Perm.No $k@20@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               318
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      19
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               66
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             426
;  :mk-clause               24
;  :num-allocs              3881865
;  :num-checks              71
;  :propagations            25
;  :quant-instantiations    14
;  :rlimit-count            128416)
(assert (<= $Perm.No $k@20@05))
(assert (<= $k@20@05 $Perm.Write))
(assert (implies (< $Perm.No $k@20@05) (not (= diz@5@05 $Ref.null))))
(assert (=
  ($Snap.second $t@19@05)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@19@05))
    ($Snap.second ($Snap.second $t@19@05)))))
(assert (= ($Snap.first ($Snap.second $t@19@05)) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               324
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      20
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               67
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             429
;  :mk-clause               24
;  :num-allocs              3881865
;  :num-checks              72
;  :propagations            25
;  :quant-instantiations    14
;  :rlimit-count            128659)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@19@05)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@19@05))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@19@05)))
    ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               330
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      20
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               68
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             432
;  :mk-clause               24
;  :num-allocs              3881865
;  :num-checks              73
;  :propagations            25
;  :quant-instantiations    15
;  :rlimit-count            128931)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@19@05)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@05))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               335
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      20
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               69
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             433
;  :mk-clause               24
;  :num-allocs              3881865
;  :num-checks              74
;  :propagations            25
;  :quant-instantiations    15
;  :rlimit-count            129108)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               341
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      20
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               70
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             435
;  :mk-clause               24
;  :num-allocs              3881865
;  :num-checks              75
;  :propagations            25
;  :quant-instantiations    15
;  :rlimit-count            129327)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               348
;  :arith-assert-diseq      10
;  :arith-assert-lower      30
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               71
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             441
;  :mk-clause               24
;  :num-allocs              3881865
;  :num-checks              76
;  :propagations            25
;  :quant-instantiations    17
;  :rlimit-count            129656)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               354
;  :arith-assert-diseq      10
;  :arith-assert-lower      30
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               72
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             443
;  :mk-clause               24
;  :num-allocs              3881865
;  :num-checks              77
;  :propagations            25
;  :quant-instantiations    17
;  :rlimit-count            129895)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.ALU_m.Main_process_state[i] } 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|)
(declare-const i@21@05 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 4 | 0 <= i@21@05 | live]
; [else-branch: 4 | !(0 <= i@21@05) | live]
(push) ; 5
; [then-branch: 4 | 0 <= i@21@05]
(assert (<= 0 i@21@05))
; [eval] i < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               362
;  :arith-assert-diseq      10
;  :arith-assert-lower      33
;  :arith-assert-upper      22
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               73
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             451
;  :mk-clause               24
;  :num-allocs              3881865
;  :num-checks              78
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130333)
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(0 <= i@21@05)]
(assert (not (<= 0 i@21@05)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 5 | i@21@05 < |First:(Second:(Second:(Second:($t@19@05))))| && 0 <= i@21@05 | live]
; [else-branch: 5 | !(i@21@05 < |First:(Second:(Second:(Second:($t@19@05))))| && 0 <= i@21@05) | live]
(push) ; 5
; [then-branch: 5 | i@21@05 < |First:(Second:(Second:(Second:($t@19@05))))| && 0 <= i@21@05]
(assert (and
  (<
    i@21@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))
  (<= 0 i@21@05)))
; [eval] diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i] == -1
; [eval] diz.ALU_m.Main_process_state[i]
(push) ; 6
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      10
;  :arith-assert-lower      34
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               74
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             453
;  :mk-clause               24
;  :num-allocs              3881865
;  :num-checks              79
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130494)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@21@05 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      10
;  :arith-assert-lower      34
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               74
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             453
;  :mk-clause               24
;  :num-allocs              3881865
;  :num-checks              80
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130503)
; [eval] -1
(push) ; 6
; [then-branch: 6 | First:(Second:(Second:(Second:($t@19@05))))[i@21@05] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@19@05))))[i@21@05] != -1 | live]
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@19@05))))[i@21@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))
    i@21@05)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 6 | First:(Second:(Second:(Second:($t@19@05))))[i@21@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))
      i@21@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i]
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      10
;  :arith-assert-lower      34
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               75
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             454
;  :mk-clause               24
;  :num-allocs              3881865
;  :num-checks              81
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130717)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@21@05 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      10
;  :arith-assert-lower      34
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               75
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             454
;  :mk-clause               24
;  :num-allocs              3881865
;  :num-checks              82
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130726)
(push) ; 8
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@19@05))))[i@21@05] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@19@05))))[i@21@05]) | live]
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@19@05))))[i@21@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))
    i@21@05)))
; [eval] diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               76
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             457
;  :mk-clause               25
;  :num-allocs              3881865
;  :num-checks              83
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130889)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@21@05 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               76
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             457
;  :mk-clause               25
;  :num-allocs              3881865
;  :num-checks              84
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130898)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               77
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             457
;  :mk-clause               25
;  :num-allocs              3881865
;  :num-checks              85
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130946)
(pop) ; 9
(push) ; 9
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@19@05))))[i@21@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))
      i@21@05))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(i@21@05 < |First:(Second:(Second:(Second:($t@19@05))))| && 0 <= i@21@05)]
(assert (not
  (and
    (<
      i@21@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))
    (<= 0 i@21@05))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@21@05 Int)) (!
  (implies
    (and
      (<
        i@21@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))
      (<= 0 i@21@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))
          i@21@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))
            i@21@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))
            i@21@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))
    i@21@05))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               368
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               78
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             459
;  :mk-clause               25
;  :num-allocs              3881865
;  :num-checks              86
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            131571)
(declare-const $k@22@05 $Perm)
(assert ($Perm.isReadVar $k@22@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@22@05 $Perm.No) (< $Perm.No $k@22@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               368
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      24
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               79
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             463
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              87
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            131770)
(assert (<= $Perm.No $k@22@05))
(assert (<= $k@22@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@22@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@19@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               374
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               80
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             466
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              88
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            132093)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               374
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               81
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             466
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              89
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            132141)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               380
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               82
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             469
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              90
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            132497)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               380
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               83
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             469
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              91
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            132545)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               385
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               84
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             470
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              92
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            132802)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               385
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               85
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             470
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              93
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            132850)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               390
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               86
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             471
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              94
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            133117)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               390
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               87
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             471
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              95
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            133165)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               395
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               88
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             472
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              96
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            133442)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               395
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               89
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             472
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              97
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            133490)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               400
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               90
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             473
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              98
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            133777)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               400
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               91
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             473
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              99
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            133825)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               405
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               92
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             474
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              100
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            134122)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               405
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               93
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             474
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              101
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            134170)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               411
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               94
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             476
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              102
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            134509)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               411
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               95
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             476
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              103
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            134557)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               418
;  :arith-assert-diseq      12
;  :arith-assert-lower      40
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               96
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             480
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              104
;  :propagations            26
;  :quant-instantiations    21
;  :rlimit-count            135004)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               418
;  :arith-assert-diseq      12
;  :arith-assert-lower      40
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               97
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             480
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              105
;  :propagations            26
;  :quant-instantiations    21
;  :rlimit-count            135052)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               423
;  :arith-assert-diseq      12
;  :arith-assert-lower      40
;  :arith-assert-upper      26
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               98
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             482
;  :mk-clause               27
;  :num-allocs              3881865
;  :num-checks              106
;  :propagations            26
;  :quant-instantiations    21
;  :rlimit-count            135426)
(declare-const $k@23@05 $Perm)
(assert ($Perm.isReadVar $k@23@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@23@05 $Perm.No) (< $Perm.No $k@23@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               423
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      27
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               99
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             486
;  :mk-clause               29
;  :num-allocs              3881865
;  :num-checks              107
;  :propagations            27
;  :quant-instantiations    21
;  :rlimit-count            135625)
(assert (<= $Perm.No $k@23@05))
(assert (<= $k@23@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@23@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@19@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               429
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               100
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             489
;  :mk-clause               29
;  :num-allocs              3881865
;  :num-checks              108
;  :propagations            27
;  :quant-instantiations    21
;  :rlimit-count            136048)
(push) ; 3
(assert (not (< $Perm.No $k@23@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               429
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               101
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             489
;  :mk-clause               29
;  :num-allocs              3881865
;  :num-checks              109
;  :propagations            27
;  :quant-instantiations    21
;  :rlimit-count            136096)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               435
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               102
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             492
;  :mk-clause               29
;  :num-allocs              3881865
;  :num-checks              110
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            136552)
(push) ; 3
(assert (not (< $Perm.No $k@23@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               435
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               103
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             492
;  :mk-clause               29
;  :num-allocs              3881865
;  :num-checks              111
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            136600)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               435
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               103
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             492
;  :mk-clause               29
;  :num-allocs              3881865
;  :num-checks              112
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            136613)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               440
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               104
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             493
;  :mk-clause               29
;  :num-allocs              3881865
;  :num-checks              113
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            136970)
(push) ; 3
(assert (not (< $Perm.No $k@23@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               440
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               105
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             493
;  :mk-clause               29
;  :num-allocs              3881865
;  :num-checks              114
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            137018)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               445
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               106
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             494
;  :mk-clause               29
;  :num-allocs              3881865
;  :num-checks              115
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            137385)
(push) ; 3
(assert (not (< $Perm.No $k@23@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               445
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               107
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             494
;  :mk-clause               29
;  :num-allocs              3881865
;  :num-checks              116
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            137433)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               450
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               108
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             495
;  :mk-clause               29
;  :num-allocs              3881865
;  :num-checks              117
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            137810)
(push) ; 3
(assert (not (< $Perm.No $k@23@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               450
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               109
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             495
;  :mk-clause               29
;  :num-allocs              3881865
;  :num-checks              118
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            137858)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               455
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               110
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             496
;  :mk-clause               29
;  :num-allocs              4018202
;  :num-checks              119
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            138245)
(push) ; 3
(assert (not (< $Perm.No $k@23@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               455
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               111
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             496
;  :mk-clause               29
;  :num-allocs              4018202
;  :num-checks              120
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            138293)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               460
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               112
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             497
;  :mk-clause               29
;  :num-allocs              4018202
;  :num-checks              121
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            138690)
(declare-const $k@24@05 $Perm)
(assert ($Perm.isReadVar $k@24@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@24@05 $Perm.No) (< $Perm.No $k@24@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               460
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               113
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             501
;  :mk-clause               31
;  :num-allocs              4018202
;  :num-checks              122
;  :propagations            28
;  :quant-instantiations    22
;  :rlimit-count            138889)
(assert (<= $Perm.No $k@24@05))
(assert (<= $k@24@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@24@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@19@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               466
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               114
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             504
;  :mk-clause               31
;  :num-allocs              4018202
;  :num-checks              123
;  :propagations            28
;  :quant-instantiations    22
;  :rlimit-count            139382)
(push) ; 3
(assert (not (< $Perm.No $k@24@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               466
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               115
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             504
;  :mk-clause               31
;  :num-allocs              4018202
;  :num-checks              124
;  :propagations            28
;  :quant-instantiations    22
;  :rlimit-count            139430)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               472
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               116
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             507
;  :mk-clause               31
;  :num-allocs              4018202
;  :num-checks              125
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            139964)
(push) ; 3
(assert (not (< $Perm.No $k@24@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               472
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               117
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             507
;  :mk-clause               31
;  :num-allocs              4018202
;  :num-checks              126
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            140012)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               472
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               117
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             507
;  :mk-clause               31
;  :num-allocs              4018202
;  :num-checks              127
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            140025)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               477
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               118
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             508
;  :mk-clause               31
;  :num-allocs              4018202
;  :num-checks              128
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            140452)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               477
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               119
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             508
;  :mk-clause               31
;  :num-allocs              4018202
;  :num-checks              129
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            140500)
(declare-const $k@25@05 $Perm)
(assert ($Perm.isReadVar $k@25@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@25@05 $Perm.No) (< $Perm.No $k@25@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               477
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         1
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               120
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             512
;  :mk-clause               33
;  :num-allocs              4018202
;  :num-checks              130
;  :propagations            29
;  :quant-instantiations    23
;  :rlimit-count            140699)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               681
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-conflicts         1
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               122
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             571
;  :mk-clause               36
;  :num-allocs              4157111
;  :num-checks              131
;  :propagations            30
;  :quant-instantiations    23
;  :rlimit-count            142237
;  :time                    0.00)
(assert (<= $Perm.No $k@25@05))
(assert (<= $k@25@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@25@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               687
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-conflicts         1
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               123
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             574
;  :mk-clause               36
;  :num-allocs              4157111
;  :num-checks              132
;  :propagations            30
;  :quant-instantiations    23
;  :rlimit-count            142760)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               687
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-conflicts         1
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               124
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             574
;  :mk-clause               36
;  :num-allocs              4157111
;  :num-checks              133
;  :propagations            30
;  :quant-instantiations    23
;  :rlimit-count            142808)
(push) ; 3
(assert (not (< $Perm.No $k@25@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               687
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-conflicts         1
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               125
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             574
;  :mk-clause               36
;  :num-allocs              4157111
;  :num-checks              134
;  :propagations            30
;  :quant-instantiations    23
;  :rlimit-count            142856)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               687
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-conflicts         1
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               126
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             574
;  :mk-clause               36
;  :num-allocs              4157111
;  :num-checks              135
;  :propagations            30
;  :quant-instantiations    23
;  :rlimit-count            142904)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@19@05))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               695
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-conflicts         1
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               127
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             577
;  :mk-clause               36
;  :num-allocs              4157111
;  :num-checks              136
;  :propagations            30
;  :quant-instantiations    24
;  :rlimit-count            143465)
(declare-const $k@26@05 $Perm)
(assert ($Perm.isReadVar $k@26@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@26@05 $Perm.No) (< $Perm.No $k@26@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               695
;  :arith-assert-diseq      16
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               128
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             581
;  :mk-clause               38
;  :num-allocs              4157111
;  :num-checks              137
;  :propagations            31
;  :quant-instantiations    24
;  :rlimit-count            143663)
(declare-const $t@27@05 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@22@05)
    (=
      $t@27@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))
  (implies
    (< $Perm.No $k@26@05)
    (=
      $t@27@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@22@05 $k@26@05)))
(assert (<= (+ $k@22@05 $k@26@05) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@22@05 $k@26@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@19@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               705
;  :arith-assert-diseq      16
;  :arith-assert-lower      50
;  :arith-assert-upper      35
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               129
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             588
;  :mk-clause               38
;  :num-allocs              4157111
;  :num-checks              138
;  :propagations            31
;  :quant-instantiations    25
;  :rlimit-count            144454)
(push) ; 3
(assert (not (< $Perm.No (+ $k@22@05 $k@26@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               705
;  :arith-assert-diseq      16
;  :arith-assert-lower      50
;  :arith-assert-upper      36
;  :arith-conflicts         2
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         5
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               130
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             589
;  :mk-clause               38
;  :num-allocs              4157111
;  :num-checks              139
;  :propagations            31
;  :quant-instantiations    25
;  :rlimit-count            144520)
(assert (= $t@27@05 diz@5@05))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 0 <= sys__result
(assert (<= 0 sys__result@9@05))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@05)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] sys__result < 16
(assert (< sys__result@9@05 16))
(pop) ; 2
(push) ; 2
; [exec]
; var sys__local__result__3: Int
(declare-const sys__local__result__3@28@05 Int)
; [exec]
; var i__4: Int
(declare-const i__4@29@05 Int)
; [exec]
; var divisor__5: Int
(declare-const divisor__5@30@05 Int)
; [exec]
; var __flatten_1__6: Int
(declare-const __flatten_1__6@31@05 Int)
; [exec]
; divisor__5 := 1
; [exec]
; i__4 := 0
(declare-const divisor__5@32@05 Int)
(declare-const __flatten_1__6@33@05 Int)
(declare-const i__4@34@05 Int)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@35@05 $Snap)
(assert (= $t@35@05 ($Snap.combine ($Snap.first $t@35@05) ($Snap.second $t@35@05))))
(declare-const $k@36@05 $Perm)
(assert ($Perm.isReadVar $k@36@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@36@05 $Perm.No) (< $Perm.No $k@36@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               710
;  :arith-assert-diseq      17
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         5
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               131
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             594
;  :mk-clause               40
;  :num-allocs              4157111
;  :num-checks              140
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            144916)
(assert (<= $Perm.No $k@36@05))
(assert (<= $k@36@05 $Perm.Write))
(assert (implies (< $Perm.No $k@36@05) (not (= diz@5@05 $Ref.null))))
(assert (=
  ($Snap.second $t@35@05)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@35@05))
    ($Snap.second ($Snap.second $t@35@05)))))
(assert (= ($Snap.first ($Snap.second $t@35@05)) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               716
;  :arith-assert-diseq      17
;  :arith-assert-lower      52
;  :arith-assert-upper      38
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         5
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               132
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             597
;  :mk-clause               40
;  :num-allocs              4157111
;  :num-checks              141
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145159)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@35@05))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@35@05)))
    ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               722
;  :arith-assert-diseq      17
;  :arith-assert-lower      52
;  :arith-assert-upper      38
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         5
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               133
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             600
;  :mk-clause               40
;  :num-allocs              4157111
;  :num-checks              142
;  :propagations            32
;  :quant-instantiations    26
;  :rlimit-count            145431)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@35@05)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               727
;  :arith-assert-diseq      17
;  :arith-assert-lower      52
;  :arith-assert-upper      38
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         5
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               134
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             601
;  :mk-clause               40
;  :num-allocs              4157111
;  :num-checks              143
;  :propagations            32
;  :quant-instantiations    26
;  :rlimit-count            145608)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               733
;  :arith-assert-diseq      17
;  :arith-assert-lower      52
;  :arith-assert-upper      38
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         5
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               135
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             603
;  :mk-clause               40
;  :num-allocs              4157111
;  :num-checks              144
;  :propagations            32
;  :quant-instantiations    26
;  :rlimit-count            145827)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               136
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             609
;  :mk-clause               40
;  :num-allocs              4157111
;  :num-checks              145
;  :propagations            32
;  :quant-instantiations    28
;  :rlimit-count            146157)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               746
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               137
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             611
;  :mk-clause               40
;  :num-allocs              4157111
;  :num-checks              146
;  :propagations            32
;  :quant-instantiations    28
;  :rlimit-count            146396)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))
  $Snap.unit))
; [eval] (forall i__7: Int :: { diz.ALU_m.Main_process_state[i__7] } 0 <= i__7 && i__7 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__7] == -1 || 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|)
(declare-const i__7@37@05 Int)
(push) ; 4
; [eval] 0 <= i__7 && i__7 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__7] == -1 || 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__7 && i__7 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__7
(push) ; 5
; [then-branch: 8 | 0 <= i__7@37@05 | live]
; [else-branch: 8 | !(0 <= i__7@37@05) | live]
(push) ; 6
; [then-branch: 8 | 0 <= i__7@37@05]
(assert (<= 0 i__7@37@05))
; [eval] i__7 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               754
;  :arith-assert-diseq      17
;  :arith-assert-lower      57
;  :arith-assert-upper      40
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               138
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             619
;  :mk-clause               40
;  :num-allocs              4157111
;  :num-checks              147
;  :propagations            32
;  :quant-instantiations    30
;  :rlimit-count            146835)
(pop) ; 6
(push) ; 6
; [else-branch: 8 | !(0 <= i__7@37@05)]
(assert (not (<= 0 i__7@37@05)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 9 | i__7@37@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__7@37@05 | live]
; [else-branch: 9 | !(i__7@37@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__7@37@05) | live]
(push) ; 6
; [then-branch: 9 | i__7@37@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__7@37@05]
(assert (and
  (<
    i__7@37@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
  (<= 0 i__7@37@05)))
; [eval] diz.ALU_m.Main_process_state[i__7] == -1 || 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__7] == -1
; [eval] diz.ALU_m.Main_process_state[i__7]
(push) ; 7
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               755
;  :arith-assert-diseq      17
;  :arith-assert-lower      58
;  :arith-assert-upper      41
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               139
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             621
;  :mk-clause               40
;  :num-allocs              4157111
;  :num-checks              148
;  :propagations            32
;  :quant-instantiations    30
;  :rlimit-count            146996)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__7@37@05 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               755
;  :arith-assert-diseq      17
;  :arith-assert-lower      58
;  :arith-assert-upper      41
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               139
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             621
;  :mk-clause               40
;  :num-allocs              4157111
;  :num-checks              149
;  :propagations            32
;  :quant-instantiations    30
;  :rlimit-count            147005)
; [eval] -1
(push) ; 7
; [then-branch: 10 | First:(Second:(Second:(Second:($t@35@05))))[i__7@37@05] == -1 | live]
; [else-branch: 10 | First:(Second:(Second:(Second:($t@35@05))))[i__7@37@05] != -1 | live]
(push) ; 8
; [then-branch: 10 | First:(Second:(Second:(Second:($t@35@05))))[i__7@37@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__7@37@05)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 10 | First:(Second:(Second:(Second:($t@35@05))))[i__7@37@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
      i__7@37@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__7]
; [eval] diz.ALU_m.Main_process_state[i__7]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               755
;  :arith-assert-diseq      17
;  :arith-assert-lower      58
;  :arith-assert-upper      41
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               140
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             622
;  :mk-clause               40
;  :num-allocs              4157111
;  :num-checks              150
;  :propagations            32
;  :quant-instantiations    30
;  :rlimit-count            147219)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__7@37@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               755
;  :arith-assert-diseq      17
;  :arith-assert-lower      58
;  :arith-assert-upper      41
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               140
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             622
;  :mk-clause               40
;  :num-allocs              4157111
;  :num-checks              151
;  :propagations            32
;  :quant-instantiations    30
;  :rlimit-count            147228)
(push) ; 9
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:($t@35@05))))[i__7@37@05] | live]
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:($t@35@05))))[i__7@37@05]) | live]
(push) ; 10
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:($t@35@05))))[i__7@37@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__7@37@05)))
; [eval] diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__7]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               755
;  :arith-assert-diseq      18
;  :arith-assert-lower      61
;  :arith-assert-upper      41
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               141
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             625
;  :mk-clause               41
;  :num-allocs              4157111
;  :num-checks              152
;  :propagations            32
;  :quant-instantiations    30
;  :rlimit-count            147390)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__7@37@05 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               755
;  :arith-assert-diseq      18
;  :arith-assert-lower      61
;  :arith-assert-upper      41
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               141
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             625
;  :mk-clause               41
;  :num-allocs              4157111
;  :num-checks              153
;  :propagations            32
;  :quant-instantiations    30
;  :rlimit-count            147399)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               755
;  :arith-assert-diseq      18
;  :arith-assert-lower      61
;  :arith-assert-upper      41
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               142
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             625
;  :mk-clause               41
;  :num-allocs              4157111
;  :num-checks              154
;  :propagations            32
;  :quant-instantiations    30
;  :rlimit-count            147447)
(pop) ; 10
(push) ; 10
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:($t@35@05))))[i__7@37@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
      i__7@37@05))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 9 | !(i__7@37@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__7@37@05)]
(assert (not
  (and
    (<
      i__7@37@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
    (<= 0 i__7@37@05))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__7@37@05 Int)) (!
  (implies
    (and
      (<
        i__7@37@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
      (<= 0 i__7@37@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
          i__7@37@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__7@37@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__7@37@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__7@37@05))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               760
;  :arith-assert-diseq      18
;  :arith-assert-lower      61
;  :arith-assert-upper      41
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               143
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             627
;  :mk-clause               41
;  :num-allocs              4157111
;  :num-checks              155
;  :propagations            32
;  :quant-instantiations    30
;  :rlimit-count            148072)
(declare-const $k@38@05 $Perm)
(assert ($Perm.isReadVar $k@38@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@38@05 $Perm.No) (< $Perm.No $k@38@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               760
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      42
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               144
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             631
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              156
;  :propagations            33
;  :quant-instantiations    30
;  :rlimit-count            148270)
(assert (<= $Perm.No $k@38@05))
(assert (<= $k@38@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@38@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               766
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               145
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             634
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              157
;  :propagations            33
;  :quant-instantiations    30
;  :rlimit-count            148593)
(push) ; 4
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               766
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               146
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             634
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              158
;  :propagations            33
;  :quant-instantiations    30
;  :rlimit-count            148641)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               772
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               147
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             637
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              159
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            148997)
(push) ; 4
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               772
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               148
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             637
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              160
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            149045)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               777
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             638
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              161
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            149302)
(push) ; 4
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               777
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               150
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             638
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              162
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            149350)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               782
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               151
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             639
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              163
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            149617)
(push) ; 4
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               782
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               152
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             639
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              164
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            149665)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               787
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               153
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             640
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              165
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            149942)
(push) ; 4
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               787
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               154
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             640
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              166
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            149990)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               155
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             641
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              167
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            150277)
(push) ; 4
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               156
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             641
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              168
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            150325)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               797
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               157
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             642
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              169
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            150622)
(push) ; 4
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               797
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               158
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             642
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              170
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            150670)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               159
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             644
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              171
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            151009)
(push) ; 4
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               160
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             644
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              172
;  :propagations            33
;  :quant-instantiations    31
;  :rlimit-count            151057)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               810
;  :arith-assert-diseq      19
;  :arith-assert-lower      64
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               161
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             648
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              173
;  :propagations            33
;  :quant-instantiations    32
;  :rlimit-count            151505)
(push) ; 4
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               810
;  :arith-assert-diseq      19
;  :arith-assert-lower      64
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               162
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             648
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              174
;  :propagations            33
;  :quant-instantiations    32
;  :rlimit-count            151553)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               815
;  :arith-assert-diseq      19
;  :arith-assert-lower      64
;  :arith-assert-upper      44
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               163
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             650
;  :mk-clause               43
;  :num-allocs              4157111
;  :num-checks              175
;  :propagations            33
;  :quant-instantiations    32
;  :rlimit-count            151926)
(declare-const $k@39@05 $Perm)
(assert ($Perm.isReadVar $k@39@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@39@05 $Perm.No) (< $Perm.No $k@39@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               815
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      45
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               164
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             654
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              176
;  :propagations            34
;  :quant-instantiations    32
;  :rlimit-count            152125)
(assert (<= $Perm.No $k@39@05))
(assert (<= $k@39@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@39@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               821
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               165
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             657
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              177
;  :propagations            34
;  :quant-instantiations    32
;  :rlimit-count            152548)
(push) ; 4
(assert (not (< $Perm.No $k@39@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               821
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               166
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             657
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              178
;  :propagations            34
;  :quant-instantiations    32
;  :rlimit-count            152596)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               827
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               167
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             660
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              179
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            153052)
(push) ; 4
(assert (not (< $Perm.No $k@39@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               827
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               168
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             660
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              180
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            153100)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               827
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               168
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             660
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              181
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            153113)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               832
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               169
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             661
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              182
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            153470)
(push) ; 4
(assert (not (< $Perm.No $k@39@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               832
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               170
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             661
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              183
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            153518)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               837
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               171
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             662
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              184
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            153885)
(push) ; 4
(assert (not (< $Perm.No $k@39@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               837
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               172
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             662
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              185
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            153933)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               842
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               173
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             663
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              186
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            154310)
(push) ; 4
(assert (not (< $Perm.No $k@39@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               842
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               174
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             663
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              187
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            154358)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               847
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               175
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             664
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              188
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            154745)
(push) ; 4
(assert (not (< $Perm.No $k@39@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               847
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               176
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             664
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              189
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            154793)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               852
;  :arith-assert-diseq      20
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               177
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             665
;  :mk-clause               45
;  :num-allocs              4157111
;  :num-checks              190
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            155190)
(declare-const $k@40@05 $Perm)
(assert ($Perm.isReadVar $k@40@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@40@05 $Perm.No) (< $Perm.No $k@40@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               852
;  :arith-assert-diseq      21
;  :arith-assert-lower      68
;  :arith-assert-upper      47
;  :arith-conflicts         2
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               178
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             669
;  :mk-clause               47
;  :num-allocs              4157111
;  :num-checks              191
;  :propagations            35
;  :quant-instantiations    33
;  :rlimit-count            155388)
(assert (<= $Perm.No $k@40@05))
(assert (<= $k@40@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@40@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               858
;  :arith-assert-diseq      21
;  :arith-assert-lower      68
;  :arith-assert-upper      48
;  :arith-conflicts         2
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               179
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             672
;  :mk-clause               47
;  :num-allocs              4157111
;  :num-checks              192
;  :propagations            35
;  :quant-instantiations    33
;  :rlimit-count            155881)
(push) ; 4
(assert (not (< $Perm.No $k@40@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               858
;  :arith-assert-diseq      21
;  :arith-assert-lower      68
;  :arith-assert-upper      48
;  :arith-conflicts         2
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               180
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             672
;  :mk-clause               47
;  :num-allocs              4157111
;  :num-checks              193
;  :propagations            35
;  :quant-instantiations    33
;  :rlimit-count            155929)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               864
;  :arith-assert-diseq      21
;  :arith-assert-lower      68
;  :arith-assert-upper      48
;  :arith-conflicts         2
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               181
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             675
;  :mk-clause               47
;  :num-allocs              4157111
;  :num-checks              194
;  :propagations            35
;  :quant-instantiations    34
;  :rlimit-count            156463)
(push) ; 4
(assert (not (< $Perm.No $k@40@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               864
;  :arith-assert-diseq      21
;  :arith-assert-lower      68
;  :arith-assert-upper      48
;  :arith-conflicts         2
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               182
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             675
;  :mk-clause               47
;  :num-allocs              4157111
;  :num-checks              195
;  :propagations            35
;  :quant-instantiations    34
;  :rlimit-count            156511)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               864
;  :arith-assert-diseq      21
;  :arith-assert-lower      68
;  :arith-assert-upper      48
;  :arith-conflicts         2
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               182
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             675
;  :mk-clause               47
;  :num-allocs              4157111
;  :num-checks              196
;  :propagations            35
;  :quant-instantiations    34
;  :rlimit-count            156524)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               869
;  :arith-assert-diseq      21
;  :arith-assert-lower      68
;  :arith-assert-upper      48
;  :arith-conflicts         2
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               183
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             676
;  :mk-clause               47
;  :num-allocs              4157111
;  :num-checks              197
;  :propagations            35
;  :quant-instantiations    34
;  :rlimit-count            156951)
(push) ; 4
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               869
;  :arith-assert-diseq      21
;  :arith-assert-lower      68
;  :arith-assert-upper      48
;  :arith-conflicts         2
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               184
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             676
;  :mk-clause               47
;  :num-allocs              4157111
;  :num-checks              198
;  :propagations            35
;  :quant-instantiations    34
;  :rlimit-count            156999)
(declare-const $k@41@05 $Perm)
(assert ($Perm.isReadVar $k@41@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@41@05 $Perm.No) (< $Perm.No $k@41@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               869
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      49
;  :arith-conflicts         2
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               185
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              37
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             680
;  :mk-clause               49
;  :num-allocs              4157111
;  :num-checks              199
;  :propagations            36
;  :quant-instantiations    34
;  :rlimit-count            157197)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1073
;  :arith-assert-diseq      22
;  :arith-assert-lower      71
;  :arith-assert-upper      50
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         7
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               187
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              40
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             739
;  :mk-clause               52
;  :num-allocs              4157111
;  :num-checks              200
;  :propagations            37
;  :quant-instantiations    34
;  :rlimit-count            158739
;  :time                    0.00)
(assert (<= $Perm.No $k@41@05))
(assert (<= $k@41@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@41@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1079
;  :arith-assert-diseq      22
;  :arith-assert-lower      71
;  :arith-assert-upper      51
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         7
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               188
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              40
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             742
;  :mk-clause               52
;  :num-allocs              4157111
;  :num-checks              201
;  :propagations            37
;  :quant-instantiations    34
;  :rlimit-count            159262)
(push) ; 4
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1079
;  :arith-assert-diseq      22
;  :arith-assert-lower      71
;  :arith-assert-upper      51
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         7
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               189
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              40
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             742
;  :mk-clause               52
;  :num-allocs              4157111
;  :num-checks              202
;  :propagations            37
;  :quant-instantiations    34
;  :rlimit-count            159310)
(push) ; 4
(assert (not (< $Perm.No $k@41@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1079
;  :arith-assert-diseq      22
;  :arith-assert-lower      71
;  :arith-assert-upper      51
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         7
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              40
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             742
;  :mk-clause               52
;  :num-allocs              4157111
;  :num-checks              203
;  :propagations            37
;  :quant-instantiations    34
;  :rlimit-count            159358)
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1079
;  :arith-assert-diseq      22
;  :arith-assert-lower      71
;  :arith-assert-upper      51
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         7
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               191
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              40
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             742
;  :mk-clause               52
;  :num-allocs              4157111
;  :num-checks              204
;  :propagations            37
;  :quant-instantiations    34
;  :rlimit-count            159406)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1083
;  :arith-assert-diseq      22
;  :arith-assert-lower      71
;  :arith-assert-upper      51
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         7
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               192
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              40
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             745
;  :mk-clause               52
;  :num-allocs              4157111
;  :num-checks              205
;  :propagations            37
;  :quant-instantiations    35
;  :rlimit-count            159909)
(push) ; 4
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1083
;  :arith-assert-diseq      22
;  :arith-assert-lower      71
;  :arith-assert-upper      51
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         7
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               193
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              40
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             745
;  :mk-clause               52
;  :num-allocs              4157111
;  :num-checks              206
;  :propagations            37
;  :quant-instantiations    35
;  :rlimit-count            159957)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  diz@5@05))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] i__4 < pos
(pop) ; 4
(push) ; 4
; [eval] !(i__4 < pos)
; [eval] i__4 < pos
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(declare-const $k@42@05 $Perm)
(assert ($Perm.isReadVar $k@42@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@42@05 $Perm.No) (< $Perm.No $k@42@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1086
;  :arith-assert-diseq      23
;  :arith-assert-lower      73
;  :arith-assert-upper      52
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               194
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             750
;  :mk-clause               54
;  :num-allocs              4157111
;  :num-checks              207
;  :propagations            38
;  :quant-instantiations    35
;  :rlimit-count            160309)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@11@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1086
;  :arith-assert-diseq      23
;  :arith-assert-lower      73
;  :arith-assert-upper      52
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               194
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             750
;  :mk-clause               54
;  :num-allocs              4157111
;  :num-checks              208
;  :propagations            38
;  :quant-instantiations    35
;  :rlimit-count            160320)
(assert (< $k@42@05 $k@11@05))
(assert (<= $Perm.No (- $k@11@05 $k@42@05)))
(assert (<= (- $k@11@05 $k@42@05) $Perm.Write))
(assert (implies (< $Perm.No (- $k@11@05 $k@42@05)) (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1086
;  :arith-assert-diseq      23
;  :arith-assert-lower      75
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            8
;  :binary-propagations     16
;  :conflicts               195
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             753
;  :mk-clause               54
;  :num-allocs              4157111
;  :num-checks              209
;  :propagations            38
;  :quant-instantiations    35
;  :rlimit-count            160534)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1086
;  :arith-assert-diseq      23
;  :arith-assert-lower      75
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            8
;  :binary-propagations     16
;  :conflicts               196
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             753
;  :mk-clause               54
;  :num-allocs              4157111
;  :num-checks              210
;  :propagations            38
;  :quant-instantiations    35
;  :rlimit-count            160582)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1086
;  :arith-assert-diseq      23
;  :arith-assert-lower      75
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            8
;  :binary-propagations     16
;  :conflicts               197
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             753
;  :mk-clause               54
;  :num-allocs              4157111
;  :num-checks              211
;  :propagations            38
;  :quant-instantiations    35
;  :rlimit-count            160630)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1086
;  :arith-assert-diseq      23
;  :arith-assert-lower      75
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            8
;  :binary-propagations     16
;  :conflicts               198
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             753
;  :mk-clause               54
;  :num-allocs              4157111
;  :num-checks              212
;  :propagations            38
;  :quant-instantiations    35
;  :rlimit-count            160678)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1086
;  :arith-assert-diseq      23
;  :arith-assert-lower      75
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            8
;  :binary-propagations     16
;  :conflicts               199
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             753
;  :mk-clause               54
;  :num-allocs              4157111
;  :num-checks              213
;  :propagations            38
;  :quant-instantiations    35
;  :rlimit-count            160726)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1086
;  :arith-assert-diseq      23
;  :arith-assert-lower      75
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            8
;  :binary-propagations     16
;  :conflicts               200
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             753
;  :mk-clause               54
;  :num-allocs              4157111
;  :num-checks              214
;  :propagations            38
;  :quant-instantiations    35
;  :rlimit-count            160774)
; [eval] (forall i__7: Int :: { diz.ALU_m.Main_process_state[i__7] } 0 <= i__7 && i__7 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__7] == -1 || 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|)
(declare-const i__7@43@05 Int)
(push) ; 4
; [eval] 0 <= i__7 && i__7 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__7] == -1 || 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__7 && i__7 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__7
(push) ; 5
; [then-branch: 12 | 0 <= i__7@43@05 | live]
; [else-branch: 12 | !(0 <= i__7@43@05) | live]
(push) ; 6
; [then-branch: 12 | 0 <= i__7@43@05]
(assert (<= 0 i__7@43@05))
; [eval] i__7 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1086
;  :arith-assert-diseq      23
;  :arith-assert-lower      76
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            8
;  :binary-propagations     16
;  :conflicts               201
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             754
;  :mk-clause               54
;  :num-allocs              4157111
;  :num-checks              215
;  :propagations            38
;  :quant-instantiations    35
;  :rlimit-count            160875)
(pop) ; 6
(push) ; 6
; [else-branch: 12 | !(0 <= i__7@43@05)]
(assert (not (<= 0 i__7@43@05)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 13 | i__7@43@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i__7@43@05 | live]
; [else-branch: 13 | !(i__7@43@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i__7@43@05) | live]
(push) ; 6
; [then-branch: 13 | i__7@43@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i__7@43@05]
(assert (and
  (<
    i__7@43@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
  (<= 0 i__7@43@05)))
; [eval] diz.ALU_m.Main_process_state[i__7] == -1 || 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__7] == -1
; [eval] diz.ALU_m.Main_process_state[i__7]
(push) ; 7
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1087
;  :arith-assert-diseq      23
;  :arith-assert-lower      77
;  :arith-assert-upper      54
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     16
;  :conflicts               202
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             756
;  :mk-clause               54
;  :num-allocs              4157111
;  :num-checks              216
;  :propagations            38
;  :quant-instantiations    35
;  :rlimit-count            161036)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__7@43@05 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1087
;  :arith-assert-diseq      23
;  :arith-assert-lower      77
;  :arith-assert-upper      54
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     16
;  :conflicts               202
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             756
;  :mk-clause               54
;  :num-allocs              4157111
;  :num-checks              217
;  :propagations            38
;  :quant-instantiations    35
;  :rlimit-count            161045)
; [eval] -1
(push) ; 7
; [then-branch: 14 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__7@43@05] == -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__7@43@05] != -1 | live]
(push) ; 8
; [then-branch: 14 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__7@43@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i__7@43@05)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 14 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__7@43@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
      i__7@43@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__7]
; [eval] diz.ALU_m.Main_process_state[i__7]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1089
;  :arith-assert-diseq      25
;  :arith-assert-lower      80
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     16
;  :conflicts               203
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             763
;  :mk-clause               66
;  :num-allocs              4157111
;  :num-checks              218
;  :propagations            43
;  :quant-instantiations    36
;  :rlimit-count            161332)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__7@43@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1089
;  :arith-assert-diseq      25
;  :arith-assert-lower      80
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     16
;  :conflicts               203
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             763
;  :mk-clause               66
;  :num-allocs              4157111
;  :num-checks              219
;  :propagations            43
;  :quant-instantiations    36
;  :rlimit-count            161341)
(push) ; 9
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__7@43@05] | live]
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__7@43@05]) | live]
(push) ; 10
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__7@43@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i__7@43@05)))
; [eval] diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__7]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1091
;  :arith-assert-diseq      25
;  :arith-assert-lower      82
;  :arith-assert-upper      56
;  :arith-conflicts         2
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         9
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               204
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             767
;  :mk-clause               66
;  :num-allocs              4157111
;  :num-checks              220
;  :propagations            43
;  :quant-instantiations    36
;  :rlimit-count            161527)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__7@43@05 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1091
;  :arith-assert-diseq      25
;  :arith-assert-lower      82
;  :arith-assert-upper      56
;  :arith-conflicts         2
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         9
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               204
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             767
;  :mk-clause               66
;  :num-allocs              4157111
;  :num-checks              221
;  :propagations            43
;  :quant-instantiations    36
;  :rlimit-count            161536)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1091
;  :arith-assert-diseq      25
;  :arith-assert-lower      82
;  :arith-assert-upper      56
;  :arith-conflicts         2
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         9
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               205
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             767
;  :mk-clause               66
;  :num-allocs              4157111
;  :num-checks              222
;  :propagations            43
;  :quant-instantiations    36
;  :rlimit-count            161584)
(pop) ; 10
(push) ; 10
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__7@43@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
      i__7@43@05))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 13 | !(i__7@43@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i__7@43@05)]
(assert (not
  (and
    (<
      i__7@43@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
    (<= 0 i__7@43@05))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__7@43@05 Int)) (!
  (implies
    (and
      (<
        i__7@43@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
      (<= 0 i__7@43@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
          i__7@43@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
            i__7@43@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
            i__7@43@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i__7@43@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1091
;  :arith-assert-diseq      26
;  :arith-assert-lower      83
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         10
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               206
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              74
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             775
;  :mk-clause               78
;  :num-allocs              4157111
;  :num-checks              223
;  :propagations            45
;  :quant-instantiations    37
;  :rlimit-count            162045)
(assert (forall ((i__7@43@05 Int)) (!
  (implies
    (and
      (<
        i__7@43@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
      (<= 0 i__7@43@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
          i__7@43@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
            i__7@43@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
            i__7@43@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i__7@43@05))
  :qid |prog.l<no position>|)))
(declare-const $k@44@05 $Perm)
(assert ($Perm.isReadVar $k@44@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1091
;  :arith-assert-diseq      27
;  :arith-assert-lower      85
;  :arith-assert-upper      58
;  :arith-conflicts         2
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         10
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               207
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              74
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             780
;  :mk-clause               80
;  :num-allocs              4157111
;  :num-checks              224
;  :propagations            46
;  :quant-instantiations    37
;  :rlimit-count            162622)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@44@05 $Perm.No) (< $Perm.No $k@44@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1091
;  :arith-assert-diseq      27
;  :arith-assert-lower      85
;  :arith-assert-upper      58
;  :arith-conflicts         2
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         10
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               208
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              74
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             780
;  :mk-clause               80
;  :num-allocs              4157111
;  :num-checks              225
;  :propagations            46
;  :quant-instantiations    37
;  :rlimit-count            162672)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@13@05 $k@17@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-assert-diseq      27
;  :arith-assert-lower      85
;  :arith-assert-upper      59
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         10
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               209
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             782
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              226
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            162734)
(assert (< $k@44@05 (+ $k@13@05 $k@17@05)))
(assert (<= $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05)))
(assert (<= (- (+ $k@13@05 $k@17@05) $k@44@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      60
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         10
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               210
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             785
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              227
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            162951)
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@05 $k@17@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      61
;  :arith-conflicts         4
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         11
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               211
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             786
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              228
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            163014)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= $t@18@05 $Ref.null))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      61
;  :arith-conflicts         4
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         11
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               211
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             786
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              229
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            163032)
(assert (not (= $t@18@05 $Ref.null)))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      61
;  :arith-conflicts         4
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         11
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               212
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             786
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              230
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            163100)
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@05 $k@17@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      62
;  :arith-conflicts         5
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         12
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               213
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             787
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              231
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            163163)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      62
;  :arith-conflicts         5
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         12
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               214
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             788
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              232
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            163333)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      62
;  :arith-conflicts         5
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         12
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               215
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             788
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              233
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            163381)
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@05 $k@17@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         6
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         13
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               216
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             789
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              234
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            163444)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         6
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         13
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             790
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              235
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            163614)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         6
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         13
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               218
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             790
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              236
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            163662)
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@05 $k@17@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      64
;  :arith-conflicts         7
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               219
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             791
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              237
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            163725)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      64
;  :arith-conflicts         7
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               220
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             792
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              238
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            163895)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      64
;  :arith-conflicts         7
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               221
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             792
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              239
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            163943)
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@05 $k@17@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      65
;  :arith-conflicts         8
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         15
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               222
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             793
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              240
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            164006)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      65
;  :arith-conflicts         8
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         15
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               223
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             794
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              241
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            164176)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      65
;  :arith-conflicts         8
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         15
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               224
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             794
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              242
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            164224)
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@05 $k@17@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      66
;  :arith-conflicts         9
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         16
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               225
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             795
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              243
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            164287)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      66
;  :arith-conflicts         9
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         16
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               226
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             796
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              244
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            164457)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      66
;  :arith-conflicts         9
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         16
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               227
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             796
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              245
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            164505)
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@05 $k@17@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      67
;  :arith-conflicts         10
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         17
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               228
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             797
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              246
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            164568)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      67
;  :arith-conflicts         10
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         17
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               229
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             798
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              247
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            164738)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      67
;  :arith-conflicts         10
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         17
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               230
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             798
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              248
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            164786)
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@05 $k@17@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      68
;  :arith-conflicts         11
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               231
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             799
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              249
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            164849)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      68
;  :arith-conflicts         11
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               232
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             800
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              250
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            165019)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      68
;  :arith-conflicts         11
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               233
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             800
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              251
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            165067)
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@05 $k@17@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      69
;  :arith-conflicts         12
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         19
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               234
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             801
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              252
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            165130)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      87
;  :arith-assert-upper      69
;  :arith-conflicts         12
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         19
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               235
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             802
;  :mk-clause               82
;  :num-allocs              4157111
;  :num-checks              253
;  :propagations            47
;  :quant-instantiations    37
;  :rlimit-count            165300)
(declare-const $k@45@05 $Perm)
(assert ($Perm.isReadVar $k@45@05 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      89
;  :arith-assert-upper      70
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               236
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             806
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              254
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            165496)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@45@05 $Perm.No) (< $Perm.No $k@45@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      89
;  :arith-assert-upper      70
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               237
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             806
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              255
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            165546)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@14@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      89
;  :arith-assert-upper      70
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               237
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             806
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              256
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            165557)
(assert (< $k@45@05 $k@14@05))
(assert (<= $Perm.No (- $k@14@05 $k@45@05)))
(assert (<= (- $k@14@05 $k@45@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@14@05 $k@45@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      91
;  :arith-assert-upper      71
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               238
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              257
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            165777)
(push) ; 4
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      91
;  :arith-assert-upper      71
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               239
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              258
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            165825)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      91
;  :arith-assert-upper      71
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               239
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              259
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            165838)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      91
;  :arith-assert-upper      71
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               240
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              260
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            165886)
(push) ; 4
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      91
;  :arith-assert-upper      71
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               241
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              261
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            165934)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      91
;  :arith-assert-upper      71
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               242
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              262
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            165982)
(push) ; 4
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      91
;  :arith-assert-upper      71
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               243
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              263
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            166030)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      91
;  :arith-assert-upper      71
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               244
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              264
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            166078)
(push) ; 4
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      91
;  :arith-assert-upper      71
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               245
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              265
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            166126)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      91
;  :arith-assert-upper      71
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               246
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              266
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            166174)
(push) ; 4
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      91
;  :arith-assert-upper      71
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               247
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              267
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            166222)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      91
;  :arith-assert-upper      71
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               248
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              268
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            166270)
(push) ; 4
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      28
;  :arith-assert-lower      91
;  :arith-assert-upper      71
;  :arith-conflicts         12
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               249
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4157111
;  :num-checks              269
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            166318)
(declare-const $k@46@05 $Perm)
(assert ($Perm.isReadVar $k@46@05 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      29
;  :arith-assert-lower      93
;  :arith-assert-upper      72
;  :arith-conflicts         12
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               250
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             813
;  :mk-clause               86
;  :num-allocs              4157111
;  :num-checks              270
;  :propagations            49
;  :quant-instantiations    37
;  :rlimit-count            166514)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@46@05 $Perm.No) (< $Perm.No $k@46@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      29
;  :arith-assert-lower      93
;  :arith-assert-upper      72
;  :arith-conflicts         12
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               251
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             813
;  :mk-clause               86
;  :num-allocs              4157111
;  :num-checks              271
;  :propagations            49
;  :quant-instantiations    37
;  :rlimit-count            166564)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@15@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      29
;  :arith-assert-lower      93
;  :arith-assert-upper      72
;  :arith-conflicts         12
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         19
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               251
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             813
;  :mk-clause               86
;  :num-allocs              4157111
;  :num-checks              272
;  :propagations            49
;  :quant-instantiations    37
;  :rlimit-count            166575)
(assert (< $k@46@05 $k@15@05))
(assert (<= $Perm.No (- $k@15@05 $k@46@05)))
(assert (<= (- $k@15@05 $k@46@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@15@05 $k@46@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      29
;  :arith-assert-lower      95
;  :arith-assert-upper      73
;  :arith-conflicts         12
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         19
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               252
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             816
;  :mk-clause               86
;  :num-allocs              4157111
;  :num-checks              273
;  :propagations            49
;  :quant-instantiations    37
;  :rlimit-count            166789)
(push) ; 4
(assert (not (< $Perm.No $k@15@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      29
;  :arith-assert-lower      95
;  :arith-assert-upper      73
;  :arith-conflicts         12
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         19
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               253
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             816
;  :mk-clause               86
;  :num-allocs              4157111
;  :num-checks              274
;  :propagations            49
;  :quant-instantiations    37
;  :rlimit-count            166837)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      29
;  :arith-assert-lower      95
;  :arith-assert-upper      73
;  :arith-conflicts         12
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         19
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               253
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             816
;  :mk-clause               86
;  :num-allocs              4157111
;  :num-checks              275
;  :propagations            49
;  :quant-instantiations    37
;  :rlimit-count            166850)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      29
;  :arith-assert-lower      95
;  :arith-assert-upper      73
;  :arith-conflicts         12
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         19
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               254
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             816
;  :mk-clause               86
;  :num-allocs              4157111
;  :num-checks              276
;  :propagations            49
;  :quant-instantiations    37
;  :rlimit-count            166898)
(push) ; 4
(assert (not (< $Perm.No $k@15@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      29
;  :arith-assert-lower      95
;  :arith-assert-upper      73
;  :arith-conflicts         12
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         19
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               255
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             816
;  :mk-clause               86
;  :num-allocs              4157111
;  :num-checks              277
;  :propagations            49
;  :quant-instantiations    37
;  :rlimit-count            166946)
(declare-const $k@47@05 $Perm)
(assert ($Perm.isReadVar $k@47@05 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      30
;  :arith-assert-lower      97
;  :arith-assert-upper      74
;  :arith-conflicts         12
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         19
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               256
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             820
;  :mk-clause               88
;  :num-allocs              4157111
;  :num-checks              278
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            167143)
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@05 $k@17@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      30
;  :arith-assert-lower      97
;  :arith-assert-upper      75
;  :arith-conflicts         13
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         20
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               257
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             821
;  :mk-clause               88
;  :num-allocs              4157111
;  :num-checks              279
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            167206)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@47@05 $Perm.No) (< $Perm.No $k@47@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      30
;  :arith-assert-lower      97
;  :arith-assert-upper      75
;  :arith-conflicts         13
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         20
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               258
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             821
;  :mk-clause               88
;  :num-allocs              4157111
;  :num-checks              280
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            167256)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      30
;  :arith-assert-lower      97
;  :arith-assert-upper      75
;  :arith-conflicts         13
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         20
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               259
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             822
;  :mk-clause               88
;  :num-allocs              4157111
;  :num-checks              281
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            167426)
(push) ; 4
(assert (not (not (= $k@16@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      30
;  :arith-assert-lower      97
;  :arith-assert-upper      75
;  :arith-conflicts         13
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         20
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               259
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             822
;  :mk-clause               88
;  :num-allocs              4157111
;  :num-checks              282
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            167437)
(assert (< $k@47@05 $k@16@05))
(assert (<= $Perm.No (- $k@16@05 $k@47@05)))
(assert (<= (- $k@16@05 $k@47@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@16@05 $k@47@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      76
;  :arith-conflicts         13
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         20
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               260
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             825
;  :mk-clause               88
;  :num-allocs              4157111
;  :num-checks              283
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            167651)
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@05 $k@17@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         21
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               261
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             826
;  :mk-clause               88
;  :num-allocs              4157111
;  :num-checks              284
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            167714)
(push) ; 4
(assert (not (= diz@5@05 $t@18@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         21
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               261
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             826
;  :mk-clause               88
;  :num-allocs              4157111
;  :num-checks              285
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            167725)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         21
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               262
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             826
;  :mk-clause               88
;  :num-allocs              4157111
;  :num-checks              286
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            167773)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         21
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               263
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             826
;  :mk-clause               88
;  :num-allocs              4157111
;  :num-checks              287
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            167821)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         21
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               264
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             826
;  :mk-clause               88
;  :num-allocs              4157111
;  :num-checks              288
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            167869)
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@05 $k@17@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1092
;  :arith-add-rows          1
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      78
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         22
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               265
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 186
;  :datatype-occurs-check   22
;  :datatype-splits         142
;  :decisions               178
;  :del-clause              76
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             827
;  :mk-clause               88
;  :num-allocs              4157111
;  :num-checks              289
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            167932)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@36@05 $Perm.Write))
(assert ($Perm.isReadVar $k@38@05 $Perm.Write))
(assert ($Perm.isReadVar $k@39@05 $Perm.Write))
(assert ($Perm.isReadVar $k@40@05 $Perm.Write))
(assert ($Perm.isReadVar $k@41@05 $Perm.Write))
(assert (= $t@35@05 ($Snap.combine ($Snap.first $t@35@05) ($Snap.second $t@35@05))))
(assert (<= $Perm.No $k@36@05))
(assert (<= $k@36@05 $Perm.Write))
(assert (implies (< $Perm.No $k@36@05) (not (= diz@5@05 $Ref.null))))
(assert (=
  ($Snap.second $t@35@05)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@35@05))
    ($Snap.second ($Snap.second $t@35@05)))))
(assert (= ($Snap.first ($Snap.second $t@35@05)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@35@05))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@35@05)))
    ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@35@05)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))
  $Snap.unit))
(assert (forall ((i__7@37@05 Int)) (!
  (implies
    (and
      (<
        i__7@37@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
      (<= 0 i__7@37@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
          i__7@37@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__7@37@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__7@37@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__7@37@05))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))
(assert (<= $Perm.No $k@38@05))
(assert (<= $k@38@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@38@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))
  $Snap.unit))
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))
(assert (<= $Perm.No $k@39@05))
(assert (<= $k@39@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@39@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@40@05))
(assert (<= $k@40@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@40@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@41@05))
(assert (<= $k@41@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@41@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  diz@5@05))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] i__4 < pos
(push) ; 5
(assert (not (not (< i__4@34@05 pos@8@05))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1708
;  :arith-add-rows          1
;  :arith-assert-diseq      35
;  :arith-assert-lower      117
;  :arith-assert-upper      95
;  :arith-conflicts         15
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         25
;  :arith-pivots            22
;  :binary-propagations     16
;  :conflicts               266
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 328
;  :datatype-occurs-check   40
;  :datatype-splits         227
;  :decisions               314
;  :del-clause              91
;  :final-checks            23
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1018
;  :mk-clause               104
;  :num-allocs              4318495
;  :num-checks              292
;  :propagations            60
;  :quant-instantiations    47
;  :rlimit-count            176312
;  :time                    0.00)
(push) ; 5
(assert (not (< i__4@34@05 pos@8@05)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1839
;  :arith-add-rows          1
;  :arith-assert-diseq      35
;  :arith-assert-lower      119
;  :arith-assert-upper      96
;  :arith-conflicts         15
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         26
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               266
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1045
;  :mk-clause               105
;  :num-allocs              4318495
;  :num-checks              293
;  :propagations            62
;  :quant-instantiations    47
;  :rlimit-count            177416
;  :time                    0.00)
; [then-branch: 16 | i__4@34@05 < pos@8@05 | live]
; [else-branch: 16 | !(i__4@34@05 < pos@8@05) | live]
(push) ; 5
; [then-branch: 16 | i__4@34@05 < pos@8@05]
(assert (< i__4@34@05 pos@8@05))
; [exec]
; divisor__5 := divisor__5 * 2
; [eval] divisor__5 * 2
(declare-const divisor__5@48@05 Int)
(assert (= divisor__5@48@05 (* divisor__5@32@05 2)))
; [exec]
; __flatten_1__6 := i__4
; [exec]
; i__4 := i__4 + 1
; [eval] i__4 + 1
(declare-const i__4@49@05 Int)
(assert (= i__4@49@05 (+ i__4@34@05 1)))
; Loop head block: Re-establish invariant
(declare-const $k@50@05 $Perm)
(assert ($Perm.isReadVar $k@50@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@50@05 $Perm.No) (< $Perm.No $k@50@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1841
;  :arith-add-rows          1
;  :arith-assert-diseq      36
;  :arith-assert-lower      123
;  :arith-assert-upper      100
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         26
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1056
;  :mk-clause               113
;  :num-allocs              4318495
;  :num-checks              294
;  :propagations            67
;  :quant-instantiations    47
;  :rlimit-count            177856)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@36@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1841
;  :arith-add-rows          1
;  :arith-assert-diseq      36
;  :arith-assert-lower      123
;  :arith-assert-upper      100
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         26
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1056
;  :mk-clause               113
;  :num-allocs              4318495
;  :num-checks              295
;  :propagations            67
;  :quant-instantiations    47
;  :rlimit-count            177867)
(assert (< $k@50@05 $k@36@05))
(assert (<= $Perm.No (- $k@36@05 $k@50@05)))
(assert (<= (- $k@36@05 $k@50@05) $Perm.Write))
(assert (implies (< $Perm.No (- $k@36@05 $k@50@05)) (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1841
;  :arith-add-rows          1
;  :arith-assert-diseq      36
;  :arith-assert-lower      125
;  :arith-assert-upper      101
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         26
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               268
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1059
;  :mk-clause               113
;  :num-allocs              4318495
;  :num-checks              296
;  :propagations            67
;  :quant-instantiations    47
;  :rlimit-count            178075)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1841
;  :arith-add-rows          1
;  :arith-assert-diseq      36
;  :arith-assert-lower      125
;  :arith-assert-upper      101
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         26
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               269
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1059
;  :mk-clause               113
;  :num-allocs              4318495
;  :num-checks              297
;  :propagations            67
;  :quant-instantiations    47
;  :rlimit-count            178123)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1841
;  :arith-add-rows          1
;  :arith-assert-diseq      36
;  :arith-assert-lower      125
;  :arith-assert-upper      101
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         26
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               270
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1059
;  :mk-clause               113
;  :num-allocs              4318495
;  :num-checks              298
;  :propagations            67
;  :quant-instantiations    47
;  :rlimit-count            178171)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1841
;  :arith-add-rows          1
;  :arith-assert-diseq      36
;  :arith-assert-lower      125
;  :arith-assert-upper      101
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         26
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               271
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1059
;  :mk-clause               113
;  :num-allocs              4318495
;  :num-checks              299
;  :propagations            67
;  :quant-instantiations    47
;  :rlimit-count            178219)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1841
;  :arith-add-rows          1
;  :arith-assert-diseq      36
;  :arith-assert-lower      125
;  :arith-assert-upper      101
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         26
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               272
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1059
;  :mk-clause               113
;  :num-allocs              4318495
;  :num-checks              300
;  :propagations            67
;  :quant-instantiations    47
;  :rlimit-count            178267)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1841
;  :arith-add-rows          1
;  :arith-assert-diseq      36
;  :arith-assert-lower      125
;  :arith-assert-upper      101
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         26
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               273
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1059
;  :mk-clause               113
;  :num-allocs              4318495
;  :num-checks              301
;  :propagations            67
;  :quant-instantiations    47
;  :rlimit-count            178315)
; [eval] (forall i__7: Int :: { diz.ALU_m.Main_process_state[i__7] } 0 <= i__7 && i__7 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__7] == -1 || 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|)
(declare-const i__7@51@05 Int)
(push) ; 6
; [eval] 0 <= i__7 && i__7 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__7] == -1 || 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__7 && i__7 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__7
(push) ; 7
; [then-branch: 17 | 0 <= i__7@51@05 | live]
; [else-branch: 17 | !(0 <= i__7@51@05) | live]
(push) ; 8
; [then-branch: 17 | 0 <= i__7@51@05]
(assert (<= 0 i__7@51@05))
; [eval] i__7 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1841
;  :arith-add-rows          1
;  :arith-assert-diseq      36
;  :arith-assert-lower      126
;  :arith-assert-upper      101
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         26
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               274
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1060
;  :mk-clause               113
;  :num-allocs              4318495
;  :num-checks              302
;  :propagations            67
;  :quant-instantiations    47
;  :rlimit-count            178415)
(pop) ; 8
(push) ; 8
; [else-branch: 17 | !(0 <= i__7@51@05)]
(assert (not (<= 0 i__7@51@05)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 18 | i__7@51@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__7@51@05 | live]
; [else-branch: 18 | !(i__7@51@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__7@51@05) | live]
(push) ; 8
; [then-branch: 18 | i__7@51@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__7@51@05]
(assert (and
  (<
    i__7@51@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
  (<= 0 i__7@51@05)))
; [eval] diz.ALU_m.Main_process_state[i__7] == -1 || 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__7] == -1
; [eval] diz.ALU_m.Main_process_state[i__7]
(push) ; 9
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1842
;  :arith-add-rows          1
;  :arith-assert-diseq      36
;  :arith-assert-lower      127
;  :arith-assert-upper      102
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         27
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               275
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1062
;  :mk-clause               113
;  :num-allocs              4318495
;  :num-checks              303
;  :propagations            67
;  :quant-instantiations    47
;  :rlimit-count            178576)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__7@51@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1842
;  :arith-add-rows          1
;  :arith-assert-diseq      36
;  :arith-assert-lower      127
;  :arith-assert-upper      102
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         27
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               275
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1062
;  :mk-clause               113
;  :num-allocs              4318495
;  :num-checks              304
;  :propagations            67
;  :quant-instantiations    47
;  :rlimit-count            178585)
; [eval] -1
(push) ; 9
; [then-branch: 19 | First:(Second:(Second:(Second:($t@35@05))))[i__7@51@05] == -1 | live]
; [else-branch: 19 | First:(Second:(Second:(Second:($t@35@05))))[i__7@51@05] != -1 | live]
(push) ; 10
; [then-branch: 19 | First:(Second:(Second:(Second:($t@35@05))))[i__7@51@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__7@51@05)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 19 | First:(Second:(Second:(Second:($t@35@05))))[i__7@51@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
      i__7@51@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__7]
; [eval] diz.ALU_m.Main_process_state[i__7]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1844
;  :arith-add-rows          1
;  :arith-assert-diseq      38
;  :arith-assert-lower      130
;  :arith-assert-upper      103
;  :arith-conflicts         15
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         27
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               276
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1069
;  :mk-clause               123
;  :num-allocs              4318495
;  :num-checks              305
;  :propagations            72
;  :quant-instantiations    48
;  :rlimit-count            178854)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__7@51@05 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1844
;  :arith-add-rows          1
;  :arith-assert-diseq      38
;  :arith-assert-lower      130
;  :arith-assert-upper      103
;  :arith-conflicts         15
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         27
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               276
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1069
;  :mk-clause               123
;  :num-allocs              4318495
;  :num-checks              306
;  :propagations            72
;  :quant-instantiations    48
;  :rlimit-count            178863)
(push) ; 11
; [then-branch: 20 | 0 <= First:(Second:(Second:(Second:($t@35@05))))[i__7@51@05] | live]
; [else-branch: 20 | !(0 <= First:(Second:(Second:(Second:($t@35@05))))[i__7@51@05]) | live]
(push) ; 12
; [then-branch: 20 | 0 <= First:(Second:(Second:(Second:($t@35@05))))[i__7@51@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__7@51@05)))
; [eval] diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__7]
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      38
;  :arith-assert-lower      132
;  :arith-assert-upper      104
;  :arith-conflicts         15
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         28
;  :arith-pivots            28
;  :binary-propagations     16
;  :conflicts               277
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1073
;  :mk-clause               123
;  :num-allocs              4318495
;  :num-checks              307
;  :propagations            72
;  :quant-instantiations    48
;  :rlimit-count            179037)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__7@51@05 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      38
;  :arith-assert-lower      132
;  :arith-assert-upper      104
;  :arith-conflicts         15
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         28
;  :arith-pivots            28
;  :binary-propagations     16
;  :conflicts               277
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1073
;  :mk-clause               123
;  :num-allocs              4318495
;  :num-checks              308
;  :propagations            72
;  :quant-instantiations    48
;  :rlimit-count            179046)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      38
;  :arith-assert-lower      132
;  :arith-assert-upper      104
;  :arith-conflicts         15
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         28
;  :arith-pivots            28
;  :binary-propagations     16
;  :conflicts               278
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              92
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1073
;  :mk-clause               123
;  :num-allocs              4318495
;  :num-checks              309
;  :propagations            72
;  :quant-instantiations    48
;  :rlimit-count            179094)
(pop) ; 12
(push) ; 12
; [else-branch: 20 | !(0 <= First:(Second:(Second:(Second:($t@35@05))))[i__7@51@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
      i__7@51@05))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 18 | !(i__7@51@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__7@51@05)]
(assert (not
  (and
    (<
      i__7@51@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
    (<= 0 i__7@51@05))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((i__7@51@05 Int)) (!
  (implies
    (and
      (<
        i__7@51@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
      (<= 0 i__7@51@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
          i__7@51@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__7@51@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__7@51@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__7@51@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      40
;  :arith-assert-lower      133
;  :arith-assert-upper      105
;  :arith-conflicts         15
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         29
;  :arith-pivots            29
;  :binary-propagations     16
;  :conflicts               279
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1081
;  :mk-clause               137
;  :num-allocs              4318495
;  :num-checks              310
;  :propagations            74
;  :quant-instantiations    49
;  :rlimit-count            179543)
(assert (forall ((i__7@51@05 Int)) (!
  (implies
    (and
      (<
        i__7@51@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
      (<= 0 i__7@51@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
          i__7@51@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__7@51@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__7@51@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__7@51@05))
  :qid |prog.l<no position>|)))
(declare-const $k@52@05 $Perm)
(assert ($Perm.isReadVar $k@52@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      135
;  :arith-assert-upper      106
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            29
;  :binary-propagations     16
;  :conflicts               280
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1086
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              311
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180102)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@52@05 $Perm.No) (< $Perm.No $k@52@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      135
;  :arith-assert-upper      106
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            29
;  :binary-propagations     16
;  :conflicts               281
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1086
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              312
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180152)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@38@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      135
;  :arith-assert-upper      106
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            29
;  :binary-propagations     16
;  :conflicts               281
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1086
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              313
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180163)
(assert (< $k@52@05 $k@38@05))
(assert (<= $Perm.No (- $k@38@05 $k@52@05)))
(assert (<= (- $k@38@05 $k@52@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@38@05 $k@52@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               282
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              314
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180377)
(push) ; 6
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               283
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              315
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180425)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               284
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              316
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180473)
(push) ; 6
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               285
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              317
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180521)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               286
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              318
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180569)
(push) ; 6
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               287
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              319
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180617)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               288
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              320
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180665)
(push) ; 6
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               289
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              321
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180713)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               290
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              322
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180761)
(push) ; 6
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               291
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              323
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180809)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               292
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              324
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180857)
(push) ; 6
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               293
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              325
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180905)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               294
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              326
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            180953)
(push) ; 6
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               295
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              327
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            181001)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               296
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              328
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            181049)
(push) ; 6
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               297
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              329
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            181097)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               298
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              330
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            181145)
(push) ; 6
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      107
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               299
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1089
;  :mk-clause               139
;  :num-allocs              4318495
;  :num-checks              331
;  :propagations            75
;  :quant-instantiations    49
;  :rlimit-count            181193)
(declare-const $k@53@05 $Perm)
(assert ($Perm.isReadVar $k@53@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      139
;  :arith-assert-upper      108
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               300
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1093
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              332
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            181390)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@53@05 $Perm.No) (< $Perm.No $k@53@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      139
;  :arith-assert-upper      108
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               301
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1093
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              333
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            181440)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@39@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      139
;  :arith-assert-upper      108
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               301
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1093
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              334
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            181451)
(assert (< $k@53@05 $k@39@05))
(assert (<= $Perm.No (- $k@39@05 $k@53@05)))
(assert (<= (- $k@39@05 $k@53@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@39@05 $k@53@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      141
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               302
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1096
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              335
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            181659)
(push) ; 6
(assert (not (< $Perm.No $k@39@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      141
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               303
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1096
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              336
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            181707)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      141
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               303
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1096
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              337
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            181720)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      141
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               304
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1096
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              338
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            181768)
(push) ; 6
(assert (not (< $Perm.No $k@39@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      141
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               305
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1096
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              339
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            181816)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      141
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               306
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1096
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              340
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            181864)
(push) ; 6
(assert (not (< $Perm.No $k@39@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      141
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               307
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1096
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              341
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            181912)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      141
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               308
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1096
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              342
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            181960
;  :time                    0.00)
(push) ; 6
(assert (not (< $Perm.No $k@39@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      141
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               309
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1096
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              343
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            182008)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      141
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               310
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1096
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              344
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            182056)
(push) ; 6
(assert (not (< $Perm.No $k@39@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      141
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               311
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1096
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              345
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            182104)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      141
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               312
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1096
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              346
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            182152)
(push) ; 6
(assert (not (< $Perm.No $k@39@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      42
;  :arith-assert-lower      141
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               313
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1096
;  :mk-clause               141
;  :num-allocs              4318495
;  :num-checks              347
;  :propagations            76
;  :quant-instantiations    49
;  :rlimit-count            182200)
(declare-const $k@54@05 $Perm)
(assert ($Perm.isReadVar $k@54@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      43
;  :arith-assert-lower      143
;  :arith-assert-upper      110
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               314
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1100
;  :mk-clause               143
;  :num-allocs              4318495
;  :num-checks              348
;  :propagations            77
;  :quant-instantiations    49
;  :rlimit-count            182396)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@54@05 $Perm.No) (< $Perm.No $k@54@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      43
;  :arith-assert-lower      143
;  :arith-assert-upper      110
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               315
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1100
;  :mk-clause               143
;  :num-allocs              4318495
;  :num-checks              349
;  :propagations            77
;  :quant-instantiations    49
;  :rlimit-count            182446)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@40@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      43
;  :arith-assert-lower      143
;  :arith-assert-upper      110
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         29
;  :arith-pivots            30
;  :binary-propagations     16
;  :conflicts               315
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1100
;  :mk-clause               143
;  :num-allocs              4318495
;  :num-checks              350
;  :propagations            77
;  :quant-instantiations    49
;  :rlimit-count            182457)
(assert (< $k@54@05 $k@40@05))
(assert (<= $Perm.No (- $k@40@05 $k@54@05)))
(assert (<= (- $k@40@05 $k@54@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@40@05 $k@54@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      43
;  :arith-assert-lower      145
;  :arith-assert-upper      111
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         29
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               316
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1103
;  :mk-clause               143
;  :num-allocs              4318495
;  :num-checks              351
;  :propagations            77
;  :quant-instantiations    49
;  :rlimit-count            182677)
(push) ; 6
(assert (not (< $Perm.No $k@40@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      43
;  :arith-assert-lower      145
;  :arith-assert-upper      111
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         29
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               317
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1103
;  :mk-clause               143
;  :num-allocs              4318495
;  :num-checks              352
;  :propagations            77
;  :quant-instantiations    49
;  :rlimit-count            182725)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      43
;  :arith-assert-lower      145
;  :arith-assert-upper      111
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         29
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               317
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1103
;  :mk-clause               143
;  :num-allocs              4318495
;  :num-checks              353
;  :propagations            77
;  :quant-instantiations    49
;  :rlimit-count            182738)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      43
;  :arith-assert-lower      145
;  :arith-assert-upper      111
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         29
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               318
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1103
;  :mk-clause               143
;  :num-allocs              4318495
;  :num-checks              354
;  :propagations            77
;  :quant-instantiations    49
;  :rlimit-count            182786)
(push) ; 6
(assert (not (< $Perm.No $k@40@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      43
;  :arith-assert-lower      145
;  :arith-assert-upper      111
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         29
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               319
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1103
;  :mk-clause               143
;  :num-allocs              4318495
;  :num-checks              355
;  :propagations            77
;  :quant-instantiations    49
;  :rlimit-count            182834)
(declare-const $k@55@05 $Perm)
(assert ($Perm.isReadVar $k@55@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      147
;  :arith-assert-upper      112
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         29
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               320
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1107
;  :mk-clause               145
;  :num-allocs              4318495
;  :num-checks              356
;  :propagations            78
;  :quant-instantiations    49
;  :rlimit-count            183030)
(push) ; 6
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      147
;  :arith-assert-upper      112
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         29
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               321
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1107
;  :mk-clause               145
;  :num-allocs              4318495
;  :num-checks              357
;  :propagations            78
;  :quant-instantiations    49
;  :rlimit-count            183078)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@55@05 $Perm.No) (< $Perm.No $k@55@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      147
;  :arith-assert-upper      112
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         29
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               322
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1107
;  :mk-clause               145
;  :num-allocs              4318495
;  :num-checks              358
;  :propagations            78
;  :quant-instantiations    49
;  :rlimit-count            183128)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@41@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      147
;  :arith-assert-upper      112
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         29
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               322
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1107
;  :mk-clause               145
;  :num-allocs              4318495
;  :num-checks              359
;  :propagations            78
;  :quant-instantiations    49
;  :rlimit-count            183139)
(assert (< $k@55@05 $k@41@05))
(assert (<= $Perm.No (- $k@41@05 $k@55@05)))
(assert (<= (- $k@41@05 $k@55@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@41@05 $k@55@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      149
;  :arith-assert-upper      113
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     16
;  :conflicts               323
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1110
;  :mk-clause               145
;  :num-allocs              4318495
;  :num-checks              360
;  :propagations            78
;  :quant-instantiations    49
;  :rlimit-count            183382)
(push) ; 6
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      149
;  :arith-assert-upper      113
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     16
;  :conflicts               324
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1110
;  :mk-clause               145
;  :num-allocs              4318495
;  :num-checks              361
;  :propagations            78
;  :quant-instantiations    49
;  :rlimit-count            183430)
(push) ; 6
(assert (not (< $Perm.No $k@41@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      149
;  :arith-assert-upper      113
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     16
;  :conflicts               325
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1110
;  :mk-clause               145
;  :num-allocs              4318495
;  :num-checks              362
;  :propagations            78
;  :quant-instantiations    49
;  :rlimit-count            183478)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      149
;  :arith-assert-upper      113
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     16
;  :conflicts               326
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1110
;  :mk-clause               145
;  :num-allocs              4318495
;  :num-checks              363
;  :propagations            78
;  :quant-instantiations    49
;  :rlimit-count            183526)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      149
;  :arith-assert-upper      113
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     16
;  :conflicts               327
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1110
;  :mk-clause               145
;  :num-allocs              4318495
;  :num-checks              364
;  :propagations            78
;  :quant-instantiations    49
;  :rlimit-count            183574)
(push) ; 6
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      149
;  :arith-assert-upper      113
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     16
;  :conflicts               328
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1110
;  :mk-clause               145
;  :num-allocs              4318495
;  :num-checks              365
;  :propagations            78
;  :quant-instantiations    49
;  :rlimit-count            183622)
(pop) ; 5
(push) ; 5
; [else-branch: 16 | !(i__4@34@05 < pos@8@05)]
(assert (not (< i__4@34@05 pos@8@05)))
(pop) ; 5
(push) ; 5
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1846
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      149
;  :arith-assert-upper      113
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         29
;  :arith-pivots            40
;  :binary-propagations     16
;  :conflicts               329
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 369
;  :datatype-occurs-check   46
;  :datatype-splits         249
;  :decisions               353
;  :del-clause              132
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1111
;  :mk-clause               145
;  :num-allocs              4318495
;  :num-checks              366
;  :propagations            78
;  :quant-instantiations    49
;  :rlimit-count            183824)
(declare-const $t@56@05 $Ref)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2013
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      151
;  :arith-assert-upper      115
;  :arith-conflicts         15
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         31
;  :arith-pivots            44
;  :binary-propagations     16
;  :conflicts               330
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 431
;  :datatype-occurs-check   54
;  :datatype-splits         292
;  :decisions               411
;  :del-clause              135
;  :final-checks            30
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1165
;  :mk-clause               148
;  :num-allocs              4318495
;  :num-checks              367
;  :propagations            80
;  :quant-instantiations    49
;  :rlimit-count            185236
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2180
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      153
;  :arith-assert-upper      117
;  :arith-conflicts         15
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         33
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               331
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 493
;  :datatype-occurs-check   62
;  :datatype-splits         335
;  :decisions               469
;  :del-clause              138
;  :final-checks            34
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1219
;  :mk-clause               151
;  :num-allocs              4318495
;  :num-checks              368
;  :propagations            82
;  :quant-instantiations    49
;  :rlimit-count            186648
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2347
;  :arith-add-rows          1
;  :arith-assert-diseq      44
;  :arith-assert-lower      155
;  :arith-assert-upper      119
;  :arith-conflicts         15
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         35
;  :arith-pivots            52
;  :binary-propagations     16
;  :conflicts               332
;  :datatype-accessor-ax    153
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   70
;  :datatype-splits         378
;  :decisions               527
;  :del-clause              141
;  :final-checks            38
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1273
;  :mk-clause               154
;  :num-allocs              4318495
;  :num-checks              369
;  :propagations            84
;  :quant-instantiations    49
;  :rlimit-count            188060
;  :time                    0.00)
(declare-const $t@57@05 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@36@05)
    (= $t@56@05 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05))))
  (implies
    (< $Perm.No (- $k@16@05 $k@47@05))
    (=
      $t@56@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))))))
(assert (and
  (implies (< $Perm.No (+ $k@36@05 (- $k@16@05 $k@47@05))) (= $t@57@05 $t@56@05))
  (implies
    (< $Perm.No (- $k@11@05 $k@42@05))
    (=
      $t@57@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))))))
(assert (<= $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05))))
(assert (<= (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))
  (not (= diz@5@05 $Ref.null))))
(assert (<= $Perm.No (+ $k@36@05 (- $k@16@05 $k@47@05))))
(assert (<= (+ $k@36@05 (- $k@16@05 $k@47@05)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@36@05 (- $k@16@05 $k@47@05)))
  (not (= diz@5@05 $Ref.null))))
; [eval] !(i__4 < pos)
; [eval] i__4 < pos
(push) ; 5
(assert (not (< i__4@34@05 pos@8@05)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2479
;  :arith-add-rows          5
;  :arith-assert-diseq      44
;  :arith-assert-lower      159
;  :arith-assert-upper      122
;  :arith-conflicts         15
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         36
;  :arith-pivots            57
;  :binary-propagations     16
;  :conflicts               332
;  :datatype-accessor-ax    155
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   76
;  :datatype-splits         399
;  :decisions               565
;  :del-clause              142
;  :final-checks            41
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1306
;  :mk-clause               155
;  :num-allocs              4318495
;  :num-checks              370
;  :propagations            86
;  :quant-instantiations    49
;  :rlimit-count            189655
;  :time                    0.00)
(push) ; 5
(assert (not (not (< i__4@34@05 pos@8@05))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2606
;  :arith-add-rows          5
;  :arith-assert-diseq      44
;  :arith-assert-lower      160
;  :arith-assert-upper      124
;  :arith-conflicts         15
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         37
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               332
;  :datatype-accessor-ax    157
;  :datatype-constructor-ax 635
;  :datatype-occurs-check   82
;  :datatype-splits         420
;  :decisions               603
;  :del-clause              143
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1332
;  :mk-clause               156
;  :num-allocs              4318495
;  :num-checks              371
;  :propagations            88
;  :quant-instantiations    49
;  :rlimit-count            190779
;  :time                    0.00)
; [then-branch: 21 | !(i__4@34@05 < pos@8@05) | live]
; [else-branch: 21 | i__4@34@05 < pos@8@05 | live]
(push) ; 5
; [then-branch: 21 | !(i__4@34@05 < pos@8@05)]
(assert (not (< i__4@34@05 pos@8@05)))
; [eval] divisor__5 != 0
(push) ; 6
(assert (not (= divisor__5@32@05 0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2733
;  :arith-add-rows          5
;  :arith-assert-diseq      44
;  :arith-assert-lower      162
;  :arith-assert-upper      125
;  :arith-conflicts         15
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         38
;  :arith-pivots            63
;  :binary-propagations     16
;  :conflicts               332
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 675
;  :datatype-occurs-check   88
;  :datatype-splits         441
;  :decisions               641
;  :del-clause              144
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1359
;  :mk-clause               157
;  :num-allocs              4318495
;  :num-checks              372
;  :propagations            90
;  :quant-instantiations    49
;  :rlimit-count            191937
;  :time                    0.00)
(push) ; 6
(assert (not (not (= divisor__5@32@05 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2861
;  :arith-add-rows          5
;  :arith-assert-diseq      44
;  :arith-assert-lower      163
;  :arith-assert-upper      126
;  :arith-conflicts         15
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         39
;  :arith-pivots            65
;  :binary-propagations     16
;  :conflicts               332
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              145
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1385
;  :mk-clause               158
;  :num-allocs              4318495
;  :num-checks              373
;  :propagations            92
;  :quant-instantiations    49
;  :rlimit-count            193001
;  :time                    0.00)
; [then-branch: 22 | divisor__5@32@05 != 0 | live]
; [else-branch: 22 | divisor__5@32@05 == 0 | live]
(push) ; 6
; [then-branch: 22 | divisor__5@32@05 != 0]
(assert (not (= divisor__5@32@05 0)))
; [exec]
; sys__local__result__3 := value / divisor__5 % 2
; [eval] value / divisor__5 % 2
; [eval] value / divisor__5
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2861
;  :arith-add-rows          5
;  :arith-assert-diseq      44
;  :arith-assert-lower      163
;  :arith-assert-upper      126
;  :arith-conflicts         15
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         39
;  :arith-pivots            65
;  :binary-propagations     16
;  :conflicts               332
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              145
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1386
;  :mk-clause               158
;  :num-allocs              4318495
;  :num-checks              374
;  :propagations            92
;  :quant-instantiations    49
;  :rlimit-count            193074)
(declare-const sys__local__result__3@58@05 Int)
(assert (= sys__local__result__3@58@05 (mod (div value@7@05 divisor__5@32@05) 2)))
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && (true && (true && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__8: Int :: { diz.ALU_m.Main_process_state[i__8] } 0 <= i__8 && i__8 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__8] == -1 || 0 <= diz.ALU_m.Main_process_state[i__8] && diz.ALU_m.Main_process_state[i__8] < |diz.ALU_m.Main_event_state|)) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && 0 <= diz.ALU_m.Main_alu.ALU_RESULT && diz.ALU_m.Main_alu.ALU_RESULT <= 16 && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_init, 1 / 2) && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_mon.Monitor_init, 1 / 2) && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu == diz && (0 <= sys__local__result__3 && sys__local__result__3 < 16)
(declare-const $k@59@05 $Perm)
(assert ($Perm.isReadVar $k@59@05 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@59@05 $Perm.No) (< $Perm.No $k@59@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2877
;  :arith-add-rows          8
;  :arith-assert-diseq      46
;  :arith-assert-lower      171
;  :arith-assert-upper      131
;  :arith-conflicts         15
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               333
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              145
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1410
;  :mk-clause               172
;  :num-allocs              4318495
;  :num-checks              375
;  :propagations            97
;  :quant-instantiations    49
;  :rlimit-count            193544)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2878
;  :arith-add-rows          8
;  :arith-assert-diseq      46
;  :arith-assert-lower      171
;  :arith-assert-upper      132
;  :arith-conflicts         16
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               334
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1412
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              376
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            193645)
(assert (< $k@59@05 (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05))))
(assert (<=
  $Perm.No
  (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@59@05)))
(assert (<=
  (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@59@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@59@05))
  (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2878
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      173
;  :arith-assert-upper      134
;  :arith-conflicts         17
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               335
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1416
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              377
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            193956)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= $t@57@05 $Ref.null))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2879
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      173
;  :arith-assert-upper      134
;  :arith-conflicts         17
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               336
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1417
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              378
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            194004)
(assert (not (= $t@57@05 $Ref.null)))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2880
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      173
;  :arith-assert-upper      135
;  :arith-conflicts         18
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         43
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               337
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1419
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              379
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            194162)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2880
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      173
;  :arith-assert-upper      135
;  :arith-conflicts         18
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         43
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               338
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1420
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              380
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            194242)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2880
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      173
;  :arith-assert-upper      136
;  :arith-conflicts         19
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               339
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1421
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              381
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            194344)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2880
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      173
;  :arith-assert-upper      136
;  :arith-conflicts         19
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               340
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1422
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              382
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            194424)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2880
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      173
;  :arith-assert-upper      137
;  :arith-conflicts         20
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         45
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               341
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1423
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              383
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            194526)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2880
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      173
;  :arith-assert-upper      137
;  :arith-conflicts         20
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         45
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               342
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1424
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              384
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            194606)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2880
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      173
;  :arith-assert-upper      138
;  :arith-conflicts         21
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         46
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               343
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1425
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              385
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            194708)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2880
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      173
;  :arith-assert-upper      138
;  :arith-conflicts         21
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         46
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               344
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1426
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              386
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            194788)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2880
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      173
;  :arith-assert-upper      139
;  :arith-conflicts         22
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         47
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               345
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1427
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              387
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            194890)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2880
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      173
;  :arith-assert-upper      139
;  :arith-conflicts         22
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         47
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               346
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1428
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              388
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            194970)
; [eval] (forall i__8: Int :: { diz.ALU_m.Main_process_state[i__8] } 0 <= i__8 && i__8 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__8] == -1 || 0 <= diz.ALU_m.Main_process_state[i__8] && diz.ALU_m.Main_process_state[i__8] < |diz.ALU_m.Main_event_state|)
(declare-const i__8@60@05 Int)
(push) ; 7
; [eval] 0 <= i__8 && i__8 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__8] == -1 || 0 <= diz.ALU_m.Main_process_state[i__8] && diz.ALU_m.Main_process_state[i__8] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__8 && i__8 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__8
(push) ; 8
; [then-branch: 23 | 0 <= i__8@60@05 | live]
; [else-branch: 23 | !(0 <= i__8@60@05) | live]
(push) ; 9
; [then-branch: 23 | 0 <= i__8@60@05]
(assert (<= 0 i__8@60@05))
; [eval] i__8 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2880
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      174
;  :arith-assert-upper      140
;  :arith-conflicts         23
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         48
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1430
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              389
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            195125)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2880
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      174
;  :arith-assert-upper      140
;  :arith-conflicts         23
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         48
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               348
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1431
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              390
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            195205)
(pop) ; 9
(push) ; 9
; [else-branch: 23 | !(0 <= i__8@60@05)]
(assert (not (<= 0 i__8@60@05)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 24 | i__8@60@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__8@60@05 | live]
; [else-branch: 24 | !(i__8@60@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__8@60@05) | live]
(push) ; 9
; [then-branch: 24 | i__8@60@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__8@60@05]
(assert (and
  (<
    i__8@60@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
  (<= 0 i__8@60@05)))
; [eval] diz.ALU_m.Main_process_state[i__8] == -1 || 0 <= diz.ALU_m.Main_process_state[i__8] && diz.ALU_m.Main_process_state[i__8] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__8] == -1
; [eval] diz.ALU_m.Main_process_state[i__8]
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2881
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      175
;  :arith-assert-upper      142
;  :arith-conflicts         24
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         50
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               349
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1434
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              391
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            195420)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2881
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      175
;  :arith-assert-upper      142
;  :arith-conflicts         24
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         50
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               350
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1435
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              392
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            195500)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__8@60@05 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2881
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      175
;  :arith-assert-upper      142
;  :arith-conflicts         24
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         50
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               350
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1435
;  :mk-clause               174
;  :num-allocs              4318495
;  :num-checks              393
;  :propagations            98
;  :quant-instantiations    49
;  :rlimit-count            195509)
; [eval] -1
(push) ; 10
; [then-branch: 25 | First:(Second:(Second:(Second:($t@35@05))))[i__8@60@05] == -1 | live]
; [else-branch: 25 | First:(Second:(Second:(Second:($t@35@05))))[i__8@60@05] != -1 | live]
(push) ; 11
; [then-branch: 25 | First:(Second:(Second:(Second:($t@35@05))))[i__8@60@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__8@60@05)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 25 | First:(Second:(Second:(Second:($t@35@05))))[i__8@60@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
      i__8@60@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__8] && diz.ALU_m.Main_process_state[i__8] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__8]
; [eval] diz.ALU_m.Main_process_state[i__8]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2883
;  :arith-add-rows          11
;  :arith-assert-diseq      48
;  :arith-assert-lower      178
;  :arith-assert-upper      144
;  :arith-conflicts         25
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         51
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               351
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1443
;  :mk-clause               184
;  :num-allocs              4318495
;  :num-checks              394
;  :propagations            103
;  :quant-instantiations    50
;  :rlimit-count            195818)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2883
;  :arith-add-rows          11
;  :arith-assert-diseq      48
;  :arith-assert-lower      178
;  :arith-assert-upper      144
;  :arith-conflicts         25
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         51
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               352
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1444
;  :mk-clause               184
;  :num-allocs              4318495
;  :num-checks              395
;  :propagations            103
;  :quant-instantiations    50
;  :rlimit-count            195898)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__8@60@05 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2883
;  :arith-add-rows          11
;  :arith-assert-diseq      48
;  :arith-assert-lower      178
;  :arith-assert-upper      144
;  :arith-conflicts         25
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         51
;  :arith-offset-eqs        1
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               352
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1444
;  :mk-clause               184
;  :num-allocs              4318495
;  :num-checks              396
;  :propagations            103
;  :quant-instantiations    50
;  :rlimit-count            195907)
(push) ; 12
; [then-branch: 26 | 0 <= First:(Second:(Second:(Second:($t@35@05))))[i__8@60@05] | live]
; [else-branch: 26 | !(0 <= First:(Second:(Second:(Second:($t@35@05))))[i__8@60@05]) | live]
(push) ; 13
; [then-branch: 26 | 0 <= First:(Second:(Second:(Second:($t@35@05))))[i__8@60@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__8@60@05)))
; [eval] diz.ALU_m.Main_process_state[i__8] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__8]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          11
;  :arith-assert-diseq      48
;  :arith-assert-lower      180
;  :arith-assert-upper      146
;  :arith-conflicts         26
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         53
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               353
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1449
;  :mk-clause               184
;  :num-allocs              4318495
;  :num-checks              397
;  :propagations            103
;  :quant-instantiations    50
;  :rlimit-count            196137)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          11
;  :arith-assert-diseq      48
;  :arith-assert-lower      180
;  :arith-assert-upper      146
;  :arith-conflicts         26
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         53
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               354
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1450
;  :mk-clause               184
;  :num-allocs              4318495
;  :num-checks              398
;  :propagations            103
;  :quant-instantiations    50
;  :rlimit-count            196217)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__8@60@05 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          11
;  :arith-assert-diseq      48
;  :arith-assert-lower      180
;  :arith-assert-upper      146
;  :arith-conflicts         26
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         53
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               354
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1450
;  :mk-clause               184
;  :num-allocs              4318495
;  :num-checks              399
;  :propagations            103
;  :quant-instantiations    50
;  :rlimit-count            196226)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          11
;  :arith-assert-diseq      48
;  :arith-assert-lower      180
;  :arith-assert-upper      147
;  :arith-conflicts         27
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         54
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               355
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1451
;  :mk-clause               184
;  :num-allocs              4318495
;  :num-checks              400
;  :propagations            103
;  :quant-instantiations    50
;  :rlimit-count            196328)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          11
;  :arith-assert-diseq      48
;  :arith-assert-lower      180
;  :arith-assert-upper      147
;  :arith-conflicts         27
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         54
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               356
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              147
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1452
;  :mk-clause               184
;  :num-allocs              4318495
;  :num-checks              401
;  :propagations            103
;  :quant-instantiations    50
;  :rlimit-count            196408)
(pop) ; 13
(push) ; 13
; [else-branch: 26 | !(0 <= First:(Second:(Second:(Second:($t@35@05))))[i__8@60@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
      i__8@60@05))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 24 | !(i__8@60@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__8@60@05)]
(assert (not
  (and
    (<
      i__8@60@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
    (<= 0 i__8@60@05))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__8@60@05 Int)) (!
  (implies
    (and
      (<
        i__8@60@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
      (<= 0 i__8@60@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
          i__8@60@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__8@60@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__8@60@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__8@60@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          11
;  :arith-assert-diseq      50
;  :arith-assert-lower      181
;  :arith-assert-upper      148
;  :arith-conflicts         27
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         55
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               357
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1460
;  :mk-clause               198
;  :num-allocs              4318495
;  :num-checks              402
;  :propagations            105
;  :quant-instantiations    51
;  :rlimit-count            196857)
(assert (forall ((i__8@60@05 Int)) (!
  (implies
    (and
      (<
        i__8@60@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
      (<= 0 i__8@60@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
          i__8@60@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__8@60@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__8@60@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__8@60@05))
  :qid |prog.l<no position>|)))
(declare-const $k@61@05 $Perm)
(assert ($Perm.isReadVar $k@61@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          11
;  :arith-assert-diseq      51
;  :arith-assert-lower      183
;  :arith-assert-upper      150
;  :arith-conflicts         28
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         56
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               358
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1466
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              403
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            197470)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@61@05 $Perm.No) (< $Perm.No $k@61@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          11
;  :arith-assert-diseq      51
;  :arith-assert-lower      183
;  :arith-assert-upper      150
;  :arith-conflicts         28
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         56
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1466
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              404
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            197520)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          11
;  :arith-assert-diseq      51
;  :arith-assert-lower      183
;  :arith-assert-upper      150
;  :arith-conflicts         28
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         56
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1466
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              405
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            197531)
(push) ; 7
(assert (not (not (= (- (+ $k@13@05 $k@17@05) $k@44@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          11
;  :arith-assert-diseq      51
;  :arith-assert-lower      183
;  :arith-assert-upper      150
;  :arith-conflicts         28
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         56
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               360
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1467
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              406
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            197605)
(assert (< $k@61@05 (- (+ $k@13@05 $k@17@05) $k@44@05)))
(assert (<= $Perm.No (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@61@05)))
(assert (<= (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@61@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@61@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      152
;  :arith-conflicts         29
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         57
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               361
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1471
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              407
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            197898)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      152
;  :arith-conflicts         29
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         57
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               361
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1471
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              408
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            197909)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      152
;  :arith-conflicts         29
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         57
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               361
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1471
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              409
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            197930)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      153
;  :arith-conflicts         30
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         58
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               362
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1472
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              410
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198032)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      153
;  :arith-conflicts         30
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         58
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               362
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1472
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              411
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198043)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      153
;  :arith-conflicts         30
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         58
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               362
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1472
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              412
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198064)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      153
;  :arith-conflicts         30
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         58
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               362
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1472
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              413
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198075)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      154
;  :arith-conflicts         31
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               363
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1473
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              414
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198177)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      154
;  :arith-conflicts         31
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               363
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1473
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              415
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198188)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      154
;  :arith-conflicts         31
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               363
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1473
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              416
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198209)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      154
;  :arith-conflicts         31
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               363
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1473
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              417
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198220)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      155
;  :arith-conflicts         32
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         60
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               364
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1474
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              418
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198322)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      155
;  :arith-conflicts         32
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         60
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               364
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1474
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              419
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198333)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      155
;  :arith-conflicts         32
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         60
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               364
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1474
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              420
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198354)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      155
;  :arith-conflicts         32
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         60
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               364
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1474
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              421
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198365)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      156
;  :arith-conflicts         33
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         61
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               365
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1475
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              422
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198467)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      156
;  :arith-conflicts         33
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         61
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               365
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1475
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              423
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198478)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      156
;  :arith-conflicts         33
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         61
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               365
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1475
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              424
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198499)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      156
;  :arith-conflicts         33
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         61
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               365
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1475
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              425
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198510)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      157
;  :arith-conflicts         34
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               366
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1476
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              426
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198612)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      157
;  :arith-conflicts         34
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               366
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1476
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              427
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198623)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      157
;  :arith-conflicts         34
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               366
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1476
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              428
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198644)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      157
;  :arith-conflicts         34
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               366
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1476
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              429
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198655)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      158
;  :arith-conflicts         35
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               367
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1477
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              430
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198757)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      158
;  :arith-conflicts         35
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               367
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1477
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              431
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198768)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      158
;  :arith-conflicts         35
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               367
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1477
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              432
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198789)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      158
;  :arith-conflicts         35
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               367
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1477
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              433
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198800)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      159
;  :arith-conflicts         36
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         64
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               368
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1478
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              434
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198902)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      159
;  :arith-conflicts         36
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         64
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               368
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1478
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              435
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198913)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      159
;  :arith-conflicts         36
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         64
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               368
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1478
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              436
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198934)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      159
;  :arith-conflicts         36
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         64
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               368
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1478
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              437
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            198945)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      160
;  :arith-conflicts         37
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         65
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               369
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1479
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              438
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            199047)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      160
;  :arith-conflicts         37
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         65
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               369
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1479
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              439
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            199058)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      160
;  :arith-conflicts         37
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         65
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               369
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1479
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              440
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            199079)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      185
;  :arith-assert-upper      160
;  :arith-conflicts         37
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         65
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               369
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1479
;  :mk-clause               200
;  :num-allocs              4318495
;  :num-checks              441
;  :propagations            106
;  :quant-instantiations    51
;  :rlimit-count            199090)
(declare-const $k@62@05 $Perm)
(assert ($Perm.isReadVar $k@62@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      187
;  :arith-assert-upper      162
;  :arith-conflicts         38
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               370
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1484
;  :mk-clause               202
;  :num-allocs              4318495
;  :num-checks              442
;  :propagations            107
;  :quant-instantiations    51
;  :rlimit-count            199340)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@62@05 $Perm.No) (< $Perm.No $k@62@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      187
;  :arith-assert-upper      162
;  :arith-conflicts         38
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               371
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1484
;  :mk-clause               202
;  :num-allocs              4318495
;  :num-checks              443
;  :propagations            107
;  :quant-instantiations    51
;  :rlimit-count            199390)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      187
;  :arith-assert-upper      162
;  :arith-conflicts         38
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               371
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1484
;  :mk-clause               202
;  :num-allocs              4318495
;  :num-checks              444
;  :propagations            107
;  :quant-instantiations    51
;  :rlimit-count            199401)
(push) ; 7
(assert (not (not (= (- $k@14@05 $k@45@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      187
;  :arith-assert-upper      162
;  :arith-conflicts         38
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        1
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               372
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1485
;  :mk-clause               202
;  :num-allocs              4318495
;  :num-checks              445
;  :propagations            107
;  :quant-instantiations    51
;  :rlimit-count            199469)
(assert (< $k@62@05 (- $k@14@05 $k@45@05)))
(assert (<= $Perm.No (- (- $k@14@05 $k@45@05) $k@62@05)))
(assert (<= (- (- $k@14@05 $k@45@05) $k@62@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@14@05 $k@45@05) $k@62@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          14
;  :arith-assert-diseq      52
;  :arith-assert-lower      189
;  :arith-assert-upper      164
;  :arith-conflicts         39
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        1
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1489
;  :mk-clause               202
;  :num-allocs              4318495
;  :num-checks              446
;  :propagations            107
;  :quant-instantiations    51
;  :rlimit-count            199783)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          14
;  :arith-assert-diseq      52
;  :arith-assert-lower      189
;  :arith-assert-upper      164
;  :arith-conflicts         39
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        1
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1489
;  :mk-clause               202
;  :num-allocs              4318495
;  :num-checks              447
;  :propagations            107
;  :quant-instantiations    51
;  :rlimit-count            199794)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          14
;  :arith-assert-diseq      52
;  :arith-assert-lower      189
;  :arith-assert-upper      164
;  :arith-conflicts         39
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        1
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1489
;  :mk-clause               202
;  :num-allocs              4318495
;  :num-checks              448
;  :propagations            107
;  :quant-instantiations    51
;  :rlimit-count            199813)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          14
;  :arith-assert-diseq      52
;  :arith-assert-lower      189
;  :arith-assert-upper      164
;  :arith-conflicts         39
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        1
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1489
;  :mk-clause               202
;  :num-allocs              4318495
;  :num-checks              449
;  :propagations            107
;  :quant-instantiations    51
;  :rlimit-count            199826)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          14
;  :arith-assert-diseq      52
;  :arith-assert-lower      189
;  :arith-assert-upper      165
;  :arith-conflicts         40
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         68
;  :arith-offset-eqs        1
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               374
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1490
;  :mk-clause               202
;  :num-allocs              4318495
;  :num-checks              450
;  :propagations            107
;  :quant-instantiations    51
;  :rlimit-count            199928)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          14
;  :arith-assert-diseq      52
;  :arith-assert-lower      189
;  :arith-assert-upper      165
;  :arith-conflicts         40
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         68
;  :arith-offset-eqs        1
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               374
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1490
;  :mk-clause               202
;  :num-allocs              4318495
;  :num-checks              451
;  :propagations            107
;  :quant-instantiations    51
;  :rlimit-count            199939)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2885
;  :arith-add-rows          14
;  :arith-assert-diseq      52
;  :arith-assert-lower      189
;  :arith-assert-upper      165
;  :arith-conflicts         40
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         68
;  :arith-offset-eqs        1
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               374
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 715
;  :datatype-occurs-check   94
;  :datatype-splits         462
;  :decisions               679
;  :del-clause              171
;  :final-checks            50
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1490
;  :mk-clause               202
;  :num-allocs              4318495
;  :num-checks              452
;  :propagations            107
;  :quant-instantiations    51
;  :rlimit-count            199958)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3075
;  :arith-add-rows          29
;  :arith-assert-diseq      52
;  :arith-assert-lower      203
;  :arith-assert-upper      177
;  :arith-conflicts         40
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         76
;  :arith-grobner           13
;  :arith-max-min           14
;  :arith-nonlinear-horner  5
;  :arith-offset-eqs        3
;  :arith-pivots            82
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               375
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 776
;  :datatype-occurs-check   102
;  :datatype-splits         503
;  :decisions               740
;  :del-clause              184
;  :final-checks            56
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1552
;  :mk-clause               215
;  :num-allocs              4506397
;  :num-checks              453
;  :propagations            119
;  :quant-instantiations    51
;  :rlimit-count            202686
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 7
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3352
;  :arith-add-rows          68
;  :arith-assert-diseq      52
;  :arith-assert-lower      215
;  :arith-assert-upper      189
;  :arith-bound-prop        1
;  :arith-conflicts         40
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         88
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               375
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1615
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              456
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            206045)
(declare-const $t@63@05 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3352
;  :arith-add-rows          68
;  :arith-assert-diseq      52
;  :arith-assert-lower      215
;  :arith-assert-upper      189
;  :arith-bound-prop        1
;  :arith-conflicts         40
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         88
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               376
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1615
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              457
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            206121)
(declare-const $t@64@05 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3352
;  :arith-add-rows          68
;  :arith-assert-diseq      52
;  :arith-assert-lower      215
;  :arith-assert-upper      189
;  :arith-bound-prop        1
;  :arith-conflicts         40
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         88
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               377
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1615
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              458
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            206193)
(declare-const $t@65@05 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3352
;  :arith-add-rows          68
;  :arith-assert-diseq      52
;  :arith-assert-lower      215
;  :arith-assert-upper      189
;  :arith-bound-prop        1
;  :arith-conflicts         40
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         88
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               378
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1616
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              459
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            206273)
(declare-const $t@66@05 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@59@05))
    (= $t@63@05 $t@57@05))
  (implies
    (< $Perm.No $k@41@05)
    (=
      $t@63@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- $k@14@05 $k@45@05) $k@62@05))
    (=
      $t@64@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@39@05)
    (=
      $t@64@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@61@05))
    (= $t@65@05 $t@18@05))
  (implies
    (< $Perm.No $k@38@05)
    (=
      $t@65@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@40@05)
    (=
      $t@66@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@15@05 $k@46@05))
    (=
      $t@66@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (+
    (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@59@05)
    $k@41@05)))
(assert (<=
  (+
    (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@59@05)
    $k@41@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@59@05)
      $k@41@05))
  (not (= diz@5@05 $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@14@05 $k@45@05) $k@62@05) $k@39@05)))
(assert (<= (+ (- (- $k@14@05 $k@45@05) $k@62@05) $k@39@05) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@14@05 $k@45@05) $k@62@05) $k@39@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (<= $Perm.No (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@61@05) $k@38@05)))
(assert (<= (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@61@05) $k@38@05) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@61@05) $k@38@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (<= $Perm.No (+ $k@40@05 (- $k@15@05 $k@46@05))))
(assert (<= (+ $k@40@05 (- $k@15@05 $k@46@05)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@40@05 (- $k@15@05 $k@46@05)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      193
;  :arith-bound-prop        1
;  :arith-conflicts         40
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         88
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               379
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1631
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              460
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            208070)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      194
;  :arith-bound-prop        1
;  :arith-conflicts         41
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         89
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               380
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1632
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              461
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            208173)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      194
;  :arith-bound-prop        1
;  :arith-conflicts         41
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         89
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               380
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1632
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              462
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            208184)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      194
;  :arith-bound-prop        1
;  :arith-conflicts         41
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         89
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               380
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1632
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              463
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            208203)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      194
;  :arith-bound-prop        1
;  :arith-conflicts         41
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         89
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               381
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1633
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              464
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            208463)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      195
;  :arith-bound-prop        1
;  :arith-conflicts         42
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         90
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               382
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1634
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              465
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            208566)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      195
;  :arith-bound-prop        1
;  :arith-conflicts         42
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         90
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               382
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1634
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              466
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            208577)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      195
;  :arith-bound-prop        1
;  :arith-conflicts         42
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         90
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               382
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1634
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              467
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            208596)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      195
;  :arith-bound-prop        1
;  :arith-conflicts         42
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         90
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               383
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1635
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              468
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            208856)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      196
;  :arith-bound-prop        1
;  :arith-conflicts         43
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         91
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               384
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1636
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              469
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            208959)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      196
;  :arith-bound-prop        1
;  :arith-conflicts         43
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         91
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               384
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1636
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              470
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            208970)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      196
;  :arith-bound-prop        1
;  :arith-conflicts         43
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         91
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               384
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1636
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              471
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            208989)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      196
;  :arith-bound-prop        1
;  :arith-conflicts         43
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         91
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               385
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1637
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              472
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            209249)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      197
;  :arith-bound-prop        1
;  :arith-conflicts         44
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         92
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               386
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1638
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              473
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            209352)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      197
;  :arith-bound-prop        1
;  :arith-conflicts         44
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         92
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               386
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1638
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              474
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            209363)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      197
;  :arith-bound-prop        1
;  :arith-conflicts         44
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         92
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               386
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1638
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              475
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            209382)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      219
;  :arith-assert-upper      197
;  :arith-bound-prop        1
;  :arith-conflicts         44
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         92
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               387
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1639
;  :mk-clause               235
;  :num-allocs              4506397
;  :num-checks              476
;  :propagations            134
;  :quant-instantiations    51
;  :rlimit-count            209642)
(declare-const $k@67@05 $Perm)
(assert ($Perm.isReadVar $k@67@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      53
;  :arith-assert-lower      221
;  :arith-assert-upper      199
;  :arith-bound-prop        1
;  :arith-conflicts         45
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         93
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               388
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1644
;  :mk-clause               237
;  :num-allocs              4506397
;  :num-checks              477
;  :propagations            135
;  :quant-instantiations    51
;  :rlimit-count            209893)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@67@05 $Perm.No) (< $Perm.No $k@67@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      53
;  :arith-assert-lower      221
;  :arith-assert-upper      199
;  :arith-bound-prop        1
;  :arith-conflicts         45
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         93
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               389
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1644
;  :mk-clause               237
;  :num-allocs              4506397
;  :num-checks              478
;  :propagations            135
;  :quant-instantiations    51
;  :rlimit-count            209943)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3362
;  :arith-add-rows          74
;  :arith-assert-diseq      53
;  :arith-assert-lower      221
;  :arith-assert-upper      199
;  :arith-bound-prop        1
;  :arith-conflicts         45
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         93
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               390
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              214
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1645
;  :mk-clause               237
;  :num-allocs              4506397
;  :num-checks              479
;  :propagations            135
;  :quant-instantiations    51
;  :rlimit-count            210023)
(push) ; 7
(assert (not (not (= (+ $k@40@05 (- $k@15@05 $k@46@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          74
;  :arith-assert-diseq      53
;  :arith-assert-lower      221
;  :arith-assert-upper      200
;  :arith-bound-prop        1
;  :arith-conflicts         46
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         93
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            98
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               391
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1647
;  :mk-clause               239
;  :num-allocs              4506397
;  :num-checks              480
;  :propagations            136
;  :quant-instantiations    51
;  :rlimit-count            210101)
(assert (< $k@67@05 (+ $k@40@05 (- $k@15@05 $k@46@05))))
(assert (<= $Perm.No (- (+ $k@40@05 (- $k@15@05 $k@46@05)) $k@67@05)))
(assert (<= (- (+ $k@40@05 (- $k@15@05 $k@46@05)) $k@67@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@40@05 (- $k@15@05 $k@46@05)) $k@67@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          75
;  :arith-assert-diseq      53
;  :arith-assert-lower      223
;  :arith-assert-upper      202
;  :arith-bound-prop        1
;  :arith-conflicts         47
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         94
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            99
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               392
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1651
;  :mk-clause               239
;  :num-allocs              4506397
;  :num-checks              481
;  :propagations            136
;  :quant-instantiations    51
;  :rlimit-count            210398)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          75
;  :arith-assert-diseq      53
;  :arith-assert-lower      223
;  :arith-assert-upper      202
;  :arith-bound-prop        1
;  :arith-conflicts         47
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         94
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            99
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               392
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1651
;  :mk-clause               239
;  :num-allocs              4506397
;  :num-checks              482
;  :propagations            136
;  :quant-instantiations    51
;  :rlimit-count            210409)
(push) ; 7
(assert (not (< $Perm.No (- $k@15@05 $k@46@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          75
;  :arith-assert-diseq      53
;  :arith-assert-lower      223
;  :arith-assert-upper      202
;  :arith-bound-prop        1
;  :arith-conflicts         47
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         94
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            99
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               392
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1651
;  :mk-clause               239
;  :num-allocs              4506397
;  :num-checks              483
;  :propagations            136
;  :quant-instantiations    51
;  :rlimit-count            210428)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          75
;  :arith-assert-diseq      53
;  :arith-assert-lower      223
;  :arith-assert-upper      202
;  :arith-bound-prop        1
;  :arith-conflicts         47
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         94
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            99
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               392
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1651
;  :mk-clause               239
;  :num-allocs              4506397
;  :num-checks              484
;  :propagations            136
;  :quant-instantiations    51
;  :rlimit-count            210441)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          75
;  :arith-assert-diseq      53
;  :arith-assert-lower      223
;  :arith-assert-upper      203
;  :arith-bound-prop        1
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         95
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            99
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               393
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1652
;  :mk-clause               239
;  :num-allocs              4506397
;  :num-checks              485
;  :propagations            136
;  :quant-instantiations    51
;  :rlimit-count            210544)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          75
;  :arith-assert-diseq      53
;  :arith-assert-lower      223
;  :arith-assert-upper      203
;  :arith-bound-prop        1
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         95
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            99
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               393
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1652
;  :mk-clause               239
;  :num-allocs              4506397
;  :num-checks              486
;  :propagations            136
;  :quant-instantiations    51
;  :rlimit-count            210555)
(push) ; 7
(assert (not (< $Perm.No (- $k@15@05 $k@46@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          75
;  :arith-assert-diseq      53
;  :arith-assert-lower      223
;  :arith-assert-upper      203
;  :arith-bound-prop        1
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         95
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            99
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               393
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1652
;  :mk-clause               239
;  :num-allocs              4506397
;  :num-checks              487
;  :propagations            136
;  :quant-instantiations    51
;  :rlimit-count            210574)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          75
;  :arith-assert-diseq      53
;  :arith-assert-lower      223
;  :arith-assert-upper      203
;  :arith-bound-prop        1
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         95
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            99
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               394
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1653
;  :mk-clause               239
;  :num-allocs              4506397
;  :num-checks              488
;  :propagations            136
;  :quant-instantiations    51
;  :rlimit-count            210904)
(declare-const $k@68@05 $Perm)
(assert ($Perm.isReadVar $k@68@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          75
;  :arith-assert-diseq      54
;  :arith-assert-lower      225
;  :arith-assert-upper      205
;  :arith-bound-prop        1
;  :arith-conflicts         49
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         96
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            99
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               395
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1658
;  :mk-clause               241
;  :num-allocs              4506397
;  :num-checks              489
;  :propagations            137
;  :quant-instantiations    51
;  :rlimit-count            211156)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          75
;  :arith-assert-diseq      54
;  :arith-assert-lower      225
;  :arith-assert-upper      205
;  :arith-bound-prop        1
;  :arith-conflicts         49
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         96
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            99
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               395
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1658
;  :mk-clause               241
;  :num-allocs              4506397
;  :num-checks              490
;  :propagations            137
;  :quant-instantiations    51
;  :rlimit-count            211167)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          75
;  :arith-assert-diseq      54
;  :arith-assert-lower      225
;  :arith-assert-upper      205
;  :arith-bound-prop        1
;  :arith-conflicts         49
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         96
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            99
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               395
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1658
;  :mk-clause               241
;  :num-allocs              4506397
;  :num-checks              491
;  :propagations            137
;  :quant-instantiations    51
;  :rlimit-count            211188)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@68@05 $Perm.No) (< $Perm.No $k@68@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          75
;  :arith-assert-diseq      54
;  :arith-assert-lower      225
;  :arith-assert-upper      205
;  :arith-bound-prop        1
;  :arith-conflicts         49
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         96
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            99
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               396
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1658
;  :mk-clause               241
;  :num-allocs              4506397
;  :num-checks              492
;  :propagations            137
;  :quant-instantiations    51
;  :rlimit-count            211238)
(set-option :timeout 10)
(push) ; 7
(assert (not (= diz@5@05 $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3363
;  :arith-add-rows          75
;  :arith-assert-diseq      54
;  :arith-assert-lower      225
;  :arith-assert-upper      205
;  :arith-bound-prop        1
;  :arith-conflicts         49
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         96
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            99
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               396
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              216
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1658
;  :mk-clause               241
;  :num-allocs              4506397
;  :num-checks              493
;  :propagations            137
;  :quant-instantiations    51
;  :rlimit-count            211249)
(push) ; 7
(assert (not (not
  (=
    (+
      (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@59@05)
      $k@41@05)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3364
;  :arith-add-rows          78
;  :arith-assert-diseq      54
;  :arith-assert-lower      225
;  :arith-assert-upper      206
;  :arith-bound-prop        1
;  :arith-conflicts         50
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         96
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            101
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               397
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              218
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1660
;  :mk-clause               243
;  :num-allocs              4506397
;  :num-checks              494
;  :propagations            138
;  :quant-instantiations    51
;  :rlimit-count            211438)
(assert (<
  $k@68@05
  (+
    (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@59@05)
    $k@41@05)))
(assert (<=
  $Perm.No
  (-
    (+
      (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@59@05)
      $k@41@05)
    $k@68@05)))
(assert (<=
  (-
    (+
      (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@59@05)
      $k@41@05)
    $k@68@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@59@05)
        $k@41@05)
      $k@68@05))
  (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3364
;  :arith-add-rows          83
;  :arith-assert-diseq      54
;  :arith-assert-lower      227
;  :arith-assert-upper      208
;  :arith-bound-prop        1
;  :arith-conflicts         51
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         97
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            102
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               398
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              218
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1664
;  :mk-clause               243
;  :num-allocs              4506397
;  :num-checks              495
;  :propagations            138
;  :quant-instantiations    51
;  :rlimit-count            211806)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3364
;  :arith-add-rows          83
;  :arith-assert-diseq      54
;  :arith-assert-lower      227
;  :arith-assert-upper      208
;  :arith-bound-prop        1
;  :arith-conflicts         51
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         97
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            102
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               398
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              218
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1664
;  :mk-clause               243
;  :num-allocs              4506397
;  :num-checks              496
;  :propagations            138
;  :quant-instantiations    51
;  :rlimit-count            211817)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3364
;  :arith-add-rows          83
;  :arith-assert-diseq      54
;  :arith-assert-lower      227
;  :arith-assert-upper      208
;  :arith-bound-prop        1
;  :arith-conflicts         51
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         97
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            102
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               398
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              218
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1664
;  :mk-clause               243
;  :num-allocs              4506397
;  :num-checks              497
;  :propagations            138
;  :quant-instantiations    51
;  :rlimit-count            211838)
(push) ; 7
(assert (not (= diz@5@05 $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3364
;  :arith-add-rows          83
;  :arith-assert-diseq      54
;  :arith-assert-lower      227
;  :arith-assert-upper      208
;  :arith-bound-prop        1
;  :arith-conflicts         51
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         97
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            102
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               398
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              218
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1664
;  :mk-clause               243
;  :num-allocs              4506397
;  :num-checks              498
;  :propagations            138
;  :quant-instantiations    51
;  :rlimit-count            211849)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3364
;  :arith-add-rows          83
;  :arith-assert-diseq      54
;  :arith-assert-lower      227
;  :arith-assert-upper      209
;  :arith-bound-prop        1
;  :arith-conflicts         52
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         98
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            102
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               399
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              218
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1665
;  :mk-clause               243
;  :num-allocs              4506397
;  :num-checks              499
;  :propagations            138
;  :quant-instantiations    51
;  :rlimit-count            211951)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3364
;  :arith-add-rows          83
;  :arith-assert-diseq      54
;  :arith-assert-lower      227
;  :arith-assert-upper      210
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         99
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            102
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               400
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              218
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1666
;  :mk-clause               243
;  :num-allocs              4506397
;  :num-checks              500
;  :propagations            138
;  :quant-instantiations    51
;  :rlimit-count            212053)
(declare-const $k@69@05 $Perm)
(assert ($Perm.isReadVar $k@69@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3364
;  :arith-add-rows          83
;  :arith-assert-diseq      55
;  :arith-assert-lower      229
;  :arith-assert-upper      212
;  :arith-bound-prop        1
;  :arith-conflicts         54
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         100
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            102
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               401
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              218
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1671
;  :mk-clause               245
;  :num-allocs              4506397
;  :num-checks              501
;  :propagations            139
;  :quant-instantiations    51
;  :rlimit-count            212303)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@69@05 $Perm.No) (< $Perm.No $k@69@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3364
;  :arith-add-rows          83
;  :arith-assert-diseq      55
;  :arith-assert-lower      229
;  :arith-assert-upper      212
;  :arith-bound-prop        1
;  :arith-conflicts         54
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         100
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            102
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               402
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              218
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1671
;  :mk-clause               245
;  :num-allocs              4506397
;  :num-checks              502
;  :propagations            139
;  :quant-instantiations    51
;  :rlimit-count            212353)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3364
;  :arith-add-rows          83
;  :arith-assert-diseq      55
;  :arith-assert-lower      229
;  :arith-assert-upper      212
;  :arith-bound-prop        1
;  :arith-conflicts         54
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         100
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            102
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               402
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              218
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1671
;  :mk-clause               245
;  :num-allocs              4506397
;  :num-checks              503
;  :propagations            139
;  :quant-instantiations    51
;  :rlimit-count            212364)
(push) ; 7
(assert (not (not (= (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@61@05) $k@38@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3365
;  :arith-add-rows          85
;  :arith-assert-diseq      55
;  :arith-assert-lower      229
;  :arith-assert-upper      213
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         100
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            104
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               403
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              220
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1673
;  :mk-clause               247
;  :num-allocs              4506397
;  :num-checks              504
;  :propagations            140
;  :quant-instantiations    51
;  :rlimit-count            212516)
(assert (< $k@69@05 (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@61@05) $k@38@05)))
(assert (<=
  $Perm.No
  (- (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@61@05) $k@38@05) $k@69@05)))
(assert (<=
  (- (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@61@05) $k@38@05) $k@69@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@61@05) $k@38@05) $k@69@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3365
;  :arith-add-rows          87
;  :arith-assert-diseq      55
;  :arith-assert-lower      231
;  :arith-assert-upper      215
;  :arith-bound-prop        1
;  :arith-conflicts         56
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         101
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            105
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               404
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              220
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1677
;  :mk-clause               247
;  :num-allocs              4506397
;  :num-checks              505
;  :propagations            140
;  :quant-instantiations    51
;  :rlimit-count            212834)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3365
;  :arith-add-rows          87
;  :arith-assert-diseq      55
;  :arith-assert-lower      231
;  :arith-assert-upper      215
;  :arith-bound-prop        1
;  :arith-conflicts         56
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         101
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            105
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               404
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              220
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1677
;  :mk-clause               247
;  :num-allocs              4506397
;  :num-checks              506
;  :propagations            140
;  :quant-instantiations    51
;  :rlimit-count            212845)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3365
;  :arith-add-rows          87
;  :arith-assert-diseq      55
;  :arith-assert-lower      231
;  :arith-assert-upper      215
;  :arith-bound-prop        1
;  :arith-conflicts         56
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         101
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            105
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               404
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              220
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1677
;  :mk-clause               247
;  :num-allocs              4506397
;  :num-checks              507
;  :propagations            140
;  :quant-instantiations    51
;  :rlimit-count            212866)
; [eval] 0 <= sys__local__result__3
(set-option :timeout 0)
(push) ; 7
(assert (not (<= 0 sys__local__result__3@58@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3365
;  :arith-add-rows          87
;  :arith-assert-diseq      55
;  :arith-assert-lower      231
;  :arith-assert-upper      216
;  :arith-bound-prop        1
;  :arith-conflicts         57
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         101
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            105
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               405
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              220
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1678
;  :mk-clause               247
;  :num-allocs              4506397
;  :num-checks              508
;  :propagations            140
;  :quant-instantiations    51
;  :rlimit-count            212928)
(assert (<= 0 sys__local__result__3@58@05))
; [eval] sys__local__result__3 < 16
(push) ; 7
(assert (not (< sys__local__result__3@58@05 16)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3365
;  :arith-add-rows          88
;  :arith-assert-diseq      55
;  :arith-assert-lower      233
;  :arith-assert-upper      216
;  :arith-bound-prop        1
;  :arith-conflicts         58
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         101
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               406
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              220
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1680
;  :mk-clause               247
;  :num-allocs              4506397
;  :num-checks              509
;  :propagations            140
;  :quant-instantiations    51
;  :rlimit-count            213044)
(assert (< sys__local__result__3@58@05 16))
; [exec]
; label __return_get_bit
; [exec]
; sys__result := sys__local__result__3
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__10: Int :: { diz.ALU_m.Main_process_state[i__10] } 0 <= i__10 && i__10 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__10] == -1 || 0 <= diz.ALU_m.Main_process_state[i__10] && diz.ALU_m.Main_process_state[i__10] < |diz.ALU_m.Main_event_state|) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && 0 <= diz.ALU_m.Main_alu.ALU_RESULT && diz.ALU_m.Main_alu.ALU_RESULT <= 16 && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_init, 1 / 2) && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_mon.Monitor_init, 1 / 2) && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu == diz && (0 <= sys__result && sys__result < 16)
(declare-const $k@70@05 $Perm)
(assert ($Perm.isReadVar $k@70@05 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@70@05 $Perm.No) (< $Perm.No $k@70@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3365
;  :arith-add-rows          88
;  :arith-assert-diseq      56
;  :arith-assert-lower      235
;  :arith-assert-upper      218
;  :arith-bound-prop        1
;  :arith-conflicts         58
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         101
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               407
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              220
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1685
;  :mk-clause               249
;  :num-allocs              4506397
;  :num-checks              510
;  :propagations            141
;  :quant-instantiations    51
;  :rlimit-count            213293)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          88
;  :arith-assert-diseq      56
;  :arith-assert-lower      235
;  :arith-assert-upper      219
;  :arith-bound-prop        1
;  :arith-conflicts         59
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         101
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               408
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1687
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              511
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            213395)
(assert (< $k@70@05 (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05))))
(assert (<=
  $Perm.No
  (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@70@05)))
(assert (<=
  (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@70@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@70@05))
  (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      237
;  :arith-assert-upper      221
;  :arith-bound-prop        1
;  :arith-conflicts         60
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         102
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               409
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1691
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              512
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            213707)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      237
;  :arith-assert-upper      222
;  :arith-bound-prop        1
;  :arith-conflicts         61
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         103
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               410
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1692
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              513
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            213810)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      237
;  :arith-assert-upper      222
;  :arith-bound-prop        1
;  :arith-conflicts         61
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         103
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               411
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1693
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              514
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            213890)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      237
;  :arith-assert-upper      223
;  :arith-bound-prop        1
;  :arith-conflicts         62
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         104
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               412
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1694
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              515
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            213993)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      237
;  :arith-assert-upper      223
;  :arith-bound-prop        1
;  :arith-conflicts         62
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         104
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               413
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1695
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              516
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            214073)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      237
;  :arith-assert-upper      224
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         105
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               414
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1696
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              517
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            214176)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      237
;  :arith-assert-upper      224
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         105
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               415
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1697
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              518
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            214256)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      237
;  :arith-assert-upper      225
;  :arith-bound-prop        1
;  :arith-conflicts         64
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         106
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               416
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1698
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              519
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            214359)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      237
;  :arith-assert-upper      225
;  :arith-bound-prop        1
;  :arith-conflicts         64
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         106
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               417
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1699
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              520
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            214439)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      237
;  :arith-assert-upper      226
;  :arith-bound-prop        1
;  :arith-conflicts         65
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         107
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               418
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1700
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              521
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            214542)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      237
;  :arith-assert-upper      226
;  :arith-bound-prop        1
;  :arith-conflicts         65
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         107
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               419
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1701
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              522
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            214622)
; [eval] (forall i__10: Int :: { diz.ALU_m.Main_process_state[i__10] } 0 <= i__10 && i__10 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__10] == -1 || 0 <= diz.ALU_m.Main_process_state[i__10] && diz.ALU_m.Main_process_state[i__10] < |diz.ALU_m.Main_event_state|)
(declare-const i__10@71@05 Int)
(push) ; 7
; [eval] 0 <= i__10 && i__10 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__10] == -1 || 0 <= diz.ALU_m.Main_process_state[i__10] && diz.ALU_m.Main_process_state[i__10] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__10 && i__10 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__10
(push) ; 8
; [then-branch: 27 | 0 <= i__10@71@05 | live]
; [else-branch: 27 | !(0 <= i__10@71@05) | live]
(push) ; 9
; [then-branch: 27 | 0 <= i__10@71@05]
(assert (<= 0 i__10@71@05))
; [eval] i__10 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      238
;  :arith-assert-upper      227
;  :arith-bound-prop        1
;  :arith-conflicts         66
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         108
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               420
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1703
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              523
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            214777)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3366
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      238
;  :arith-assert-upper      227
;  :arith-bound-prop        1
;  :arith-conflicts         66
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         108
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               421
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1704
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              524
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            214857)
(pop) ; 9
(push) ; 9
; [else-branch: 27 | !(0 <= i__10@71@05)]
(assert (not (<= 0 i__10@71@05)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 28 | i__10@71@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__10@71@05 | live]
; [else-branch: 28 | !(i__10@71@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__10@71@05) | live]
(push) ; 9
; [then-branch: 28 | i__10@71@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__10@71@05]
(assert (and
  (<
    i__10@71@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
  (<= 0 i__10@71@05)))
; [eval] diz.ALU_m.Main_process_state[i__10] == -1 || 0 <= diz.ALU_m.Main_process_state[i__10] && diz.ALU_m.Main_process_state[i__10] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__10] == -1
; [eval] diz.ALU_m.Main_process_state[i__10]
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3367
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      239
;  :arith-assert-upper      229
;  :arith-bound-prop        1
;  :arith-conflicts         67
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         110
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               422
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1707
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              525
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            215073)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3367
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      239
;  :arith-assert-upper      229
;  :arith-bound-prop        1
;  :arith-conflicts         67
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         110
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               423
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1708
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              526
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            215153)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__10@71@05 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3367
;  :arith-add-rows          91
;  :arith-assert-diseq      56
;  :arith-assert-lower      239
;  :arith-assert-upper      229
;  :arith-bound-prop        1
;  :arith-conflicts         67
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         110
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               423
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1708
;  :mk-clause               251
;  :num-allocs              4506397
;  :num-checks              527
;  :propagations            142
;  :quant-instantiations    51
;  :rlimit-count            215162)
; [eval] -1
(push) ; 10
; [then-branch: 29 | First:(Second:(Second:(Second:($t@35@05))))[i__10@71@05] == -1 | live]
; [else-branch: 29 | First:(Second:(Second:(Second:($t@35@05))))[i__10@71@05] != -1 | live]
(push) ; 11
; [then-branch: 29 | First:(Second:(Second:(Second:($t@35@05))))[i__10@71@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__10@71@05)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 29 | First:(Second:(Second:(Second:($t@35@05))))[i__10@71@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
      i__10@71@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__10] && diz.ALU_m.Main_process_state[i__10] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__10]
; [eval] diz.ALU_m.Main_process_state[i__10]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3369
;  :arith-add-rows          91
;  :arith-assert-diseq      58
;  :arith-assert-lower      242
;  :arith-assert-upper      231
;  :arith-bound-prop        1
;  :arith-conflicts         68
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         111
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               424
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1716
;  :mk-clause               262
;  :num-allocs              4506397
;  :num-checks              528
;  :propagations            147
;  :quant-instantiations    53
;  :rlimit-count            215497)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3369
;  :arith-add-rows          91
;  :arith-assert-diseq      58
;  :arith-assert-lower      242
;  :arith-assert-upper      231
;  :arith-bound-prop        1
;  :arith-conflicts         68
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         111
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               425
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1717
;  :mk-clause               262
;  :num-allocs              4506397
;  :num-checks              529
;  :propagations            147
;  :quant-instantiations    53
;  :rlimit-count            215577)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__10@71@05 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3369
;  :arith-add-rows          91
;  :arith-assert-diseq      58
;  :arith-assert-lower      242
;  :arith-assert-upper      231
;  :arith-bound-prop        1
;  :arith-conflicts         68
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         111
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               425
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1717
;  :mk-clause               262
;  :num-allocs              4506397
;  :num-checks              530
;  :propagations            147
;  :quant-instantiations    53
;  :rlimit-count            215586)
(push) ; 12
; [then-branch: 30 | 0 <= First:(Second:(Second:(Second:($t@35@05))))[i__10@71@05] | live]
; [else-branch: 30 | !(0 <= First:(Second:(Second:(Second:($t@35@05))))[i__10@71@05]) | live]
(push) ; 13
; [then-branch: 30 | 0 <= First:(Second:(Second:(Second:($t@35@05))))[i__10@71@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__10@71@05)))
; [eval] diz.ALU_m.Main_process_state[i__10] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__10]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          91
;  :arith-assert-diseq      58
;  :arith-assert-lower      244
;  :arith-assert-upper      233
;  :arith-bound-prop        1
;  :arith-conflicts         69
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         113
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            107
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               426
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1722
;  :mk-clause               262
;  :num-allocs              4506397
;  :num-checks              531
;  :propagations            147
;  :quant-instantiations    53
;  :rlimit-count            215815)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          91
;  :arith-assert-diseq      58
;  :arith-assert-lower      244
;  :arith-assert-upper      233
;  :arith-bound-prop        1
;  :arith-conflicts         69
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         113
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            107
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               427
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1723
;  :mk-clause               262
;  :num-allocs              4506397
;  :num-checks              532
;  :propagations            147
;  :quant-instantiations    53
;  :rlimit-count            215895)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__10@71@05 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          91
;  :arith-assert-diseq      58
;  :arith-assert-lower      244
;  :arith-assert-upper      233
;  :arith-bound-prop        1
;  :arith-conflicts         69
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         113
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            107
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               427
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1723
;  :mk-clause               262
;  :num-allocs              4506397
;  :num-checks              533
;  :propagations            147
;  :quant-instantiations    53
;  :rlimit-count            215904)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          91
;  :arith-assert-diseq      58
;  :arith-assert-lower      244
;  :arith-assert-upper      234
;  :arith-bound-prop        1
;  :arith-conflicts         70
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         114
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            107
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               428
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1724
;  :mk-clause               262
;  :num-allocs              4506397
;  :num-checks              534
;  :propagations            147
;  :quant-instantiations    53
;  :rlimit-count            216007)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          91
;  :arith-assert-diseq      58
;  :arith-assert-lower      244
;  :arith-assert-upper      234
;  :arith-bound-prop        1
;  :arith-conflicts         70
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         114
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            107
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               429
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              222
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1725
;  :mk-clause               262
;  :num-allocs              4506397
;  :num-checks              535
;  :propagations            147
;  :quant-instantiations    53
;  :rlimit-count            216087)
(pop) ; 13
(push) ; 13
; [else-branch: 30 | !(0 <= First:(Second:(Second:(Second:($t@35@05))))[i__10@71@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
      i__10@71@05))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 28 | !(i__10@71@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__10@71@05)]
(assert (not
  (and
    (<
      i__10@71@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
    (<= 0 i__10@71@05))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__10@71@05 Int)) (!
  (implies
    (and
      (<
        i__10@71@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
      (<= 0 i__10@71@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
          i__10@71@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__10@71@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__10@71@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__10@71@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          91
;  :arith-assert-diseq      60
;  :arith-assert-lower      245
;  :arith-assert-upper      235
;  :arith-bound-prop        1
;  :arith-conflicts         70
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         115
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               430
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1733
;  :mk-clause               276
;  :num-allocs              4506397
;  :num-checks              536
;  :propagations            149
;  :quant-instantiations    55
;  :rlimit-count            216561)
(assert (forall ((i__10@71@05 Int)) (!
  (implies
    (and
      (<
        i__10@71@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
      (<= 0 i__10@71@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
          i__10@71@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__10@71@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__10@71@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__10@71@05))
  :qid |prog.l<no position>|)))
(declare-const $k@72@05 $Perm)
(assert ($Perm.isReadVar $k@72@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          91
;  :arith-assert-diseq      61
;  :arith-assert-lower      247
;  :arith-assert-upper      237
;  :arith-bound-prop        1
;  :arith-conflicts         71
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         116
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               431
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1739
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              537
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217175)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@72@05 $Perm.No) (< $Perm.No $k@72@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          91
;  :arith-assert-diseq      61
;  :arith-assert-lower      247
;  :arith-assert-upper      237
;  :arith-bound-prop        1
;  :arith-conflicts         71
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         116
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               432
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1739
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              538
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217225)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          91
;  :arith-assert-diseq      61
;  :arith-assert-lower      247
;  :arith-assert-upper      237
;  :arith-bound-prop        1
;  :arith-conflicts         71
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         116
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               432
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1739
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              539
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217236)
(push) ; 7
(assert (not (not (= (- (+ $k@13@05 $k@17@05) $k@44@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          91
;  :arith-assert-diseq      61
;  :arith-assert-lower      247
;  :arith-assert-upper      237
;  :arith-bound-prop        1
;  :arith-conflicts         71
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         116
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               433
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1740
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              540
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217310)
(assert (< $k@72@05 (- (+ $k@13@05 $k@17@05) $k@44@05)))
(assert (<= $Perm.No (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@72@05)))
(assert (<= (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@72@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@72@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      239
;  :arith-bound-prop        1
;  :arith-conflicts         72
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         117
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               434
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1744
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              541
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217601)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      239
;  :arith-bound-prop        1
;  :arith-conflicts         72
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         117
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               434
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1744
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              542
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217612)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      239
;  :arith-bound-prop        1
;  :arith-conflicts         72
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         117
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               434
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1744
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              543
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217633)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      240
;  :arith-bound-prop        1
;  :arith-conflicts         73
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         118
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               435
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1745
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              544
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217736)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      240
;  :arith-bound-prop        1
;  :arith-conflicts         73
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         118
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               435
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1745
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              545
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217747)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      240
;  :arith-bound-prop        1
;  :arith-conflicts         73
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         118
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               435
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1745
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              546
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217768)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      240
;  :arith-bound-prop        1
;  :arith-conflicts         73
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         118
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               435
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1745
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              547
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217779)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      241
;  :arith-bound-prop        1
;  :arith-conflicts         74
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         119
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               436
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1746
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              548
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217882)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      241
;  :arith-bound-prop        1
;  :arith-conflicts         74
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         119
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               436
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1746
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              549
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217893)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      241
;  :arith-bound-prop        1
;  :arith-conflicts         74
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         119
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               436
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1746
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              550
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217914)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      241
;  :arith-bound-prop        1
;  :arith-conflicts         74
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         119
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               436
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1746
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              551
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            217925)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      242
;  :arith-bound-prop        1
;  :arith-conflicts         75
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         120
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               437
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1747
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              552
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218028)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      242
;  :arith-bound-prop        1
;  :arith-conflicts         75
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         120
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               437
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1747
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              553
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218039)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      242
;  :arith-bound-prop        1
;  :arith-conflicts         75
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         120
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               437
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1747
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              554
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218060)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      242
;  :arith-bound-prop        1
;  :arith-conflicts         75
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         120
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               437
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1747
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              555
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218071)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      243
;  :arith-bound-prop        1
;  :arith-conflicts         76
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         121
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               438
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1748
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              556
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218174)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      243
;  :arith-bound-prop        1
;  :arith-conflicts         76
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         121
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               438
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1748
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              557
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218185)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      243
;  :arith-bound-prop        1
;  :arith-conflicts         76
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         121
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               438
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1748
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              558
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218206)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      243
;  :arith-bound-prop        1
;  :arith-conflicts         76
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         121
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               438
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1748
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              559
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218217)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      244
;  :arith-bound-prop        1
;  :arith-conflicts         77
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         122
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               439
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1749
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              560
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218320)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      244
;  :arith-bound-prop        1
;  :arith-conflicts         77
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         122
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               439
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1749
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              561
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218331)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      244
;  :arith-bound-prop        1
;  :arith-conflicts         77
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         122
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               439
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1749
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              562
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218352)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      244
;  :arith-bound-prop        1
;  :arith-conflicts         77
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         122
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               439
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1749
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              563
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218363)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      245
;  :arith-bound-prop        1
;  :arith-conflicts         78
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         123
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               440
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1750
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              564
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218466)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      245
;  :arith-bound-prop        1
;  :arith-conflicts         78
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         123
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               440
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1750
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              565
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218477)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      245
;  :arith-bound-prop        1
;  :arith-conflicts         78
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         123
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               440
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1750
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              566
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218498)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      245
;  :arith-bound-prop        1
;  :arith-conflicts         78
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         123
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               440
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1750
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              567
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218509)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         79
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         124
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               441
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1751
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              568
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218612)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         79
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         124
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               441
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1751
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              569
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218623)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         79
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         124
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               441
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1751
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              570
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218644)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         79
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         124
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               441
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1751
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              571
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218655)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      247
;  :arith-bound-prop        1
;  :arith-conflicts         80
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         125
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               442
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1752
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              572
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218758)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      247
;  :arith-bound-prop        1
;  :arith-conflicts         80
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         125
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               442
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1752
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              573
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218769)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      247
;  :arith-bound-prop        1
;  :arith-conflicts         80
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         125
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               442
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1752
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              574
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218790)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      247
;  :arith-bound-prop        1
;  :arith-conflicts         80
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         125
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               442
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1752
;  :mk-clause               278
;  :num-allocs              4506397
;  :num-checks              575
;  :propagations            150
;  :quant-instantiations    55
;  :rlimit-count            218801)
(declare-const $k@73@05 $Perm)
(assert ($Perm.isReadVar $k@73@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      62
;  :arith-assert-lower      251
;  :arith-assert-upper      249
;  :arith-bound-prop        1
;  :arith-conflicts         81
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         126
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               443
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1757
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              576
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            219052)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@73@05 $Perm.No) (< $Perm.No $k@73@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      62
;  :arith-assert-lower      251
;  :arith-assert-upper      249
;  :arith-bound-prop        1
;  :arith-conflicts         81
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         126
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               444
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1757
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              577
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            219102)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      62
;  :arith-assert-lower      251
;  :arith-assert-upper      249
;  :arith-bound-prop        1
;  :arith-conflicts         81
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         126
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               444
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1757
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              578
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            219113)
(push) ; 7
(assert (not (not (= (- $k@14@05 $k@45@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          93
;  :arith-assert-diseq      62
;  :arith-assert-lower      251
;  :arith-assert-upper      249
;  :arith-bound-prop        1
;  :arith-conflicts         81
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         126
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               445
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1758
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              579
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            219181)
(assert (< $k@73@05 (- $k@14@05 $k@45@05)))
(assert (<= $Perm.No (- (- $k@14@05 $k@45@05) $k@73@05)))
(assert (<= (- (- $k@14@05 $k@45@05) $k@73@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@14@05 $k@45@05) $k@73@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      251
;  :arith-bound-prop        1
;  :arith-conflicts         82
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         127
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               446
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1762
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              580
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            219472)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      251
;  :arith-bound-prop        1
;  :arith-conflicts         82
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         127
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               446
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1762
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              581
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            219483)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      251
;  :arith-bound-prop        1
;  :arith-conflicts         82
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         127
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               446
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1762
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              582
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            219502)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      251
;  :arith-bound-prop        1
;  :arith-conflicts         82
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         127
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               446
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1762
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              583
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            219515)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      252
;  :arith-bound-prop        1
;  :arith-conflicts         83
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         128
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1763
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              584
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            219618)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      252
;  :arith-bound-prop        1
;  :arith-conflicts         83
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         128
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1763
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              585
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            219629)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      252
;  :arith-bound-prop        1
;  :arith-conflicts         83
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         128
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1763
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              586
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            219648)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      252
;  :arith-bound-prop        1
;  :arith-conflicts         83
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         128
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               448
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1764
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              587
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            219908)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      253
;  :arith-bound-prop        1
;  :arith-conflicts         84
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         129
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               449
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1765
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              588
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            220011)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      253
;  :arith-bound-prop        1
;  :arith-conflicts         84
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         129
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               449
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1765
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              589
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            220022)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      253
;  :arith-bound-prop        1
;  :arith-conflicts         84
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         129
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               449
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1765
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              590
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            220041)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      253
;  :arith-bound-prop        1
;  :arith-conflicts         84
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         129
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               450
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1766
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              591
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            220301)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      254
;  :arith-bound-prop        1
;  :arith-conflicts         85
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         130
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               451
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1767
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              592
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            220404)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      254
;  :arith-bound-prop        1
;  :arith-conflicts         85
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         130
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               451
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1767
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              593
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            220415)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      254
;  :arith-bound-prop        1
;  :arith-conflicts         85
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         130
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               451
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1767
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              594
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            220434)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      254
;  :arith-bound-prop        1
;  :arith-conflicts         85
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         130
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               452
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1768
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              595
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            220694)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      255
;  :arith-bound-prop        1
;  :arith-conflicts         86
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         131
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               453
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1769
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              596
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            220797)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      255
;  :arith-bound-prop        1
;  :arith-conflicts         86
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         131
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               453
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1769
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              597
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            220808)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      255
;  :arith-bound-prop        1
;  :arith-conflicts         86
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         131
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               453
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1769
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              598
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            220827)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      255
;  :arith-bound-prop        1
;  :arith-conflicts         86
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         131
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               454
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1770
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              599
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            221087)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      256
;  :arith-bound-prop        1
;  :arith-conflicts         87
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         132
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               455
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1771
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              600
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            221190)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      256
;  :arith-bound-prop        1
;  :arith-conflicts         87
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         132
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               455
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1771
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              601
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            221201)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      256
;  :arith-bound-prop        1
;  :arith-conflicts         87
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         132
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               455
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1771
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              602
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            221220)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      62
;  :arith-assert-lower      253
;  :arith-assert-upper      256
;  :arith-bound-prop        1
;  :arith-conflicts         87
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         132
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               456
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1772
;  :mk-clause               280
;  :num-allocs              4506397
;  :num-checks              603
;  :propagations            151
;  :quant-instantiations    55
;  :rlimit-count            221480)
(declare-const $k@74@05 $Perm)
(assert ($Perm.isReadVar $k@74@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      63
;  :arith-assert-lower      255
;  :arith-assert-upper      258
;  :arith-bound-prop        1
;  :arith-conflicts         88
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         133
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               457
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1777
;  :mk-clause               282
;  :num-allocs              4506397
;  :num-checks              604
;  :propagations            152
;  :quant-instantiations    55
;  :rlimit-count            221731)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@74@05 $Perm.No) (< $Perm.No $k@74@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      63
;  :arith-assert-lower      255
;  :arith-assert-upper      258
;  :arith-bound-prop        1
;  :arith-conflicts         88
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         133
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               458
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1777
;  :mk-clause               282
;  :num-allocs              4506397
;  :num-checks              605
;  :propagations            152
;  :quant-instantiations    55
;  :rlimit-count            221781)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      63
;  :arith-assert-lower      255
;  :arith-assert-upper      258
;  :arith-bound-prop        1
;  :arith-conflicts         88
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         133
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               458
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1777
;  :mk-clause               282
;  :num-allocs              4506397
;  :num-checks              606
;  :propagations            152
;  :quant-instantiations    55
;  :rlimit-count            221792)
(push) ; 7
(assert (not (not (= (- $k@15@05 $k@46@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          94
;  :arith-assert-diseq      63
;  :arith-assert-lower      255
;  :arith-assert-upper      258
;  :arith-bound-prop        1
;  :arith-conflicts         88
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         133
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               459
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1778
;  :mk-clause               282
;  :num-allocs              4506397
;  :num-checks              607
;  :propagations            152
;  :quant-instantiations    55
;  :rlimit-count            221860)
(assert (< $k@74@05 (- $k@15@05 $k@46@05)))
(assert (<= $Perm.No (- (- $k@15@05 $k@46@05) $k@74@05)))
(assert (<= (- (- $k@15@05 $k@46@05) $k@74@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@15@05 $k@46@05) $k@74@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      63
;  :arith-assert-lower      257
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         89
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         134
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               460
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1782
;  :mk-clause               282
;  :num-allocs              4506397
;  :num-checks              608
;  :propagations            152
;  :quant-instantiations    55
;  :rlimit-count            222203)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      63
;  :arith-assert-lower      257
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         89
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         134
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               460
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1782
;  :mk-clause               282
;  :num-allocs              4506397
;  :num-checks              609
;  :propagations            152
;  :quant-instantiations    55
;  :rlimit-count            222214)
(push) ; 7
(assert (not (< $Perm.No (- $k@15@05 $k@46@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      63
;  :arith-assert-lower      257
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         89
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         134
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               460
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1782
;  :mk-clause               282
;  :num-allocs              4506397
;  :num-checks              610
;  :propagations            152
;  :quant-instantiations    55
;  :rlimit-count            222233)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      63
;  :arith-assert-lower      257
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         89
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         134
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               460
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1782
;  :mk-clause               282
;  :num-allocs              4506397
;  :num-checks              611
;  :propagations            152
;  :quant-instantiations    55
;  :rlimit-count            222246)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      63
;  :arith-assert-lower      257
;  :arith-assert-upper      261
;  :arith-bound-prop        1
;  :arith-conflicts         90
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         135
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               461
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1783
;  :mk-clause               282
;  :num-allocs              4506397
;  :num-checks              612
;  :propagations            152
;  :quant-instantiations    55
;  :rlimit-count            222349)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      63
;  :arith-assert-lower      257
;  :arith-assert-upper      261
;  :arith-bound-prop        1
;  :arith-conflicts         90
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         135
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               461
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1783
;  :mk-clause               282
;  :num-allocs              4506397
;  :num-checks              613
;  :propagations            152
;  :quant-instantiations    55
;  :rlimit-count            222360)
(push) ; 7
(assert (not (< $Perm.No (- $k@15@05 $k@46@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      63
;  :arith-assert-lower      257
;  :arith-assert-upper      261
;  :arith-bound-prop        1
;  :arith-conflicts         90
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         135
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               461
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1783
;  :mk-clause               282
;  :num-allocs              4506397
;  :num-checks              614
;  :propagations            152
;  :quant-instantiations    55
;  :rlimit-count            222379)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      63
;  :arith-assert-lower      257
;  :arith-assert-upper      261
;  :arith-bound-prop        1
;  :arith-conflicts         90
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         135
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               462
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1784
;  :mk-clause               282
;  :num-allocs              4506397
;  :num-checks              615
;  :propagations            152
;  :quant-instantiations    55
;  :rlimit-count            222709)
(declare-const $k@75@05 $Perm)
(assert ($Perm.isReadVar $k@75@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      64
;  :arith-assert-lower      259
;  :arith-assert-upper      263
;  :arith-bound-prop        1
;  :arith-conflicts         91
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         136
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               463
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1789
;  :mk-clause               284
;  :num-allocs              4506397
;  :num-checks              616
;  :propagations            153
;  :quant-instantiations    55
;  :rlimit-count            222961)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      64
;  :arith-assert-lower      259
;  :arith-assert-upper      263
;  :arith-bound-prop        1
;  :arith-conflicts         91
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         136
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               463
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1789
;  :mk-clause               284
;  :num-allocs              4506397
;  :num-checks              617
;  :propagations            153
;  :quant-instantiations    55
;  :rlimit-count            222972)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      64
;  :arith-assert-lower      259
;  :arith-assert-upper      263
;  :arith-bound-prop        1
;  :arith-conflicts         91
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         136
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               463
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1789
;  :mk-clause               284
;  :num-allocs              4506397
;  :num-checks              618
;  :propagations            153
;  :quant-instantiations    55
;  :rlimit-count            222993)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@75@05 $Perm.No) (< $Perm.No $k@75@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      64
;  :arith-assert-lower      259
;  :arith-assert-upper      263
;  :arith-bound-prop        1
;  :arith-conflicts         91
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         136
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               464
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1789
;  :mk-clause               284
;  :num-allocs              4506397
;  :num-checks              619
;  :propagations            153
;  :quant-instantiations    55
;  :rlimit-count            223043)
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      64
;  :arith-assert-lower      259
;  :arith-assert-upper      263
;  :arith-bound-prop        1
;  :arith-conflicts         91
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         136
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               464
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1789
;  :mk-clause               284
;  :num-allocs              4506397
;  :num-checks              620
;  :propagations            153
;  :quant-instantiations    55
;  :rlimit-count            223054)
(push) ; 7
(assert (not (not (= $k@41@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      64
;  :arith-assert-lower      259
;  :arith-assert-upper      263
;  :arith-bound-prop        1
;  :arith-conflicts         91
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         136
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               464
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1789
;  :mk-clause               284
;  :num-allocs              4506397
;  :num-checks              621
;  :propagations            153
;  :quant-instantiations    55
;  :rlimit-count            223065)
(assert (< $k@75@05 $k@41@05))
(assert (<= $Perm.No (- $k@41@05 $k@75@05)))
(assert (<= (- $k@41@05 $k@75@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@41@05 $k@75@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      64
;  :arith-assert-lower      261
;  :arith-assert-upper      265
;  :arith-bound-prop        1
;  :arith-conflicts         92
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         137
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               465
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1793
;  :mk-clause               284
;  :num-allocs              4506397
;  :num-checks              622
;  :propagations            153
;  :quant-instantiations    55
;  :rlimit-count            223351)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      64
;  :arith-assert-lower      261
;  :arith-assert-upper      265
;  :arith-bound-prop        1
;  :arith-conflicts         92
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         137
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               465
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1793
;  :mk-clause               284
;  :num-allocs              4506397
;  :num-checks              623
;  :propagations            153
;  :quant-instantiations    55
;  :rlimit-count            223362)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      64
;  :arith-assert-lower      261
;  :arith-assert-upper      265
;  :arith-bound-prop        1
;  :arith-conflicts         92
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         137
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               465
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1793
;  :mk-clause               284
;  :num-allocs              4506397
;  :num-checks              624
;  :propagations            153
;  :quant-instantiations    55
;  :rlimit-count            223383)
(push) ; 7
(assert (not (= diz@5@05 $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      64
;  :arith-assert-lower      261
;  :arith-assert-upper      265
;  :arith-bound-prop        1
;  :arith-conflicts         92
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         137
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               465
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1793
;  :mk-clause               284
;  :num-allocs              4506397
;  :num-checks              625
;  :propagations            153
;  :quant-instantiations    55
;  :rlimit-count            223394)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      64
;  :arith-assert-lower      261
;  :arith-assert-upper      266
;  :arith-bound-prop        1
;  :arith-conflicts         93
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         138
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               466
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1794
;  :mk-clause               284
;  :num-allocs              4506397
;  :num-checks              626
;  :propagations            153
;  :quant-instantiations    55
;  :rlimit-count            223497)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      64
;  :arith-assert-lower      261
;  :arith-assert-upper      267
;  :arith-bound-prop        1
;  :arith-conflicts         94
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         139
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               467
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1795
;  :mk-clause               284
;  :num-allocs              4506397
;  :num-checks              627
;  :propagations            153
;  :quant-instantiations    55
;  :rlimit-count            223600)
(declare-const $k@76@05 $Perm)
(assert ($Perm.isReadVar $k@76@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      65
;  :arith-assert-lower      263
;  :arith-assert-upper      269
;  :arith-bound-prop        1
;  :arith-conflicts         95
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         140
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               468
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1800
;  :mk-clause               286
;  :num-allocs              4506397
;  :num-checks              628
;  :propagations            154
;  :quant-instantiations    55
;  :rlimit-count            223851)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@76@05 $Perm.No) (< $Perm.No $k@76@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      65
;  :arith-assert-lower      263
;  :arith-assert-upper      269
;  :arith-bound-prop        1
;  :arith-conflicts         95
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         140
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               469
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1800
;  :mk-clause               286
;  :num-allocs              4506397
;  :num-checks              629
;  :propagations            154
;  :quant-instantiations    55
;  :rlimit-count            223901)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      65
;  :arith-assert-lower      263
;  :arith-assert-upper      269
;  :arith-bound-prop        1
;  :arith-conflicts         95
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         140
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               470
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1801
;  :mk-clause               286
;  :num-allocs              4506397
;  :num-checks              630
;  :propagations            154
;  :quant-instantiations    55
;  :rlimit-count            223981)
(push) ; 7
(assert (not (not (= $k@38@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          98
;  :arith-assert-diseq      65
;  :arith-assert-lower      263
;  :arith-assert-upper      269
;  :arith-bound-prop        1
;  :arith-conflicts         95
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         140
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               470
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1801
;  :mk-clause               286
;  :num-allocs              4506397
;  :num-checks              631
;  :propagations            154
;  :quant-instantiations    55
;  :rlimit-count            223992)
(assert (< $k@76@05 $k@38@05))
(assert (<= $Perm.No (- $k@38@05 $k@76@05)))
(assert (<= (- $k@38@05 $k@76@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@38@05 $k@76@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          102
;  :arith-assert-diseq      65
;  :arith-assert-lower      265
;  :arith-assert-upper      271
;  :arith-bound-prop        1
;  :arith-conflicts         96
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         141
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            113
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               471
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1805
;  :mk-clause               286
;  :num-allocs              4506397
;  :num-checks              632
;  :propagations            154
;  :quant-instantiations    55
;  :rlimit-count            224337)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          102
;  :arith-assert-diseq      65
;  :arith-assert-lower      265
;  :arith-assert-upper      271
;  :arith-bound-prop        1
;  :arith-conflicts         96
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         141
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            113
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               471
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1805
;  :mk-clause               286
;  :num-allocs              4506397
;  :num-checks              633
;  :propagations            154
;  :quant-instantiations    55
;  :rlimit-count            224348)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3371
;  :arith-add-rows          102
;  :arith-assert-diseq      65
;  :arith-assert-lower      265
;  :arith-assert-upper      271
;  :arith-bound-prop        1
;  :arith-conflicts         96
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         141
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            113
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               471
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 855
;  :datatype-occurs-check   116
;  :datatype-splits         544
;  :decisions               823
;  :del-clause              247
;  :final-checks            68
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1805
;  :mk-clause               286
;  :num-allocs              4506397
;  :num-checks              634
;  :propagations            154
;  :quant-instantiations    55
;  :rlimit-count            224369)
; [eval] 0 <= sys__result
; [eval] sys__result < 16
; [exec]
; inhale false
(pop) ; 6
(push) ; 6
; [else-branch: 22 | divisor__5@32@05 == 0]
(assert (= divisor__5@32@05 0))
(pop) ; 6
; [eval] !(divisor__5 != 0)
; [eval] divisor__5 != 0
(push) ; 6
(assert (not (not (= divisor__5@32@05 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3499
;  :arith-add-rows          119
;  :arith-assert-diseq      65
;  :arith-assert-lower      266
;  :arith-assert-upper      272
;  :arith-bound-prop        1
;  :arith-conflicts         96
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         142
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            130
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               471
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 895
;  :datatype-occurs-check   122
;  :datatype-splits         565
;  :decisions               861
;  :del-clause              274
;  :final-checks            71
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1831
;  :mk-clause               287
;  :num-allocs              4506397
;  :num-checks              635
;  :propagations            156
;  :quant-instantiations    55
;  :rlimit-count            225757
;  :time                    0.00)
(push) ; 6
(assert (not (= divisor__5@32@05 0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3626
;  :arith-add-rows          119
;  :arith-assert-diseq      65
;  :arith-assert-lower      267
;  :arith-assert-upper      273
;  :arith-bound-prop        1
;  :arith-conflicts         96
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         143
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               471
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              275
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1857
;  :mk-clause               288
;  :num-allocs              4506397
;  :num-checks              636
;  :propagations            158
;  :quant-instantiations    55
;  :rlimit-count            226835
;  :time                    0.00)
; [then-branch: 31 | divisor__5@32@05 == 0 | live]
; [else-branch: 31 | divisor__5@32@05 != 0 | live]
(push) ; 6
; [then-branch: 31 | divisor__5@32@05 == 0]
(assert (= divisor__5@32@05 0))
; [exec]
; sys__local__result__3 := 0
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && (true && (true && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__9: Int :: { diz.ALU_m.Main_process_state[i__9] } 0 <= i__9 && i__9 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__9] == -1 || 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|)) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && 0 <= diz.ALU_m.Main_alu.ALU_RESULT && diz.ALU_m.Main_alu.ALU_RESULT <= 16 && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_init, 1 / 2) && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_mon.Monitor_init, 1 / 2) && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu == diz && (0 <= sys__local__result__3 && sys__local__result__3 < 16)
(declare-const $k@77@05 $Perm)
(assert ($Perm.isReadVar $k@77@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@77@05 $Perm.No) (< $Perm.No $k@77@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3627
;  :arith-add-rows          119
;  :arith-assert-diseq      66
;  :arith-assert-lower      269
;  :arith-assert-upper      274
;  :arith-bound-prop        1
;  :arith-conflicts         96
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         143
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               472
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              275
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1862
;  :mk-clause               290
;  :num-allocs              4506397
;  :num-checks              637
;  :propagations            159
;  :quant-instantiations    55
;  :rlimit-count            227069)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3628
;  :arith-add-rows          119
;  :arith-assert-diseq      66
;  :arith-assert-lower      269
;  :arith-assert-upper      275
;  :arith-bound-prop        1
;  :arith-conflicts         97
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         143
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               473
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1864
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              638
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            227170)
(assert (< $k@77@05 (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05))))
(assert (<=
  $Perm.No
  (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@77@05)))
(assert (<=
  (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@77@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@77@05))
  (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3628
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      271
;  :arith-assert-upper      277
;  :arith-bound-prop        1
;  :arith-conflicts         98
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         144
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               474
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1868
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              639
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            227481)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= $t@57@05 $Ref.null))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3629
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      271
;  :arith-assert-upper      277
;  :arith-bound-prop        1
;  :arith-conflicts         98
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         144
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               475
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1869
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              640
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            227529)
(assert (not (= $t@57@05 $Ref.null)))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3630
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      271
;  :arith-assert-upper      278
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         145
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               476
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1871
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              641
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            227687)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3630
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      271
;  :arith-assert-upper      278
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         145
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               477
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1872
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              642
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            227767)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3630
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      271
;  :arith-assert-upper      279
;  :arith-bound-prop        1
;  :arith-conflicts         100
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         146
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               478
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1873
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              643
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            227869)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3630
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      271
;  :arith-assert-upper      279
;  :arith-bound-prop        1
;  :arith-conflicts         100
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         146
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               479
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1874
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              644
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            227949)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3630
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      271
;  :arith-assert-upper      280
;  :arith-bound-prop        1
;  :arith-conflicts         101
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         147
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               480
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1875
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              645
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            228051)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3630
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      271
;  :arith-assert-upper      280
;  :arith-bound-prop        1
;  :arith-conflicts         101
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         147
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               481
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1876
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              646
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            228131)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3630
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      271
;  :arith-assert-upper      281
;  :arith-bound-prop        1
;  :arith-conflicts         102
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         148
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               482
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1877
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              647
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            228233)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3630
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      271
;  :arith-assert-upper      281
;  :arith-bound-prop        1
;  :arith-conflicts         102
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         148
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               483
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1878
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              648
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            228313)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3630
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      271
;  :arith-assert-upper      282
;  :arith-bound-prop        1
;  :arith-conflicts         103
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         149
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               484
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1879
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              649
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            228415)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3630
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      271
;  :arith-assert-upper      282
;  :arith-bound-prop        1
;  :arith-conflicts         103
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         149
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               485
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1880
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              650
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            228495)
; [eval] (forall i__9: Int :: { diz.ALU_m.Main_process_state[i__9] } 0 <= i__9 && i__9 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__9] == -1 || 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|)
(declare-const i__9@78@05 Int)
(push) ; 7
; [eval] 0 <= i__9 && i__9 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__9] == -1 || 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__9 && i__9 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__9
(push) ; 8
; [then-branch: 32 | 0 <= i__9@78@05 | live]
; [else-branch: 32 | !(0 <= i__9@78@05) | live]
(push) ; 9
; [then-branch: 32 | 0 <= i__9@78@05]
(assert (<= 0 i__9@78@05))
; [eval] i__9 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3630
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      272
;  :arith-assert-upper      283
;  :arith-bound-prop        1
;  :arith-conflicts         104
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         150
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               486
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1882
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              651
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            228650)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3630
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      272
;  :arith-assert-upper      283
;  :arith-bound-prop        1
;  :arith-conflicts         104
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         150
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               487
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1883
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              652
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            228730)
(pop) ; 9
(push) ; 9
; [else-branch: 32 | !(0 <= i__9@78@05)]
(assert (not (<= 0 i__9@78@05)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 33 | i__9@78@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__9@78@05 | live]
; [else-branch: 33 | !(i__9@78@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__9@78@05) | live]
(push) ; 9
; [then-branch: 33 | i__9@78@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__9@78@05]
(assert (and
  (<
    i__9@78@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
  (<= 0 i__9@78@05)))
; [eval] diz.ALU_m.Main_process_state[i__9] == -1 || 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__9] == -1
; [eval] diz.ALU_m.Main_process_state[i__9]
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3631
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      273
;  :arith-assert-upper      285
;  :arith-bound-prop        1
;  :arith-conflicts         105
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         152
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               488
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1886
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              653
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            228945)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3631
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      273
;  :arith-assert-upper      285
;  :arith-bound-prop        1
;  :arith-conflicts         105
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         152
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               489
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1887
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              654
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            229025)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__9@78@05 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3631
;  :arith-add-rows          122
;  :arith-assert-diseq      66
;  :arith-assert-lower      273
;  :arith-assert-upper      285
;  :arith-bound-prop        1
;  :arith-conflicts         105
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         152
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               489
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1887
;  :mk-clause               292
;  :num-allocs              4506397
;  :num-checks              655
;  :propagations            160
;  :quant-instantiations    55
;  :rlimit-count            229034)
; [eval] -1
(push) ; 10
; [then-branch: 34 | First:(Second:(Second:(Second:($t@35@05))))[i__9@78@05] == -1 | live]
; [else-branch: 34 | First:(Second:(Second:(Second:($t@35@05))))[i__9@78@05] != -1 | live]
(push) ; 11
; [then-branch: 34 | First:(Second:(Second:(Second:($t@35@05))))[i__9@78@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__9@78@05)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 34 | First:(Second:(Second:(Second:($t@35@05))))[i__9@78@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
      i__9@78@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__9]
; [eval] diz.ALU_m.Main_process_state[i__9]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3633
;  :arith-add-rows          122
;  :arith-assert-diseq      68
;  :arith-assert-lower      276
;  :arith-assert-upper      287
;  :arith-bound-prop        1
;  :arith-conflicts         106
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         153
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               490
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1895
;  :mk-clause               302
;  :num-allocs              4506397
;  :num-checks              656
;  :propagations            165
;  :quant-instantiations    56
;  :rlimit-count            229343)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3633
;  :arith-add-rows          122
;  :arith-assert-diseq      68
;  :arith-assert-lower      276
;  :arith-assert-upper      287
;  :arith-bound-prop        1
;  :arith-conflicts         106
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         153
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               491
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1896
;  :mk-clause               302
;  :num-allocs              4506397
;  :num-checks              657
;  :propagations            165
;  :quant-instantiations    56
;  :rlimit-count            229423)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__9@78@05 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3633
;  :arith-add-rows          122
;  :arith-assert-diseq      68
;  :arith-assert-lower      276
;  :arith-assert-upper      287
;  :arith-bound-prop        1
;  :arith-conflicts         106
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         153
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               491
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1896
;  :mk-clause               302
;  :num-allocs              4506397
;  :num-checks              658
;  :propagations            165
;  :quant-instantiations    56
;  :rlimit-count            229432)
(push) ; 12
; [then-branch: 35 | 0 <= First:(Second:(Second:(Second:($t@35@05))))[i__9@78@05] | live]
; [else-branch: 35 | !(0 <= First:(Second:(Second:(Second:($t@35@05))))[i__9@78@05]) | live]
(push) ; 13
; [then-branch: 35 | 0 <= First:(Second:(Second:(Second:($t@35@05))))[i__9@78@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__9@78@05)))
; [eval] diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__9]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          122
;  :arith-assert-diseq      68
;  :arith-assert-lower      278
;  :arith-assert-upper      289
;  :arith-bound-prop        1
;  :arith-conflicts         107
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         155
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            133
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               492
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1901
;  :mk-clause               302
;  :num-allocs              4506397
;  :num-checks              659
;  :propagations            165
;  :quant-instantiations    56
;  :rlimit-count            229662)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          122
;  :arith-assert-diseq      68
;  :arith-assert-lower      278
;  :arith-assert-upper      289
;  :arith-bound-prop        1
;  :arith-conflicts         107
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         155
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            133
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               493
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1902
;  :mk-clause               302
;  :num-allocs              4506397
;  :num-checks              660
;  :propagations            165
;  :quant-instantiations    56
;  :rlimit-count            229742)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__9@78@05 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          122
;  :arith-assert-diseq      68
;  :arith-assert-lower      278
;  :arith-assert-upper      289
;  :arith-bound-prop        1
;  :arith-conflicts         107
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         155
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            133
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               493
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1902
;  :mk-clause               302
;  :num-allocs              4506397
;  :num-checks              661
;  :propagations            165
;  :quant-instantiations    56
;  :rlimit-count            229751)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          122
;  :arith-assert-diseq      68
;  :arith-assert-lower      278
;  :arith-assert-upper      290
;  :arith-bound-prop        1
;  :arith-conflicts         108
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         156
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            133
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               494
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1903
;  :mk-clause               302
;  :num-allocs              4506397
;  :num-checks              662
;  :propagations            165
;  :quant-instantiations    56
;  :rlimit-count            229853)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          122
;  :arith-assert-diseq      68
;  :arith-assert-lower      278
;  :arith-assert-upper      290
;  :arith-bound-prop        1
;  :arith-conflicts         108
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         156
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            133
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               495
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              277
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1904
;  :mk-clause               302
;  :num-allocs              4506397
;  :num-checks              663
;  :propagations            165
;  :quant-instantiations    56
;  :rlimit-count            229933)
(pop) ; 13
(push) ; 13
; [else-branch: 35 | !(0 <= First:(Second:(Second:(Second:($t@35@05))))[i__9@78@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
      i__9@78@05))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 33 | !(i__9@78@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__9@78@05)]
(assert (not
  (and
    (<
      i__9@78@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
    (<= 0 i__9@78@05))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__9@78@05 Int)) (!
  (implies
    (and
      (<
        i__9@78@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
      (<= 0 i__9@78@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
          i__9@78@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__9@78@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__9@78@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__9@78@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          122
;  :arith-assert-diseq      70
;  :arith-assert-lower      279
;  :arith-assert-upper      291
;  :arith-bound-prop        1
;  :arith-conflicts         108
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         157
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            134
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               496
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1912
;  :mk-clause               316
;  :num-allocs              4506397
;  :num-checks              664
;  :propagations            167
;  :quant-instantiations    57
;  :rlimit-count            230382)
(assert (forall ((i__9@78@05 Int)) (!
  (implies
    (and
      (<
        i__9@78@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
      (<= 0 i__9@78@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
          i__9@78@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__9@78@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__9@78@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__9@78@05))
  :qid |prog.l<no position>|)))
(declare-const $k@79@05 $Perm)
(assert ($Perm.isReadVar $k@79@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          122
;  :arith-assert-diseq      71
;  :arith-assert-lower      281
;  :arith-assert-upper      293
;  :arith-bound-prop        1
;  :arith-conflicts         109
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         158
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            134
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               497
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1918
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              665
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            230994)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@79@05 $Perm.No) (< $Perm.No $k@79@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          122
;  :arith-assert-diseq      71
;  :arith-assert-lower      281
;  :arith-assert-upper      293
;  :arith-bound-prop        1
;  :arith-conflicts         109
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         158
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            134
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               498
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1918
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              666
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231044)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          122
;  :arith-assert-diseq      71
;  :arith-assert-lower      281
;  :arith-assert-upper      293
;  :arith-bound-prop        1
;  :arith-conflicts         109
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         158
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            134
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               498
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1918
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              667
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231055)
(push) ; 7
(assert (not (not (= (- (+ $k@13@05 $k@17@05) $k@44@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          122
;  :arith-assert-diseq      71
;  :arith-assert-lower      281
;  :arith-assert-upper      293
;  :arith-bound-prop        1
;  :arith-conflicts         109
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         158
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            134
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               499
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1919
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              668
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231129)
(assert (< $k@79@05 (- (+ $k@13@05 $k@17@05) $k@44@05)))
(assert (<= $Perm.No (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@79@05)))
(assert (<= (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@79@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@79@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      295
;  :arith-bound-prop        1
;  :arith-conflicts         110
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         159
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               500
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1923
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              669
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231425)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      295
;  :arith-bound-prop        1
;  :arith-conflicts         110
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         159
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               500
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1923
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              670
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231436)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      295
;  :arith-bound-prop        1
;  :arith-conflicts         110
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         159
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               500
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1923
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              671
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231457)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      296
;  :arith-bound-prop        1
;  :arith-conflicts         111
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         160
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               501
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1924
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              672
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231559)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      296
;  :arith-bound-prop        1
;  :arith-conflicts         111
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         160
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               501
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1924
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              673
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231570)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      296
;  :arith-bound-prop        1
;  :arith-conflicts         111
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         160
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               501
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1924
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              674
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231591)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      296
;  :arith-bound-prop        1
;  :arith-conflicts         111
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         160
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               501
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1924
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              675
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231602)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      297
;  :arith-bound-prop        1
;  :arith-conflicts         112
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         161
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               502
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1925
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              676
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231704)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      297
;  :arith-bound-prop        1
;  :arith-conflicts         112
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         161
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               502
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1925
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              677
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231715)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      297
;  :arith-bound-prop        1
;  :arith-conflicts         112
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         161
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               502
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1925
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              678
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231736)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      297
;  :arith-bound-prop        1
;  :arith-conflicts         112
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         161
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               502
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1925
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              679
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231747)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      298
;  :arith-bound-prop        1
;  :arith-conflicts         113
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         162
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               503
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1926
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              680
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231849)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      298
;  :arith-bound-prop        1
;  :arith-conflicts         113
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         162
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               503
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1926
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              681
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231860)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      298
;  :arith-bound-prop        1
;  :arith-conflicts         113
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         162
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               503
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1926
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              682
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231881)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      298
;  :arith-bound-prop        1
;  :arith-conflicts         113
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         162
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               503
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1926
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              683
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231892)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      299
;  :arith-bound-prop        1
;  :arith-conflicts         114
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         163
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               504
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1927
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              684
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            231994)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      299
;  :arith-bound-prop        1
;  :arith-conflicts         114
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         163
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               504
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1927
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              685
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232005)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      299
;  :arith-bound-prop        1
;  :arith-conflicts         114
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         163
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               504
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1927
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              686
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232026)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      299
;  :arith-bound-prop        1
;  :arith-conflicts         114
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         163
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               504
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1927
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              687
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232037)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      300
;  :arith-bound-prop        1
;  :arith-conflicts         115
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         164
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               505
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1928
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              688
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232139)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      300
;  :arith-bound-prop        1
;  :arith-conflicts         115
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         164
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               505
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1928
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              689
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232150)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      300
;  :arith-bound-prop        1
;  :arith-conflicts         115
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         164
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               505
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1928
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              690
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232171)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      300
;  :arith-bound-prop        1
;  :arith-conflicts         115
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         164
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               505
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1928
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              691
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232182)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      301
;  :arith-bound-prop        1
;  :arith-conflicts         116
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         165
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               506
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1929
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              692
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232284)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      301
;  :arith-bound-prop        1
;  :arith-conflicts         116
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         165
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               506
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1929
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              693
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232295)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      301
;  :arith-bound-prop        1
;  :arith-conflicts         116
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         165
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               506
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1929
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              694
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232316)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      301
;  :arith-bound-prop        1
;  :arith-conflicts         116
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         165
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               506
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1929
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              695
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232327)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      302
;  :arith-bound-prop        1
;  :arith-conflicts         117
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         166
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               507
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1930
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              696
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232429)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      302
;  :arith-bound-prop        1
;  :arith-conflicts         117
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         166
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               507
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1930
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              697
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232440)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      302
;  :arith-bound-prop        1
;  :arith-conflicts         117
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         166
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               507
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1930
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              698
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232461)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      302
;  :arith-bound-prop        1
;  :arith-conflicts         117
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         166
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               507
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1930
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              699
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232472)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      303
;  :arith-bound-prop        1
;  :arith-conflicts         118
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         167
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               508
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1931
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              700
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232574)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      303
;  :arith-bound-prop        1
;  :arith-conflicts         118
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         167
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               508
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1931
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              701
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232585)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      303
;  :arith-bound-prop        1
;  :arith-conflicts         118
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         167
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               508
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1931
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              702
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232606)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      71
;  :arith-assert-lower      283
;  :arith-assert-upper      303
;  :arith-bound-prop        1
;  :arith-conflicts         118
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         167
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               508
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1931
;  :mk-clause               318
;  :num-allocs              4506397
;  :num-checks              703
;  :propagations            168
;  :quant-instantiations    57
;  :rlimit-count            232617)
(declare-const $k@80@05 $Perm)
(assert ($Perm.isReadVar $k@80@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      72
;  :arith-assert-lower      285
;  :arith-assert-upper      305
;  :arith-bound-prop        1
;  :arith-conflicts         119
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         168
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               509
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1936
;  :mk-clause               320
;  :num-allocs              4506397
;  :num-checks              704
;  :propagations            169
;  :quant-instantiations    57
;  :rlimit-count            232868)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@80@05 $Perm.No) (< $Perm.No $k@80@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      72
;  :arith-assert-lower      285
;  :arith-assert-upper      305
;  :arith-bound-prop        1
;  :arith-conflicts         119
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         168
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               510
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1936
;  :mk-clause               320
;  :num-allocs              4506397
;  :num-checks              705
;  :propagations            169
;  :quant-instantiations    57
;  :rlimit-count            232918)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      72
;  :arith-assert-lower      285
;  :arith-assert-upper      305
;  :arith-bound-prop        1
;  :arith-conflicts         119
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         168
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               510
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1936
;  :mk-clause               320
;  :num-allocs              4506397
;  :num-checks              706
;  :propagations            169
;  :quant-instantiations    57
;  :rlimit-count            232929)
(push) ; 7
(assert (not (not (= (- $k@14@05 $k@45@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          123
;  :arith-assert-diseq      72
;  :arith-assert-lower      285
;  :arith-assert-upper      305
;  :arith-bound-prop        1
;  :arith-conflicts         119
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         168
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               511
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1937
;  :mk-clause               320
;  :num-allocs              4506397
;  :num-checks              707
;  :propagations            169
;  :quant-instantiations    57
;  :rlimit-count            232997)
(assert (< $k@80@05 (- $k@14@05 $k@45@05)))
(assert (<= $Perm.No (- (- $k@14@05 $k@45@05) $k@80@05)))
(assert (<= (- (- $k@14@05 $k@45@05) $k@80@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@14@05 $k@45@05) $k@80@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          124
;  :arith-assert-diseq      72
;  :arith-assert-lower      287
;  :arith-assert-upper      307
;  :arith-bound-prop        1
;  :arith-conflicts         120
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         169
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               512
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1941
;  :mk-clause               320
;  :num-allocs              4506397
;  :num-checks              708
;  :propagations            169
;  :quant-instantiations    57
;  :rlimit-count            233280)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          124
;  :arith-assert-diseq      72
;  :arith-assert-lower      287
;  :arith-assert-upper      307
;  :arith-bound-prop        1
;  :arith-conflicts         120
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         169
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               512
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1941
;  :mk-clause               320
;  :num-allocs              4506397
;  :num-checks              709
;  :propagations            169
;  :quant-instantiations    57
;  :rlimit-count            233291)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          124
;  :arith-assert-diseq      72
;  :arith-assert-lower      287
;  :arith-assert-upper      307
;  :arith-bound-prop        1
;  :arith-conflicts         120
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         169
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               512
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1941
;  :mk-clause               320
;  :num-allocs              4506397
;  :num-checks              710
;  :propagations            169
;  :quant-instantiations    57
;  :rlimit-count            233310)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          124
;  :arith-assert-diseq      72
;  :arith-assert-lower      287
;  :arith-assert-upper      307
;  :arith-bound-prop        1
;  :arith-conflicts         120
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         169
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               512
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1941
;  :mk-clause               320
;  :num-allocs              4506397
;  :num-checks              711
;  :propagations            169
;  :quant-instantiations    57
;  :rlimit-count            233323)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          124
;  :arith-assert-diseq      72
;  :arith-assert-lower      287
;  :arith-assert-upper      308
;  :arith-bound-prop        1
;  :arith-conflicts         121
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         170
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               513
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1942
;  :mk-clause               320
;  :num-allocs              4506397
;  :num-checks              712
;  :propagations            169
;  :quant-instantiations    57
;  :rlimit-count            233425)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          124
;  :arith-assert-diseq      72
;  :arith-assert-lower      287
;  :arith-assert-upper      308
;  :arith-bound-prop        1
;  :arith-conflicts         121
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         170
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               513
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1942
;  :mk-clause               320
;  :num-allocs              4506397
;  :num-checks              713
;  :propagations            169
;  :quant-instantiations    57
;  :rlimit-count            233436)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          124
;  :arith-assert-diseq      72
;  :arith-assert-lower      287
;  :arith-assert-upper      308
;  :arith-bound-prop        1
;  :arith-conflicts         121
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         170
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               513
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 935
;  :datatype-occurs-check   128
;  :datatype-splits         586
;  :decisions               899
;  :del-clause              301
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1942
;  :mk-clause               320
;  :num-allocs              4506397
;  :num-checks              714
;  :propagations            169
;  :quant-instantiations    57
;  :rlimit-count            233455)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3809
;  :arith-add-rows          124
;  :arith-assert-diseq      72
;  :arith-assert-lower      289
;  :arith-assert-upper      310
;  :arith-bound-prop        1
;  :arith-conflicts         121
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         172
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            139
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               514
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 996
;  :datatype-occurs-check   136
;  :datatype-splits         627
;  :decisions               956
;  :del-clause              304
;  :final-checks            78
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1994
;  :mk-clause               323
;  :num-allocs              4506397
;  :num-checks              715
;  :propagations            171
;  :quant-instantiations    57
;  :rlimit-count            235253
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 7
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4061
;  :arith-add-rows          124
;  :arith-assert-diseq      72
;  :arith-assert-lower      291
;  :arith-assert-upper      312
;  :arith-bound-prop        1
;  :arith-conflicts         121
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         174
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            143
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               514
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2043
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              718
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            237335)
(declare-const $t@81@05 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4061
;  :arith-add-rows          124
;  :arith-assert-diseq      72
;  :arith-assert-lower      291
;  :arith-assert-upper      312
;  :arith-bound-prop        1
;  :arith-conflicts         121
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         174
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            143
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               515
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2043
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              719
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            237407)
(declare-const $t@82@05 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4061
;  :arith-add-rows          124
;  :arith-assert-diseq      72
;  :arith-assert-lower      291
;  :arith-assert-upper      312
;  :arith-bound-prop        1
;  :arith-conflicts         121
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         174
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            143
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               516
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2043
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              720
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            237479)
(declare-const $t@83@05 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4061
;  :arith-add-rows          124
;  :arith-assert-diseq      72
;  :arith-assert-lower      291
;  :arith-assert-upper      312
;  :arith-bound-prop        1
;  :arith-conflicts         121
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         174
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            143
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               517
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2044
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              721
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            237559)
(declare-const $t@84@05 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@77@05))
    (= $t@81@05 $t@57@05))
  (implies
    (< $Perm.No $k@41@05)
    (=
      $t@81@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- $k@14@05 $k@45@05) $k@80@05))
    (=
      $t@82@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@39@05)
    (=
      $t@82@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@79@05))
    (= $t@83@05 $t@18@05))
  (implies
    (< $Perm.No $k@38@05)
    (=
      $t@83@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@40@05)
    (=
      $t@84@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@15@05 $k@46@05))
    (=
      $t@84@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (+
    (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@77@05)
    $k@41@05)))
(assert (<=
  (+
    (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@77@05)
    $k@41@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@77@05)
      $k@41@05))
  (not (= diz@5@05 $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@14@05 $k@45@05) $k@80@05) $k@39@05)))
(assert (<= (+ (- (- $k@14@05 $k@45@05) $k@80@05) $k@39@05) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@14@05 $k@45@05) $k@80@05) $k@39@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (<= $Perm.No (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@79@05) $k@38@05)))
(assert (<= (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@79@05) $k@38@05) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@79@05) $k@38@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (<= $Perm.No (+ $k@40@05 (- $k@15@05 $k@46@05))))
(assert (<= (+ $k@40@05 (- $k@15@05 $k@46@05)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@40@05 (- $k@15@05 $k@46@05)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      316
;  :arith-bound-prop        1
;  :arith-conflicts         121
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         174
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               518
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2059
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              722
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            239340)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      317
;  :arith-bound-prop        1
;  :arith-conflicts         122
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         175
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               519
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2060
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              723
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            239443)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      317
;  :arith-bound-prop        1
;  :arith-conflicts         122
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         175
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               519
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2060
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              724
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            239454)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      317
;  :arith-bound-prop        1
;  :arith-conflicts         122
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         175
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               519
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2060
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              725
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            239473)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      317
;  :arith-bound-prop        1
;  :arith-conflicts         122
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         175
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               520
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2061
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              726
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            239733)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      318
;  :arith-bound-prop        1
;  :arith-conflicts         123
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         176
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               521
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2062
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              727
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            239836)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      318
;  :arith-bound-prop        1
;  :arith-conflicts         123
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         176
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               521
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2062
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              728
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            239847)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      318
;  :arith-bound-prop        1
;  :arith-conflicts         123
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         176
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               521
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2062
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              729
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            239866)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      318
;  :arith-bound-prop        1
;  :arith-conflicts         123
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         176
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               522
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2063
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              730
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            240126)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      319
;  :arith-bound-prop        1
;  :arith-conflicts         124
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         177
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               523
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2064
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              731
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            240229)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      319
;  :arith-bound-prop        1
;  :arith-conflicts         124
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         177
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               523
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2064
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              732
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            240240)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      319
;  :arith-bound-prop        1
;  :arith-conflicts         124
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         177
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               523
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2064
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              733
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            240259)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      319
;  :arith-bound-prop        1
;  :arith-conflicts         124
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         177
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               524
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2065
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              734
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            240519)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      320
;  :arith-bound-prop        1
;  :arith-conflicts         125
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         178
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               525
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2066
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              735
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            240622)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      320
;  :arith-bound-prop        1
;  :arith-conflicts         125
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         178
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               525
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2066
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              736
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            240633)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      320
;  :arith-bound-prop        1
;  :arith-conflicts         125
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         178
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               525
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2066
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              737
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            240652)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      72
;  :arith-assert-lower      295
;  :arith-assert-upper      320
;  :arith-bound-prop        1
;  :arith-conflicts         125
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         178
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               526
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2067
;  :mk-clause               328
;  :num-allocs              4506397
;  :num-checks              738
;  :propagations            177
;  :quant-instantiations    57
;  :rlimit-count            240912)
(declare-const $k@85@05 $Perm)
(assert ($Perm.isReadVar $k@85@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      73
;  :arith-assert-lower      297
;  :arith-assert-upper      322
;  :arith-bound-prop        1
;  :arith-conflicts         126
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         179
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               527
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2072
;  :mk-clause               330
;  :num-allocs              4506397
;  :num-checks              739
;  :propagations            178
;  :quant-instantiations    57
;  :rlimit-count            241164)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@85@05 $Perm.No) (< $Perm.No $k@85@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      73
;  :arith-assert-lower      297
;  :arith-assert-upper      322
;  :arith-bound-prop        1
;  :arith-conflicts         126
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         179
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               528
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2072
;  :mk-clause               330
;  :num-allocs              4506397
;  :num-checks              740
;  :propagations            178
;  :quant-instantiations    57
;  :rlimit-count            241214)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4071
;  :arith-add-rows          131
;  :arith-assert-diseq      73
;  :arith-assert-lower      297
;  :arith-assert-upper      322
;  :arith-bound-prop        1
;  :arith-conflicts         126
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         179
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               529
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              315
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2073
;  :mk-clause               330
;  :num-allocs              4506397
;  :num-checks              741
;  :propagations            178
;  :quant-instantiations    57
;  :rlimit-count            241294)
(push) ; 7
(assert (not (not (= (+ $k@40@05 (- $k@15@05 $k@46@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          132
;  :arith-assert-diseq      73
;  :arith-assert-lower      297
;  :arith-assert-upper      323
;  :arith-bound-prop        1
;  :arith-conflicts         127
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         179
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               530
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2075
;  :mk-clause               332
;  :num-allocs              4506397
;  :num-checks              742
;  :propagations            179
;  :quant-instantiations    57
;  :rlimit-count            241400)
(assert (< $k@85@05 (+ $k@40@05 (- $k@15@05 $k@46@05))))
(assert (<= $Perm.No (- (+ $k@40@05 (- $k@15@05 $k@46@05)) $k@85@05)))
(assert (<= (- (+ $k@40@05 (- $k@15@05 $k@46@05)) $k@85@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@40@05 (- $k@15@05 $k@46@05)) $k@85@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          133
;  :arith-assert-diseq      73
;  :arith-assert-lower      299
;  :arith-assert-upper      325
;  :arith-bound-prop        1
;  :arith-conflicts         128
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         180
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               531
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2079
;  :mk-clause               332
;  :num-allocs              4506397
;  :num-checks              743
;  :propagations            179
;  :quant-instantiations    57
;  :rlimit-count            241690)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          133
;  :arith-assert-diseq      73
;  :arith-assert-lower      299
;  :arith-assert-upper      325
;  :arith-bound-prop        1
;  :arith-conflicts         128
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         180
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               531
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2079
;  :mk-clause               332
;  :num-allocs              4506397
;  :num-checks              744
;  :propagations            179
;  :quant-instantiations    57
;  :rlimit-count            241701)
(push) ; 7
(assert (not (< $Perm.No (- $k@15@05 $k@46@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          133
;  :arith-assert-diseq      73
;  :arith-assert-lower      299
;  :arith-assert-upper      325
;  :arith-bound-prop        1
;  :arith-conflicts         128
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         180
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               531
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2079
;  :mk-clause               332
;  :num-allocs              4506397
;  :num-checks              745
;  :propagations            179
;  :quant-instantiations    57
;  :rlimit-count            241720)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          133
;  :arith-assert-diseq      73
;  :arith-assert-lower      299
;  :arith-assert-upper      325
;  :arith-bound-prop        1
;  :arith-conflicts         128
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         180
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               531
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2079
;  :mk-clause               332
;  :num-allocs              4506397
;  :num-checks              746
;  :propagations            179
;  :quant-instantiations    57
;  :rlimit-count            241733)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          133
;  :arith-assert-diseq      73
;  :arith-assert-lower      299
;  :arith-assert-upper      326
;  :arith-bound-prop        1
;  :arith-conflicts         129
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         181
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               532
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2080
;  :mk-clause               332
;  :num-allocs              4506397
;  :num-checks              747
;  :propagations            179
;  :quant-instantiations    57
;  :rlimit-count            241836)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          133
;  :arith-assert-diseq      73
;  :arith-assert-lower      299
;  :arith-assert-upper      326
;  :arith-bound-prop        1
;  :arith-conflicts         129
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         181
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               532
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2080
;  :mk-clause               332
;  :num-allocs              4506397
;  :num-checks              748
;  :propagations            179
;  :quant-instantiations    57
;  :rlimit-count            241847)
(push) ; 7
(assert (not (< $Perm.No (- $k@15@05 $k@46@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          133
;  :arith-assert-diseq      73
;  :arith-assert-lower      299
;  :arith-assert-upper      326
;  :arith-bound-prop        1
;  :arith-conflicts         129
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         181
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               532
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2080
;  :mk-clause               332
;  :num-allocs              4506397
;  :num-checks              749
;  :propagations            179
;  :quant-instantiations    57
;  :rlimit-count            241866)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          133
;  :arith-assert-diseq      73
;  :arith-assert-lower      299
;  :arith-assert-upper      326
;  :arith-bound-prop        1
;  :arith-conflicts         129
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         181
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               533
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2081
;  :mk-clause               332
;  :num-allocs              4506397
;  :num-checks              750
;  :propagations            179
;  :quant-instantiations    57
;  :rlimit-count            242196)
(declare-const $k@86@05 $Perm)
(assert ($Perm.isReadVar $k@86@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          133
;  :arith-assert-diseq      74
;  :arith-assert-lower      301
;  :arith-assert-upper      328
;  :arith-bound-prop        1
;  :arith-conflicts         130
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         182
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               534
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2086
;  :mk-clause               334
;  :num-allocs              4506397
;  :num-checks              751
;  :propagations            180
;  :quant-instantiations    57
;  :rlimit-count            242448)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          133
;  :arith-assert-diseq      74
;  :arith-assert-lower      301
;  :arith-assert-upper      328
;  :arith-bound-prop        1
;  :arith-conflicts         130
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         182
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               534
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2086
;  :mk-clause               334
;  :num-allocs              4506397
;  :num-checks              752
;  :propagations            180
;  :quant-instantiations    57
;  :rlimit-count            242459)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          133
;  :arith-assert-diseq      74
;  :arith-assert-lower      301
;  :arith-assert-upper      328
;  :arith-bound-prop        1
;  :arith-conflicts         130
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         182
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               534
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2086
;  :mk-clause               334
;  :num-allocs              4506397
;  :num-checks              753
;  :propagations            180
;  :quant-instantiations    57
;  :rlimit-count            242480)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@86@05 $Perm.No) (< $Perm.No $k@86@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          133
;  :arith-assert-diseq      74
;  :arith-assert-lower      301
;  :arith-assert-upper      328
;  :arith-bound-prop        1
;  :arith-conflicts         130
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         182
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               535
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2086
;  :mk-clause               334
;  :num-allocs              4506397
;  :num-checks              754
;  :propagations            180
;  :quant-instantiations    57
;  :rlimit-count            242530)
(set-option :timeout 10)
(push) ; 7
(assert (not (= diz@5@05 $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4072
;  :arith-add-rows          133
;  :arith-assert-diseq      74
;  :arith-assert-lower      301
;  :arith-assert-upper      328
;  :arith-bound-prop        1
;  :arith-conflicts         130
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         182
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               535
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              317
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2086
;  :mk-clause               334
;  :num-allocs              4506397
;  :num-checks              755
;  :propagations            180
;  :quant-instantiations    57
;  :rlimit-count            242541)
(push) ; 7
(assert (not (not
  (=
    (+
      (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@77@05)
      $k@41@05)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4073
;  :arith-add-rows          136
;  :arith-assert-diseq      74
;  :arith-assert-lower      301
;  :arith-assert-upper      329
;  :arith-bound-prop        1
;  :arith-conflicts         131
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         182
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            148
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               536
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              319
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2088
;  :mk-clause               336
;  :num-allocs              4506397
;  :num-checks              756
;  :propagations            181
;  :quant-instantiations    57
;  :rlimit-count            242732)
(assert (<
  $k@86@05
  (+
    (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@77@05)
    $k@41@05)))
(assert (<=
  $Perm.No
  (-
    (+
      (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@77@05)
      $k@41@05)
    $k@86@05)))
(assert (<=
  (-
    (+
      (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@77@05)
      $k@41@05)
    $k@86@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@77@05)
        $k@41@05)
      $k@86@05))
  (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4073
;  :arith-add-rows          142
;  :arith-assert-diseq      74
;  :arith-assert-lower      303
;  :arith-assert-upper      331
;  :arith-bound-prop        1
;  :arith-conflicts         132
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         183
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            149
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               537
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              319
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2092
;  :mk-clause               336
;  :num-allocs              4506397
;  :num-checks              757
;  :propagations            181
;  :quant-instantiations    57
;  :rlimit-count            243115)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4073
;  :arith-add-rows          142
;  :arith-assert-diseq      74
;  :arith-assert-lower      303
;  :arith-assert-upper      331
;  :arith-bound-prop        1
;  :arith-conflicts         132
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         183
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            149
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               537
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              319
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2092
;  :mk-clause               336
;  :num-allocs              4506397
;  :num-checks              758
;  :propagations            181
;  :quant-instantiations    57
;  :rlimit-count            243126)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4073
;  :arith-add-rows          142
;  :arith-assert-diseq      74
;  :arith-assert-lower      303
;  :arith-assert-upper      331
;  :arith-bound-prop        1
;  :arith-conflicts         132
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         183
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            149
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               537
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              319
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2092
;  :mk-clause               336
;  :num-allocs              4506397
;  :num-checks              759
;  :propagations            181
;  :quant-instantiations    57
;  :rlimit-count            243147)
(push) ; 7
(assert (not (= diz@5@05 $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4073
;  :arith-add-rows          142
;  :arith-assert-diseq      74
;  :arith-assert-lower      303
;  :arith-assert-upper      331
;  :arith-bound-prop        1
;  :arith-conflicts         132
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         183
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            149
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               537
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              319
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2092
;  :mk-clause               336
;  :num-allocs              4506397
;  :num-checks              760
;  :propagations            181
;  :quant-instantiations    57
;  :rlimit-count            243158)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4073
;  :arith-add-rows          142
;  :arith-assert-diseq      74
;  :arith-assert-lower      303
;  :arith-assert-upper      332
;  :arith-bound-prop        1
;  :arith-conflicts         133
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         184
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            149
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               538
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              319
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2093
;  :mk-clause               336
;  :num-allocs              4506397
;  :num-checks              761
;  :propagations            181
;  :quant-instantiations    57
;  :rlimit-count            243261)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4073
;  :arith-add-rows          142
;  :arith-assert-diseq      74
;  :arith-assert-lower      303
;  :arith-assert-upper      333
;  :arith-bound-prop        1
;  :arith-conflicts         134
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         185
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            149
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               539
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              319
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2094
;  :mk-clause               336
;  :num-allocs              4506397
;  :num-checks              762
;  :propagations            181
;  :quant-instantiations    57
;  :rlimit-count            243364)
(declare-const $k@87@05 $Perm)
(assert ($Perm.isReadVar $k@87@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4073
;  :arith-add-rows          142
;  :arith-assert-diseq      75
;  :arith-assert-lower      305
;  :arith-assert-upper      335
;  :arith-bound-prop        1
;  :arith-conflicts         135
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         186
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            149
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               540
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              319
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2099
;  :mk-clause               338
;  :num-allocs              4506397
;  :num-checks              763
;  :propagations            182
;  :quant-instantiations    57
;  :rlimit-count            243615)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@87@05 $Perm.No) (< $Perm.No $k@87@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4073
;  :arith-add-rows          142
;  :arith-assert-diseq      75
;  :arith-assert-lower      305
;  :arith-assert-upper      335
;  :arith-bound-prop        1
;  :arith-conflicts         135
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         186
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            149
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               541
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              319
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2099
;  :mk-clause               338
;  :num-allocs              4506397
;  :num-checks              764
;  :propagations            182
;  :quant-instantiations    57
;  :rlimit-count            243665)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4073
;  :arith-add-rows          142
;  :arith-assert-diseq      75
;  :arith-assert-lower      305
;  :arith-assert-upper      335
;  :arith-bound-prop        1
;  :arith-conflicts         135
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         186
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            149
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               541
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              319
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2099
;  :mk-clause               338
;  :num-allocs              4506397
;  :num-checks              765
;  :propagations            182
;  :quant-instantiations    57
;  :rlimit-count            243676)
(push) ; 7
(assert (not (not (= (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@79@05) $k@38@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4074
;  :arith-add-rows          142
;  :arith-assert-diseq      75
;  :arith-assert-lower      305
;  :arith-assert-upper      336
;  :arith-bound-prop        1
;  :arith-conflicts         136
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         186
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            150
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               542
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              321
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2101
;  :mk-clause               340
;  :num-allocs              4506397
;  :num-checks              766
;  :propagations            183
;  :quant-instantiations    57
;  :rlimit-count            243782)
(assert (< $k@87@05 (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@79@05) $k@38@05)))
(assert (<=
  $Perm.No
  (- (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@79@05) $k@38@05) $k@87@05)))
(assert (<=
  (- (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@79@05) $k@38@05) $k@87@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@79@05) $k@38@05) $k@87@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4074
;  :arith-add-rows          145
;  :arith-assert-diseq      75
;  :arith-assert-lower      307
;  :arith-assert-upper      338
;  :arith-bound-prop        1
;  :arith-conflicts         137
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         187
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               543
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              321
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2105
;  :mk-clause               340
;  :num-allocs              4506397
;  :num-checks              767
;  :propagations            183
;  :quant-instantiations    57
;  :rlimit-count            244102)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4074
;  :arith-add-rows          145
;  :arith-assert-diseq      75
;  :arith-assert-lower      307
;  :arith-assert-upper      338
;  :arith-bound-prop        1
;  :arith-conflicts         137
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         187
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               543
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              321
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2105
;  :mk-clause               340
;  :num-allocs              4506397
;  :num-checks              768
;  :propagations            183
;  :quant-instantiations    57
;  :rlimit-count            244113)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4074
;  :arith-add-rows          145
;  :arith-assert-diseq      75
;  :arith-assert-lower      307
;  :arith-assert-upper      338
;  :arith-bound-prop        1
;  :arith-conflicts         137
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         187
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               543
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              321
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2105
;  :mk-clause               340
;  :num-allocs              4506397
;  :num-checks              769
;  :propagations            183
;  :quant-instantiations    57
;  :rlimit-count            244134)
; [eval] 0 <= sys__local__result__3
; [eval] sys__local__result__3 < 16
; [exec]
; label __return_get_bit
; [exec]
; sys__result := sys__local__result__3
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__10: Int :: { diz.ALU_m.Main_process_state[i__10] } 0 <= i__10 && i__10 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__10] == -1 || 0 <= diz.ALU_m.Main_process_state[i__10] && diz.ALU_m.Main_process_state[i__10] < |diz.ALU_m.Main_event_state|) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && 0 <= diz.ALU_m.Main_alu.ALU_RESULT && diz.ALU_m.Main_alu.ALU_RESULT <= 16 && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_init, 1 / 2) && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_mon.Monitor_init, 1 / 2) && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu == diz && (0 <= sys__result && sys__result < 16)
(declare-const $k@88@05 $Perm)
(assert ($Perm.isReadVar $k@88@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@88@05 $Perm.No) (< $Perm.No $k@88@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4074
;  :arith-add-rows          145
;  :arith-assert-diseq      76
;  :arith-assert-lower      309
;  :arith-assert-upper      339
;  :arith-bound-prop        1
;  :arith-conflicts         137
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         187
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               544
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              321
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2109
;  :mk-clause               342
;  :num-allocs              4506397
;  :num-checks              770
;  :propagations            184
;  :quant-instantiations    57
;  :rlimit-count            244333)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          145
;  :arith-assert-diseq      76
;  :arith-assert-lower      309
;  :arith-assert-upper      340
;  :arith-bound-prop        1
;  :arith-conflicts         138
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         187
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               545
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2111
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              771
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            244436)
(assert (< $k@88@05 (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05))))
(assert (<=
  $Perm.No
  (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@88@05)))
(assert (<=
  (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@88@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)) $k@88@05))
  (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      311
;  :arith-assert-upper      342
;  :arith-bound-prop        1
;  :arith-conflicts         139
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         188
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               546
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2115
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              772
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            244749)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      311
;  :arith-assert-upper      343
;  :arith-bound-prop        1
;  :arith-conflicts         140
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         189
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               547
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2116
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              773
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            244853)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      311
;  :arith-assert-upper      343
;  :arith-bound-prop        1
;  :arith-conflicts         140
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         189
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               548
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2117
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              774
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            244933)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      311
;  :arith-assert-upper      344
;  :arith-bound-prop        1
;  :arith-conflicts         141
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         190
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               549
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2118
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              775
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            245037)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      311
;  :arith-assert-upper      344
;  :arith-bound-prop        1
;  :arith-conflicts         141
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         190
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               550
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2119
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              776
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            245117)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      311
;  :arith-assert-upper      345
;  :arith-bound-prop        1
;  :arith-conflicts         142
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         191
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               551
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2120
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              777
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            245221)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      311
;  :arith-assert-upper      345
;  :arith-bound-prop        1
;  :arith-conflicts         142
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         191
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               552
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2121
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              778
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            245301)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      311
;  :arith-assert-upper      346
;  :arith-bound-prop        1
;  :arith-conflicts         143
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         192
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               553
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2122
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              779
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            245405)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      311
;  :arith-assert-upper      346
;  :arith-bound-prop        1
;  :arith-conflicts         143
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         192
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               554
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2123
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              780
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            245485)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      311
;  :arith-assert-upper      347
;  :arith-bound-prop        1
;  :arith-conflicts         144
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         193
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               555
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2124
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              781
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            245589)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      311
;  :arith-assert-upper      347
;  :arith-bound-prop        1
;  :arith-conflicts         144
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         193
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               556
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2125
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              782
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            245669)
; [eval] (forall i__10: Int :: { diz.ALU_m.Main_process_state[i__10] } 0 <= i__10 && i__10 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__10] == -1 || 0 <= diz.ALU_m.Main_process_state[i__10] && diz.ALU_m.Main_process_state[i__10] < |diz.ALU_m.Main_event_state|)
(declare-const i__10@89@05 Int)
(push) ; 7
; [eval] 0 <= i__10 && i__10 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__10] == -1 || 0 <= diz.ALU_m.Main_process_state[i__10] && diz.ALU_m.Main_process_state[i__10] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__10 && i__10 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__10
(push) ; 8
; [then-branch: 36 | 0 <= i__10@89@05 | live]
; [else-branch: 36 | !(0 <= i__10@89@05) | live]
(push) ; 9
; [then-branch: 36 | 0 <= i__10@89@05]
(assert (<= 0 i__10@89@05))
; [eval] i__10 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      312
;  :arith-assert-upper      348
;  :arith-bound-prop        1
;  :arith-conflicts         145
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         194
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               557
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2127
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              783
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            245826)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      312
;  :arith-assert-upper      348
;  :arith-bound-prop        1
;  :arith-conflicts         145
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         194
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               558
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2128
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              784
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            245906)
(pop) ; 9
(push) ; 9
; [else-branch: 36 | !(0 <= i__10@89@05)]
(assert (not (<= 0 i__10@89@05)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 37 | i__10@89@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__10@89@05 | live]
; [else-branch: 37 | !(i__10@89@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__10@89@05) | live]
(push) ; 9
; [then-branch: 37 | i__10@89@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__10@89@05]
(assert (and
  (<
    i__10@89@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
  (<= 0 i__10@89@05)))
; [eval] diz.ALU_m.Main_process_state[i__10] == -1 || 0 <= diz.ALU_m.Main_process_state[i__10] && diz.ALU_m.Main_process_state[i__10] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__10] == -1
; [eval] diz.ALU_m.Main_process_state[i__10]
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4076
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      313
;  :arith-assert-upper      350
;  :arith-bound-prop        1
;  :arith-conflicts         146
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         196
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               559
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2131
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              785
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            246123)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4076
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      313
;  :arith-assert-upper      350
;  :arith-bound-prop        1
;  :arith-conflicts         146
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         196
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               560
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2132
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              786
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            246203)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__10@89@05 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4076
;  :arith-add-rows          148
;  :arith-assert-diseq      76
;  :arith-assert-lower      313
;  :arith-assert-upper      350
;  :arith-bound-prop        1
;  :arith-conflicts         146
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         196
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               560
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2132
;  :mk-clause               344
;  :num-allocs              4506397
;  :num-checks              787
;  :propagations            185
;  :quant-instantiations    57
;  :rlimit-count            246212)
; [eval] -1
(push) ; 10
; [then-branch: 38 | First:(Second:(Second:(Second:($t@35@05))))[i__10@89@05] == -1 | live]
; [else-branch: 38 | First:(Second:(Second:(Second:($t@35@05))))[i__10@89@05] != -1 | live]
(push) ; 11
; [then-branch: 38 | First:(Second:(Second:(Second:($t@35@05))))[i__10@89@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__10@89@05)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 38 | First:(Second:(Second:(Second:($t@35@05))))[i__10@89@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
      i__10@89@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__10] && diz.ALU_m.Main_process_state[i__10] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__10]
; [eval] diz.ALU_m.Main_process_state[i__10]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4078
;  :arith-add-rows          148
;  :arith-assert-diseq      78
;  :arith-assert-lower      316
;  :arith-assert-upper      352
;  :arith-bound-prop        1
;  :arith-conflicts         147
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         197
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               561
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2140
;  :mk-clause               355
;  :num-allocs              4506397
;  :num-checks              788
;  :propagations            190
;  :quant-instantiations    59
;  :rlimit-count            246549)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4078
;  :arith-add-rows          148
;  :arith-assert-diseq      78
;  :arith-assert-lower      316
;  :arith-assert-upper      352
;  :arith-bound-prop        1
;  :arith-conflicts         147
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         197
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               562
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2141
;  :mk-clause               355
;  :num-allocs              4506397
;  :num-checks              789
;  :propagations            190
;  :quant-instantiations    59
;  :rlimit-count            246629)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__10@89@05 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4078
;  :arith-add-rows          148
;  :arith-assert-diseq      78
;  :arith-assert-lower      316
;  :arith-assert-upper      352
;  :arith-bound-prop        1
;  :arith-conflicts         147
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         197
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               562
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2141
;  :mk-clause               355
;  :num-allocs              4506397
;  :num-checks              790
;  :propagations            190
;  :quant-instantiations    59
;  :rlimit-count            246638)
(push) ; 12
; [then-branch: 39 | 0 <= First:(Second:(Second:(Second:($t@35@05))))[i__10@89@05] | live]
; [else-branch: 39 | !(0 <= First:(Second:(Second:(Second:($t@35@05))))[i__10@89@05]) | live]
(push) ; 13
; [then-branch: 39 | 0 <= First:(Second:(Second:(Second:($t@35@05))))[i__10@89@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__10@89@05)))
; [eval] diz.ALU_m.Main_process_state[i__10] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__10]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          148
;  :arith-assert-diseq      78
;  :arith-assert-lower      318
;  :arith-assert-upper      354
;  :arith-bound-prop        1
;  :arith-conflicts         148
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         199
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            153
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               563
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2146
;  :mk-clause               355
;  :num-allocs              4506397
;  :num-checks              791
;  :propagations            190
;  :quant-instantiations    59
;  :rlimit-count            246874)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          148
;  :arith-assert-diseq      78
;  :arith-assert-lower      318
;  :arith-assert-upper      354
;  :arith-bound-prop        1
;  :arith-conflicts         148
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         199
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            153
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               564
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2147
;  :mk-clause               355
;  :num-allocs              4506397
;  :num-checks              792
;  :propagations            190
;  :quant-instantiations    59
;  :rlimit-count            246954)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__10@89@05 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          148
;  :arith-assert-diseq      78
;  :arith-assert-lower      318
;  :arith-assert-upper      354
;  :arith-bound-prop        1
;  :arith-conflicts         148
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         199
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            153
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               564
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2147
;  :mk-clause               355
;  :num-allocs              4506397
;  :num-checks              793
;  :propagations            190
;  :quant-instantiations    59
;  :rlimit-count            246963)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          148
;  :arith-assert-diseq      78
;  :arith-assert-lower      318
;  :arith-assert-upper      355
;  :arith-bound-prop        1
;  :arith-conflicts         149
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         200
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            153
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               565
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2148
;  :mk-clause               355
;  :num-allocs              4506397
;  :num-checks              794
;  :propagations            190
;  :quant-instantiations    59
;  :rlimit-count            247067)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          148
;  :arith-assert-diseq      78
;  :arith-assert-lower      318
;  :arith-assert-upper      355
;  :arith-bound-prop        1
;  :arith-conflicts         149
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         200
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            153
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               566
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              323
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2149
;  :mk-clause               355
;  :num-allocs              4506397
;  :num-checks              795
;  :propagations            190
;  :quant-instantiations    59
;  :rlimit-count            247147)
(pop) ; 13
(push) ; 13
; [else-branch: 39 | !(0 <= First:(Second:(Second:(Second:($t@35@05))))[i__10@89@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
      i__10@89@05))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 37 | !(i__10@89@05 < |First:(Second:(Second:(Second:($t@35@05))))| && 0 <= i__10@89@05)]
(assert (not
  (and
    (<
      i__10@89@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
    (<= 0 i__10@89@05))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__10@89@05 Int)) (!
  (implies
    (and
      (<
        i__10@89@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
      (<= 0 i__10@89@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
          i__10@89@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__10@89@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__10@89@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__10@89@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          148
;  :arith-assert-diseq      79
;  :arith-assert-lower      319
;  :arith-assert-upper      356
;  :arith-bound-prop        1
;  :arith-conflicts         149
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         201
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            154
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               567
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2157
;  :mk-clause               367
;  :num-allocs              4506397
;  :num-checks              796
;  :propagations            192
;  :quant-instantiations    61
;  :rlimit-count            247621)
(assert (forall ((i__10@89@05 Int)) (!
  (implies
    (and
      (<
        i__10@89@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))
      (<= 0 i__10@89@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
          i__10@89@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__10@89@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
            i__10@89@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))
    i__10@89@05))
  :qid |prog.l<no position>|)))
(declare-const $k@90@05 $Perm)
(assert ($Perm.isReadVar $k@90@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          148
;  :arith-assert-diseq      80
;  :arith-assert-lower      321
;  :arith-assert-upper      358
;  :arith-bound-prop        1
;  :arith-conflicts         150
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         202
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            154
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               568
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2163
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              797
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248235)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@90@05 $Perm.No) (< $Perm.No $k@90@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          148
;  :arith-assert-diseq      80
;  :arith-assert-lower      321
;  :arith-assert-upper      358
;  :arith-bound-prop        1
;  :arith-conflicts         150
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         202
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            154
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               569
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2163
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              798
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248285)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          148
;  :arith-assert-diseq      80
;  :arith-assert-lower      321
;  :arith-assert-upper      358
;  :arith-bound-prop        1
;  :arith-conflicts         150
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         202
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            154
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               569
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2163
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              799
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248296)
(push) ; 7
(assert (not (not (= (- (+ $k@13@05 $k@17@05) $k@44@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          148
;  :arith-assert-diseq      80
;  :arith-assert-lower      321
;  :arith-assert-upper      358
;  :arith-bound-prop        1
;  :arith-conflicts         150
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         202
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            154
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               570
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2164
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              800
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248370)
(assert (< $k@90@05 (- (+ $k@13@05 $k@17@05) $k@44@05)))
(assert (<= $Perm.No (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@90@05)))
(assert (<= (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@90@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@13@05 $k@17@05) $k@44@05) $k@90@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      360
;  :arith-bound-prop        1
;  :arith-conflicts         151
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         203
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               571
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2168
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              801
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248668)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      360
;  :arith-bound-prop        1
;  :arith-conflicts         151
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         203
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               571
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2168
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              802
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248679)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      360
;  :arith-bound-prop        1
;  :arith-conflicts         151
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         203
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               571
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2168
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              803
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248700)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      361
;  :arith-bound-prop        1
;  :arith-conflicts         152
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         204
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               572
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2169
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              804
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248804)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      361
;  :arith-bound-prop        1
;  :arith-conflicts         152
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         204
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               572
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2169
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              805
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248815)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      361
;  :arith-bound-prop        1
;  :arith-conflicts         152
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         204
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               572
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2169
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              806
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248836)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      361
;  :arith-bound-prop        1
;  :arith-conflicts         152
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         204
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               572
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2169
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              807
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248847)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      362
;  :arith-bound-prop        1
;  :arith-conflicts         153
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         205
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               573
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2170
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              808
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248951)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      362
;  :arith-bound-prop        1
;  :arith-conflicts         153
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         205
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               573
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2170
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              809
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248962)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      362
;  :arith-bound-prop        1
;  :arith-conflicts         153
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         205
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               573
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2170
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              810
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248983)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      362
;  :arith-bound-prop        1
;  :arith-conflicts         153
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         205
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               573
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2170
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              811
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            248994)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      363
;  :arith-bound-prop        1
;  :arith-conflicts         154
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         206
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               574
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2171
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              812
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249098)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      363
;  :arith-bound-prop        1
;  :arith-conflicts         154
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         206
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               574
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2171
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              813
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249109)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      363
;  :arith-bound-prop        1
;  :arith-conflicts         154
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         206
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               574
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2171
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              814
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249130)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      363
;  :arith-bound-prop        1
;  :arith-conflicts         154
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         206
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               574
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2171
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              815
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249141)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      364
;  :arith-bound-prop        1
;  :arith-conflicts         155
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         207
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               575
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2172
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              816
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249245)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      364
;  :arith-bound-prop        1
;  :arith-conflicts         155
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         207
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               575
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2172
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              817
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249256)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      364
;  :arith-bound-prop        1
;  :arith-conflicts         155
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         207
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               575
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2172
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              818
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249277)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      364
;  :arith-bound-prop        1
;  :arith-conflicts         155
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         207
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               575
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2172
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              819
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249288)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      365
;  :arith-bound-prop        1
;  :arith-conflicts         156
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         208
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               576
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2173
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              820
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249392)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      365
;  :arith-bound-prop        1
;  :arith-conflicts         156
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         208
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               576
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2173
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              821
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249403)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      365
;  :arith-bound-prop        1
;  :arith-conflicts         156
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         208
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               576
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2173
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              822
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249424)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      365
;  :arith-bound-prop        1
;  :arith-conflicts         156
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         208
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               576
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2173
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              823
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249435)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      366
;  :arith-bound-prop        1
;  :arith-conflicts         157
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         209
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               577
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2174
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              824
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249539)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      366
;  :arith-bound-prop        1
;  :arith-conflicts         157
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         209
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               577
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2174
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              825
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249550)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      366
;  :arith-bound-prop        1
;  :arith-conflicts         157
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         209
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               577
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2174
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              826
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249571)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      366
;  :arith-bound-prop        1
;  :arith-conflicts         157
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         209
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               577
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2174
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              827
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249582)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      367
;  :arith-bound-prop        1
;  :arith-conflicts         158
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         210
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               578
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2175
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              828
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249686)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      367
;  :arith-bound-prop        1
;  :arith-conflicts         158
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         210
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               578
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2175
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              829
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249697)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      367
;  :arith-bound-prop        1
;  :arith-conflicts         158
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         210
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               578
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2175
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              830
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249718)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      367
;  :arith-bound-prop        1
;  :arith-conflicts         158
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         210
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               578
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2175
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              831
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249729)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      368
;  :arith-bound-prop        1
;  :arith-conflicts         159
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         211
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               579
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2176
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              832
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249833)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      368
;  :arith-bound-prop        1
;  :arith-conflicts         159
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         211
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               579
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2176
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              833
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249844)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      368
;  :arith-bound-prop        1
;  :arith-conflicts         159
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         211
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               579
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2176
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              834
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249865)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      80
;  :arith-assert-lower      323
;  :arith-assert-upper      368
;  :arith-bound-prop        1
;  :arith-conflicts         159
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         211
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               579
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2176
;  :mk-clause               369
;  :num-allocs              4506397
;  :num-checks              835
;  :propagations            193
;  :quant-instantiations    61
;  :rlimit-count            249876)
(declare-const $k@91@05 $Perm)
(assert ($Perm.isReadVar $k@91@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      81
;  :arith-assert-lower      325
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         160
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         212
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               580
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2181
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              836
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            250128)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@91@05 $Perm.No) (< $Perm.No $k@91@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      81
;  :arith-assert-lower      325
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         160
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         212
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               581
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2181
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              837
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            250178)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      81
;  :arith-assert-lower      325
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         160
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         212
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               581
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2181
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              838
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            250189)
(push) ; 7
(assert (not (not (= (- $k@14@05 $k@45@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          149
;  :arith-assert-diseq      81
;  :arith-assert-lower      325
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         160
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         212
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               582
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2182
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              839
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            250257)
(assert (< $k@91@05 (- $k@14@05 $k@45@05)))
(assert (<= $Perm.No (- (- $k@14@05 $k@45@05) $k@91@05)))
(assert (<= (- (- $k@14@05 $k@45@05) $k@91@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@14@05 $k@45@05) $k@91@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      372
;  :arith-bound-prop        1
;  :arith-conflicts         161
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         213
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               583
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2186
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              840
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            250548)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      372
;  :arith-bound-prop        1
;  :arith-conflicts         161
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         213
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               583
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2186
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              841
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            250559)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      372
;  :arith-bound-prop        1
;  :arith-conflicts         161
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         213
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               583
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2186
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              842
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            250578)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      372
;  :arith-bound-prop        1
;  :arith-conflicts         161
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         213
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               583
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2186
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              843
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            250591)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      373
;  :arith-bound-prop        1
;  :arith-conflicts         162
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         214
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               584
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2187
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              844
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            250695)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      373
;  :arith-bound-prop        1
;  :arith-conflicts         162
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         214
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               584
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2187
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              845
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            250706)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      373
;  :arith-bound-prop        1
;  :arith-conflicts         162
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         214
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               584
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2187
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              846
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            250725)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      373
;  :arith-bound-prop        1
;  :arith-conflicts         162
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         214
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               585
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2188
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              847
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            250985)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      374
;  :arith-bound-prop        1
;  :arith-conflicts         163
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         215
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               586
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2189
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              848
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            251089)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      374
;  :arith-bound-prop        1
;  :arith-conflicts         163
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         215
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               586
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2189
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              849
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            251100)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      374
;  :arith-bound-prop        1
;  :arith-conflicts         163
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         215
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               586
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2189
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              850
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            251119)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      374
;  :arith-bound-prop        1
;  :arith-conflicts         163
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         215
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               587
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2190
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              851
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            251379)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      375
;  :arith-bound-prop        1
;  :arith-conflicts         164
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         216
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               588
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2191
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              852
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            251483)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      375
;  :arith-bound-prop        1
;  :arith-conflicts         164
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         216
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               588
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2191
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              853
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            251494)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      375
;  :arith-bound-prop        1
;  :arith-conflicts         164
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         216
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               588
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2191
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              854
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            251513)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      375
;  :arith-bound-prop        1
;  :arith-conflicts         164
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         216
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               589
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2192
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              855
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            251773)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         165
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         217
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               590
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2193
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              856
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            251877)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         165
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         217
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               590
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2193
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              857
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            251888)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         165
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         217
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               590
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2193
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              858
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            251907)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         165
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         217
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               591
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2194
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              859
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            252167)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      377
;  :arith-bound-prop        1
;  :arith-conflicts         166
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         218
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               592
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2195
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              860
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            252271)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      377
;  :arith-bound-prop        1
;  :arith-conflicts         166
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         218
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               592
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2195
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              861
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            252282)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@45@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      377
;  :arith-bound-prop        1
;  :arith-conflicts         166
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         218
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               592
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2195
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              862
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            252301)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      81
;  :arith-assert-lower      327
;  :arith-assert-upper      377
;  :arith-bound-prop        1
;  :arith-conflicts         166
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         218
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               593
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2196
;  :mk-clause               371
;  :num-allocs              4506397
;  :num-checks              863
;  :propagations            194
;  :quant-instantiations    61
;  :rlimit-count            252561)
(declare-const $k@92@05 $Perm)
(assert ($Perm.isReadVar $k@92@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      82
;  :arith-assert-lower      329
;  :arith-assert-upper      379
;  :arith-bound-prop        1
;  :arith-conflicts         167
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         219
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               594
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2201
;  :mk-clause               373
;  :num-allocs              4506397
;  :num-checks              864
;  :propagations            195
;  :quant-instantiations    61
;  :rlimit-count            252813)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@92@05 $Perm.No) (< $Perm.No $k@92@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      82
;  :arith-assert-lower      329
;  :arith-assert-upper      379
;  :arith-bound-prop        1
;  :arith-conflicts         167
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         219
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               595
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2201
;  :mk-clause               373
;  :num-allocs              4506397
;  :num-checks              865
;  :propagations            195
;  :quant-instantiations    61
;  :rlimit-count            252863)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      82
;  :arith-assert-lower      329
;  :arith-assert-upper      379
;  :arith-bound-prop        1
;  :arith-conflicts         167
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         219
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               595
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2201
;  :mk-clause               373
;  :num-allocs              4506397
;  :num-checks              866
;  :propagations            195
;  :quant-instantiations    61
;  :rlimit-count            252874)
(push) ; 7
(assert (not (not (= (- $k@15@05 $k@46@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          150
;  :arith-assert-diseq      82
;  :arith-assert-lower      329
;  :arith-assert-upper      379
;  :arith-bound-prop        1
;  :arith-conflicts         167
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         219
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               596
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2202
;  :mk-clause               373
;  :num-allocs              4506397
;  :num-checks              867
;  :propagations            195
;  :quant-instantiations    61
;  :rlimit-count            252942)
(assert (< $k@92@05 (- $k@15@05 $k@46@05)))
(assert (<= $Perm.No (- (- $k@15@05 $k@46@05) $k@92@05)))
(assert (<= (- (- $k@15@05 $k@46@05) $k@92@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@15@05 $k@46@05) $k@92@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      82
;  :arith-assert-lower      331
;  :arith-assert-upper      381
;  :arith-bound-prop        1
;  :arith-conflicts         168
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         220
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               597
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2206
;  :mk-clause               373
;  :num-allocs              4506397
;  :num-checks              868
;  :propagations            195
;  :quant-instantiations    61
;  :rlimit-count            253234)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      82
;  :arith-assert-lower      331
;  :arith-assert-upper      381
;  :arith-bound-prop        1
;  :arith-conflicts         168
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         220
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               597
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2206
;  :mk-clause               373
;  :num-allocs              4506397
;  :num-checks              869
;  :propagations            195
;  :quant-instantiations    61
;  :rlimit-count            253245)
(push) ; 7
(assert (not (< $Perm.No (- $k@15@05 $k@46@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      82
;  :arith-assert-lower      331
;  :arith-assert-upper      381
;  :arith-bound-prop        1
;  :arith-conflicts         168
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         220
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               597
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2206
;  :mk-clause               373
;  :num-allocs              4506397
;  :num-checks              870
;  :propagations            195
;  :quant-instantiations    61
;  :rlimit-count            253264)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      82
;  :arith-assert-lower      331
;  :arith-assert-upper      381
;  :arith-bound-prop        1
;  :arith-conflicts         168
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         220
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               597
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2206
;  :mk-clause               373
;  :num-allocs              4506397
;  :num-checks              871
;  :propagations            195
;  :quant-instantiations    61
;  :rlimit-count            253277)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      82
;  :arith-assert-lower      331
;  :arith-assert-upper      382
;  :arith-bound-prop        1
;  :arith-conflicts         169
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         221
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               598
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2207
;  :mk-clause               373
;  :num-allocs              4506397
;  :num-checks              872
;  :propagations            195
;  :quant-instantiations    61
;  :rlimit-count            253381)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      82
;  :arith-assert-lower      331
;  :arith-assert-upper      382
;  :arith-bound-prop        1
;  :arith-conflicts         169
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         221
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               598
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2207
;  :mk-clause               373
;  :num-allocs              4506397
;  :num-checks              873
;  :propagations            195
;  :quant-instantiations    61
;  :rlimit-count            253392)
(push) ; 7
(assert (not (< $Perm.No (- $k@15@05 $k@46@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      82
;  :arith-assert-lower      331
;  :arith-assert-upper      382
;  :arith-bound-prop        1
;  :arith-conflicts         169
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         221
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               598
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2207
;  :mk-clause               373
;  :num-allocs              4506397
;  :num-checks              874
;  :propagations            195
;  :quant-instantiations    61
;  :rlimit-count            253411)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05)))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      82
;  :arith-assert-lower      331
;  :arith-assert-upper      382
;  :arith-bound-prop        1
;  :arith-conflicts         169
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         221
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               599
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2208
;  :mk-clause               373
;  :num-allocs              4506397
;  :num-checks              875
;  :propagations            195
;  :quant-instantiations    61
;  :rlimit-count            253741)
(declare-const $k@93@05 $Perm)
(assert ($Perm.isReadVar $k@93@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      83
;  :arith-assert-lower      333
;  :arith-assert-upper      384
;  :arith-bound-prop        1
;  :arith-conflicts         170
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         222
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               600
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2213
;  :mk-clause               375
;  :num-allocs              4506397
;  :num-checks              876
;  :propagations            196
;  :quant-instantiations    61
;  :rlimit-count            253993)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      83
;  :arith-assert-lower      333
;  :arith-assert-upper      384
;  :arith-bound-prop        1
;  :arith-conflicts         170
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         222
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               600
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2213
;  :mk-clause               375
;  :num-allocs              4506397
;  :num-checks              877
;  :propagations            196
;  :quant-instantiations    61
;  :rlimit-count            254004)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      83
;  :arith-assert-lower      333
;  :arith-assert-upper      384
;  :arith-bound-prop        1
;  :arith-conflicts         170
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         222
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               600
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2213
;  :mk-clause               375
;  :num-allocs              4506397
;  :num-checks              878
;  :propagations            196
;  :quant-instantiations    61
;  :rlimit-count            254025)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@93@05 $Perm.No) (< $Perm.No $k@93@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      83
;  :arith-assert-lower      333
;  :arith-assert-upper      384
;  :arith-bound-prop        1
;  :arith-conflicts         170
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         222
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               601
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2213
;  :mk-clause               375
;  :num-allocs              4506397
;  :num-checks              879
;  :propagations            196
;  :quant-instantiations    61
;  :rlimit-count            254075)
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
  $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      83
;  :arith-assert-lower      333
;  :arith-assert-upper      384
;  :arith-bound-prop        1
;  :arith-conflicts         170
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         222
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               601
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2213
;  :mk-clause               375
;  :num-allocs              4506397
;  :num-checks              880
;  :propagations            196
;  :quant-instantiations    61
;  :rlimit-count            254086)
(push) ; 7
(assert (not (not (= $k@41@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          151
;  :arith-assert-diseq      83
;  :arith-assert-lower      333
;  :arith-assert-upper      384
;  :arith-bound-prop        1
;  :arith-conflicts         170
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         222
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            157
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               601
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2213
;  :mk-clause               375
;  :num-allocs              4506397
;  :num-checks              881
;  :propagations            196
;  :quant-instantiations    61
;  :rlimit-count            254097)
(assert (< $k@93@05 $k@41@05))
(assert (<= $Perm.No (- $k@41@05 $k@93@05)))
(assert (<= (- $k@41@05 $k@93@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@41@05 $k@93@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@05))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          154
;  :arith-assert-diseq      83
;  :arith-assert-lower      335
;  :arith-assert-upper      386
;  :arith-bound-prop        1
;  :arith-conflicts         171
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         223
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               602
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2217
;  :mk-clause               375
;  :num-allocs              4506397
;  :num-checks              882
;  :propagations            196
;  :quant-instantiations    61
;  :rlimit-count            254436)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          154
;  :arith-assert-diseq      83
;  :arith-assert-lower      335
;  :arith-assert-upper      386
;  :arith-bound-prop        1
;  :arith-conflicts         171
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         223
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               602
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2217
;  :mk-clause               375
;  :num-allocs              4506397
;  :num-checks              883
;  :propagations            196
;  :quant-instantiations    61
;  :rlimit-count            254447)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          154
;  :arith-assert-diseq      83
;  :arith-assert-lower      335
;  :arith-assert-upper      386
;  :arith-bound-prop        1
;  :arith-conflicts         171
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         223
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               602
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2217
;  :mk-clause               375
;  :num-allocs              4506397
;  :num-checks              884
;  :propagations            196
;  :quant-instantiations    61
;  :rlimit-count            254468)
(push) ; 7
(assert (not (= diz@5@05 $t@18@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          154
;  :arith-assert-diseq      83
;  :arith-assert-lower      335
;  :arith-assert-upper      386
;  :arith-bound-prop        1
;  :arith-conflicts         171
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         223
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               602
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2217
;  :mk-clause               375
;  :num-allocs              4506397
;  :num-checks              885
;  :propagations            196
;  :quant-instantiations    61
;  :rlimit-count            254479)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          154
;  :arith-assert-diseq      83
;  :arith-assert-lower      335
;  :arith-assert-upper      387
;  :arith-bound-prop        1
;  :arith-conflicts         172
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         224
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               603
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2218
;  :mk-clause               375
;  :num-allocs              4506397
;  :num-checks              886
;  :propagations            196
;  :quant-instantiations    61
;  :rlimit-count            254582)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          154
;  :arith-assert-diseq      83
;  :arith-assert-lower      335
;  :arith-assert-upper      388
;  :arith-bound-prop        1
;  :arith-conflicts         173
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         225
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               604
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2219
;  :mk-clause               375
;  :num-allocs              4506397
;  :num-checks              887
;  :propagations            196
;  :quant-instantiations    61
;  :rlimit-count            254685)
(declare-const $k@94@05 $Perm)
(assert ($Perm.isReadVar $k@94@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          154
;  :arith-assert-diseq      84
;  :arith-assert-lower      337
;  :arith-assert-upper      390
;  :arith-bound-prop        1
;  :arith-conflicts         174
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         226
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               605
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2224
;  :mk-clause               377
;  :num-allocs              4506397
;  :num-checks              888
;  :propagations            197
;  :quant-instantiations    61
;  :rlimit-count            254937)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@94@05 $Perm.No) (< $Perm.No $k@94@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          154
;  :arith-assert-diseq      84
;  :arith-assert-lower      337
;  :arith-assert-upper      390
;  :arith-bound-prop        1
;  :arith-conflicts         174
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         226
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               606
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2224
;  :mk-clause               377
;  :num-allocs              4506397
;  :num-checks              889
;  :propagations            197
;  :quant-instantiations    61
;  :rlimit-count            254987)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          154
;  :arith-assert-diseq      84
;  :arith-assert-lower      337
;  :arith-assert-upper      390
;  :arith-bound-prop        1
;  :arith-conflicts         174
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         226
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               607
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2225
;  :mk-clause               377
;  :num-allocs              4506397
;  :num-checks              890
;  :propagations            197
;  :quant-instantiations    61
;  :rlimit-count            255067)
(push) ; 7
(assert (not (not (= $k@38@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          154
;  :arith-assert-diseq      84
;  :arith-assert-lower      337
;  :arith-assert-upper      390
;  :arith-bound-prop        1
;  :arith-conflicts         174
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         226
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               607
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2225
;  :mk-clause               377
;  :num-allocs              4506397
;  :num-checks              891
;  :propagations            197
;  :quant-instantiations    61
;  :rlimit-count            255078)
(assert (< $k@94@05 $k@38@05))
(assert (<= $Perm.No (- $k@38@05 $k@94@05)))
(assert (<= (- $k@38@05 $k@94@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@38@05 $k@94@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@05)) $Ref.null))))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@36@05 (- $k@16@05 $k@47@05)) (- $k@11@05 $k@42@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          155
;  :arith-assert-diseq      84
;  :arith-assert-lower      339
;  :arith-assert-upper      392
;  :arith-bound-prop        1
;  :arith-conflicts         175
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         227
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               608
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2229
;  :mk-clause               377
;  :num-allocs              4506397
;  :num-checks              892
;  :propagations            197
;  :quant-instantiations    61
;  :rlimit-count            255342)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@57@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          155
;  :arith-assert-diseq      84
;  :arith-assert-lower      339
;  :arith-assert-upper      392
;  :arith-bound-prop        1
;  :arith-conflicts         175
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         227
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               608
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2229
;  :mk-clause               377
;  :num-allocs              4506397
;  :num-checks              893
;  :propagations            197
;  :quant-instantiations    61
;  :rlimit-count            255353)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@13@05 $k@17@05) $k@44@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          155
;  :arith-assert-diseq      84
;  :arith-assert-lower      339
;  :arith-assert-upper      392
;  :arith-bound-prop        1
;  :arith-conflicts         175
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         227
;  :arith-grobner           18
;  :arith-max-min           42
;  :arith-nonlinear-horner  7
;  :arith-offset-eqs        8
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  6
;  :binary-propagations     16
;  :conflicts               608
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 1075
;  :datatype-occurs-check   148
;  :datatype-splits         668
;  :decisions               1032
;  :del-clause              346
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2229
;  :mk-clause               377
;  :num-allocs              4506397
;  :num-checks              894
;  :propagations            197
;  :quant-instantiations    61
;  :rlimit-count            255374)
; [eval] 0 <= sys__result
; [eval] sys__result < 16
; [exec]
; inhale false
(pop) ; 6
(push) ; 6
; [else-branch: 31 | divisor__5@32@05 != 0]
(assert (not (= divisor__5@32@05 0)))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 21 | i__4@34@05 < pos@8@05]
(assert (< i__4@34@05 pos@8@05))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
