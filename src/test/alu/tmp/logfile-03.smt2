(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-15 15:44:38
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-const class_ALU<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Driver<TYPE> TYPE)
(declare-const class_Monitor<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [ALU_m: Ref]
(declare-fun $FVF.domain_ALU_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_ALU_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_ALU_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_ALU_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_ALU_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_ALU_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Driver_m: Ref]
(declare-fun $FVF.domain_Driver_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Driver_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Driver_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Driver_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Driver_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Driver_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Monitor_m: Ref]
(declare-fun $FVF.domain_Monitor_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Monitor_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Monitor_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Monitor_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Monitor_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Monitor_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Driver_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Driver_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Monitor_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Monitor_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_ALU<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Driver<TYPE> class_Monitor<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_ALU<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Driver<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Monitor<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [ALU_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_ALU_m vs) ($FVF.domain_ALU_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_ALU_m vs))
            (= ($FVF.lookup_ALU_m vs x) ($FVF.lookup_ALU_m ws x)))
          :pattern (($FVF.lookup_ALU_m vs x) ($FVF.lookup_ALU_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_ALU_m pm r))
    :pattern ($FVF.perm_ALU_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_ALU_m f r) true)
    :pattern ($FVF.loc_ALU_m f r))))
; /field_value_functions_axioms.smt2 [Driver_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Driver_m vs) ($FVF.domain_Driver_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Driver_m vs))
            (= ($FVF.lookup_Driver_m vs x) ($FVF.lookup_Driver_m ws x)))
          :pattern (($FVF.lookup_Driver_m vs x) ($FVF.lookup_Driver_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Driver_m pm r))
    :pattern ($FVF.perm_Driver_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Driver_m f r) true)
    :pattern ($FVF.loc_Driver_m f r))))
; /field_value_functions_axioms.smt2 [Monitor_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Monitor_m vs) ($FVF.domain_Monitor_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Monitor_m vs))
            (= ($FVF.lookup_Monitor_m vs x) ($FVF.lookup_Monitor_m ws x)))
          :pattern (($FVF.lookup_Monitor_m vs x) ($FVF.lookup_Monitor_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Monitor_m pm r))
    :pattern ($FVF.perm_Monitor_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Monitor_m f r) true)
    :pattern ($FVF.loc_Monitor_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 2))
    (and
      (and
        (or
          (< (Seq_index vals@8@00 0) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 0)))
        (or
          (< (Seq_index vals@8@00 1) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 1))))
      (and
        (implies
          (and
            (< (Seq_index vals@8@00 0) (- 0 1))
            (< (Seq_index vals@8@00 1) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (<= (- 0 1) (Seq_index vals@8@00 0))
            (<= (- 0 1) (Seq_index vals@8@00 1)))
          (or
            (and
              (<= (- 0 1) (Seq_index vals@8@00 0))
              (= result@9@00 (Seq_index vals@8@00 0)))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 1))
              (= result@9@00 (Seq_index vals@8@00 1)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- ALU_set_bit_EncodedGlobalVariables_Integer_Integer_Integer ----------
(declare-const diz@0@03 $Ref)
(declare-const globals@1@03 $Ref)
(declare-const value@2@03 Int)
(declare-const pos@3@03 Int)
(declare-const bit@4@03 Int)
(declare-const sys__result@5@03 Int)
(declare-const diz@6@03 $Ref)
(declare-const globals@7@03 $Ref)
(declare-const value@8@03 Int)
(declare-const pos@9@03 Int)
(declare-const bit@10@03 Int)
(declare-const sys__result@11@03 Int)
(push) ; 1
(declare-const $t@12@03 $Snap)
(assert (= $t@12@03 ($Snap.combine ($Snap.first $t@12@03) ($Snap.second $t@12@03))))
(assert (= ($Snap.first $t@12@03) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@6@03 $Ref.null)))
(assert (=
  ($Snap.second $t@12@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@12@03))
    ($Snap.second ($Snap.second $t@12@03)))))
(declare-const $k@13@03 $Perm)
(assert ($Perm.isReadVar $k@13@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@13@03 $Perm.No) (< $Perm.No $k@13@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            17
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   2
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            1
;  :datatype-accessor-ax 3
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          264
;  :mk-clause            3
;  :num-allocs           3508183
;  :num-checks           1
;  :propagations         17
;  :quant-instantiations 1
;  :rlimit-count         111756)
(assert (<= $Perm.No $k@13@03))
(assert (<= $k@13@03 $Perm.Write))
(assert (implies (< $Perm.No $k@13@03) (not (= diz@6@03 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@12@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@12@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@12@03))) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            23
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            2
;  :datatype-accessor-ax 4
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          267
;  :mk-clause            3
;  :num-allocs           3508183
;  :num-checks           2
;  :propagations         17
;  :quant-instantiations 1
;  :rlimit-count         112009)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@12@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            29
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            3
;  :datatype-accessor-ax 5
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          270
;  :mk-clause            3
;  :num-allocs           3508183
;  :num-checks           3
;  :propagations         17
;  :quant-instantiations 2
;  :rlimit-count         112293)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            34
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            4
;  :datatype-accessor-ax 6
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          271
;  :mk-clause            3
;  :num-allocs           3508183
;  :num-checks           4
;  :propagations         17
;  :quant-instantiations 2
;  :rlimit-count         112480)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            40
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            5
;  :datatype-accessor-ax 7
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          273
;  :mk-clause            3
;  :num-allocs           3508183
;  :num-checks           5
;  :propagations         17
;  :quant-instantiations 2
;  :rlimit-count         112709)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            47
;  :arith-assert-diseq   2
;  :arith-assert-lower   6
;  :arith-assert-upper   4
;  :arith-eq-adapter     4
;  :binary-propagations  16
;  :conflicts            6
;  :datatype-accessor-ax 8
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          282
;  :mk-clause            6
;  :num-allocs           3508183
;  :num-checks           6
;  :propagations         18
;  :quant-instantiations 5
;  :rlimit-count         113070)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            53
;  :arith-assert-diseq   2
;  :arith-assert-lower   6
;  :arith-assert-upper   4
;  :arith-eq-adapter     4
;  :binary-propagations  16
;  :conflicts            7
;  :datatype-accessor-ax 9
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          284
;  :mk-clause            6
;  :num-allocs           3508183
;  :num-checks           7
;  :propagations         18
;  :quant-instantiations 5
;  :rlimit-count         113319)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.ALU_m.Main_process_state[i] } 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|)
(declare-const i@14@03 Int)
(push) ; 2
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 0 | 0 <= i@14@03 | live]
; [else-branch: 0 | !(0 <= i@14@03) | live]
(push) ; 4
; [then-branch: 0 | 0 <= i@14@03]
(assert (<= 0 i@14@03))
; [eval] i < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            61
;  :arith-assert-diseq   3
;  :arith-assert-lower   10
;  :arith-assert-upper   5
;  :arith-eq-adapter     6
;  :binary-propagations  16
;  :conflicts            8
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          295
;  :mk-clause            9
;  :num-allocs           3508183
;  :num-checks           8
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         113791)
(pop) ; 4
(push) ; 4
; [else-branch: 0 | !(0 <= i@14@03)]
(assert (not (<= 0 i@14@03)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 1 | i@14@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@14@03 | live]
; [else-branch: 1 | !(i@14@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@14@03) | live]
(push) ; 4
; [then-branch: 1 | i@14@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@14@03]
(assert (and
  (<
    i@14@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
  (<= 0 i@14@03)))
; [eval] diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i] == -1
; [eval] diz.ALU_m.Main_process_state[i]
(push) ; 5
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            9
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          297
;  :mk-clause            9
;  :num-allocs           3508183
;  :num-checks           9
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         113952)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= i@14@03 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            9
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          297
;  :mk-clause            9
;  :num-allocs           3508183
;  :num-checks           10
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         113961)
; [eval] -1
(push) ; 5
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03] != -1 | live]
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@14@03)
  (- 0 1)))
(pop) ; 6
(push) ; 6
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
      i@14@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i]
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            10
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          298
;  :mk-clause            9
;  :num-allocs           3626926
;  :num-checks           11
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114187
;  :time                 0.00)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i@14@03 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            10
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          298
;  :mk-clause            9
;  :num-allocs           3626926
;  :num-checks           12
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114196)
(push) ; 7
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03]) | live]
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@14@03)))
; [eval] diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            11
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          301
;  :mk-clause            10
;  :num-allocs           3626926
;  :num-checks           13
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114369
;  :time                 0.00)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@14@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            11
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          301
;  :mk-clause            10
;  :num-allocs           3626926
;  :num-checks           14
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114378)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            12
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          301
;  :mk-clause            10
;  :num-allocs           3626926
;  :num-checks           15
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114426)
(pop) ; 8
(push) ; 8
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
      i@14@03))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(i@14@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@14@03)]
(assert (not
  (and
    (<
      i@14@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
    (<= 0 i@14@03))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@14@03 Int)) (!
  (implies
    (and
      (<
        i@14@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
      (<= 0 i@14@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
          i@14@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
            i@14@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
            i@14@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@14@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            67
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            13
;  :datatype-accessor-ax 11
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          303
;  :mk-clause            10
;  :num-allocs           3626926
;  :num-checks           16
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         115081)
(declare-const $k@15@03 $Perm)
(assert ($Perm.isReadVar $k@15@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@15@03 $Perm.No) (< $Perm.No $k@15@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            67
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   7
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            14
;  :datatype-accessor-ax 11
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          307
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           17
;  :propagations         20
;  :quant-instantiations 8
;  :rlimit-count         115279)
(assert (<= $Perm.No $k@15@03))
(assert (<= $k@15@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@15@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            73
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            15
;  :datatype-accessor-ax 12
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          310
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           18
;  :propagations         20
;  :quant-instantiations 8
;  :rlimit-count         115612)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            73
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            16
;  :datatype-accessor-ax 12
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          310
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           19
;  :propagations         20
;  :quant-instantiations 8
;  :rlimit-count         115660)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            79
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            17
;  :datatype-accessor-ax 13
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          313
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           20
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116026)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            79
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            18
;  :datatype-accessor-ax 13
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          313
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           21
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116074)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            84
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            19
;  :datatype-accessor-ax 14
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          314
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           22
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116341)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            84
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            20
;  :datatype-accessor-ax 14
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          314
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           23
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116389)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            89
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            21
;  :datatype-accessor-ax 15
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          315
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           24
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116666)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            89
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            22
;  :datatype-accessor-ax 15
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          315
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           25
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116714)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            94
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            23
;  :datatype-accessor-ax 16
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          316
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           26
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117001)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            94
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            24
;  :datatype-accessor-ax 16
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          316
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           27
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117049)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            99
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            25
;  :datatype-accessor-ax 17
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          317
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           28
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117346)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            99
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            26
;  :datatype-accessor-ax 17
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          317
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           29
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117394)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            104
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            27
;  :datatype-accessor-ax 18
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          318
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           30
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117701)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            104
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            28
;  :datatype-accessor-ax 18
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          318
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           31
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117749)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            110
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            29
;  :datatype-accessor-ax 19
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          320
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           32
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118098)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            110
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            30
;  :datatype-accessor-ax 19
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          320
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           33
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118146)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            117
;  :arith-assert-diseq   5
;  :arith-assert-lower   17
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            31
;  :datatype-accessor-ax 20
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          324
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           34
;  :propagations         20
;  :quant-instantiations 10
;  :rlimit-count         118604)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            117
;  :arith-assert-diseq   5
;  :arith-assert-lower   17
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            32
;  :datatype-accessor-ax 20
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          324
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           35
;  :propagations         20
;  :quant-instantiations 10
;  :rlimit-count         118652)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            122
;  :arith-assert-diseq   5
;  :arith-assert-lower   17
;  :arith-assert-upper   9
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            33
;  :datatype-accessor-ax 21
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          326
;  :mk-clause            12
;  :num-allocs           3626926
;  :num-checks           36
;  :propagations         20
;  :quant-instantiations 10
;  :rlimit-count         119035)
(declare-const $k@16@03 $Perm)
(assert ($Perm.isReadVar $k@16@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@16@03 $Perm.No) (< $Perm.No $k@16@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            122
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            34
;  :datatype-accessor-ax 21
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          330
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           37
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         119234)
(assert (<= $Perm.No $k@16@03))
(assert (<= $k@16@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@16@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            128
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            35
;  :datatype-accessor-ax 22
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          333
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           38
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         119667)
(push) ; 2
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            128
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            36
;  :datatype-accessor-ax 22
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          333
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           39
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         119715)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            134
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            37
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          336
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           40
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         120181)
(push) ; 2
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            134
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            38
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          336
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           41
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         120229)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            134
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            38
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          336
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           42
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         120242)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            139
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            39
;  :datatype-accessor-ax 24
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          337
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           43
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         120609)
(push) ; 2
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            139
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            40
;  :datatype-accessor-ax 24
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          337
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           44
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         120657)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            144
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            41
;  :datatype-accessor-ax 25
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          338
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           45
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         121034)
(push) ; 2
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            144
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            42
;  :datatype-accessor-ax 25
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          338
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           46
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         121082)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            149
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            43
;  :datatype-accessor-ax 26
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          339
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           47
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         121469)
(push) ; 2
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            149
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            44
;  :datatype-accessor-ax 26
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          339
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           48
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         121517)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            154
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            45
;  :datatype-accessor-ax 27
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          340
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           49
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         121914)
(push) ; 2
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            154
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            46
;  :datatype-accessor-ax 27
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          340
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           50
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         121962)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            159
;  :arith-assert-diseq   6
;  :arith-assert-lower   19
;  :arith-assert-upper   11
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            47
;  :datatype-accessor-ax 28
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          341
;  :mk-clause            14
;  :num-allocs           3626926
;  :num-checks           51
;  :propagations         21
;  :quant-instantiations 11
;  :rlimit-count         122369)
(declare-const $k@17@03 $Perm)
(assert ($Perm.isReadVar $k@17@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@17@03 $Perm.No) (< $Perm.No $k@17@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            159
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            48
;  :datatype-accessor-ax 28
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          345
;  :mk-clause            16
;  :num-allocs           3626926
;  :num-checks           52
;  :propagations         22
;  :quant-instantiations 11
;  :rlimit-count         122567)
(assert (<= $Perm.No $k@17@03))
(assert (<= $k@17@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@17@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            165
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            49
;  :datatype-accessor-ax 29
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          348
;  :mk-clause            16
;  :num-allocs           3751930
;  :num-checks           53
;  :propagations         22
;  :quant-instantiations 11
;  :rlimit-count         123070)
(push) ; 2
(assert (not (< $Perm.No $k@17@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            165
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            50
;  :datatype-accessor-ax 29
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          348
;  :mk-clause            16
;  :num-allocs           3751930
;  :num-checks           54
;  :propagations         22
;  :quant-instantiations 11
;  :rlimit-count         123118)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            51
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          351
;  :mk-clause            16
;  :num-allocs           3751930
;  :num-checks           55
;  :propagations         22
;  :quant-instantiations 12
;  :rlimit-count         123662)
(push) ; 2
(assert (not (< $Perm.No $k@17@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            52
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          351
;  :mk-clause            16
;  :num-allocs           3751930
;  :num-checks           56
;  :propagations         22
;  :quant-instantiations 12
;  :rlimit-count         123710)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            52
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          351
;  :mk-clause            16
;  :num-allocs           3751930
;  :num-checks           57
;  :propagations         22
;  :quant-instantiations 12
;  :rlimit-count         123723)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            53
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          352
;  :mk-clause            16
;  :num-allocs           3751930
;  :num-checks           58
;  :propagations         22
;  :quant-instantiations 12
;  :rlimit-count         124160)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   7
;  :arith-assert-lower   21
;  :arith-assert-upper   13
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            54
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          352
;  :mk-clause            16
;  :num-allocs           3751930
;  :num-checks           59
;  :propagations         22
;  :quant-instantiations 12
;  :rlimit-count         124208)
(declare-const $k@18@03 $Perm)
(assert ($Perm.isReadVar $k@18@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@18@03 $Perm.No) (< $Perm.No $k@18@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   8
;  :arith-assert-lower   23
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            55
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          356
;  :mk-clause            18
;  :num-allocs           3751930
;  :num-checks           60
;  :propagations         23
;  :quant-instantiations 12
;  :rlimit-count         124407)
(set-option :timeout 10)
(push) ; 2
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               236
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               56
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             381
;  :mk-clause               19
;  :num-allocs              3751930
;  :num-checks              61
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            125235
;  :time                    0.00)
(assert (<= $Perm.No $k@18@03))
(assert (<= $k@18@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@18@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               242
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               57
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             384
;  :mk-clause               19
;  :num-allocs              3751930
;  :num-checks              62
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            125768)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               242
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               58
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             384
;  :mk-clause               19
;  :num-allocs              3751930
;  :num-checks              63
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            125816)
(push) ; 2
(assert (not (< $Perm.No $k@18@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               242
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               59
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             384
;  :mk-clause               19
;  :num-allocs              3751930
;  :num-checks              64
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            125864)
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               242
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               60
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             384
;  :mk-clause               19
;  :num-allocs              3751930
;  :num-checks              65
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            125912)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               250
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               61
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             387
;  :mk-clause               19
;  :num-allocs              3751930
;  :num-checks              66
;  :propagations            23
;  :quant-instantiations    13
;  :rlimit-count            126483)
(declare-const $k@19@03 $Perm)
(assert ($Perm.isReadVar $k@19@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@19@03 $Perm.No) (< $Perm.No $k@19@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               250
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               62
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             391
;  :mk-clause               21
;  :num-allocs              3751930
;  :num-checks              67
;  :propagations            24
;  :quant-instantiations    13
;  :rlimit-count            126682)
(declare-const $t@20@03 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@15@03)
    (=
      $t@20@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))
  (implies
    (< $Perm.No $k@19@03)
    (=
      $t@20@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@15@03 $k@19@03)))
(assert (<= (+ $k@15@03 $k@19@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@15@03 $k@19@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               255
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      17
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               63
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             397
;  :mk-clause               21
;  :num-allocs              3879963
;  :num-checks              68
;  :propagations            24
;  :quant-instantiations    14
;  :rlimit-count            127381)
(push) ; 2
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               255
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-conflicts         1
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               64
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   3
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             398
;  :mk-clause               21
;  :num-allocs              3879963
;  :num-checks              69
;  :propagations            24
;  :quant-instantiations    14
;  :rlimit-count            127447)
(assert (= $t@20@03 diz@6@03))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@21@03 $Snap)
(assert (= $t@21@03 ($Snap.combine ($Snap.first $t@21@03) ($Snap.second $t@21@03))))
(declare-const $k@22@03 $Perm)
(assert ($Perm.isReadVar $k@22@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@22@03 $Perm.No) (< $Perm.No $k@22@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               318
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      19
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               66
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             426
;  :mk-clause               24
;  :num-allocs              3879963
;  :num-checks              71
;  :propagations            25
;  :quant-instantiations    14
;  :rlimit-count            128416)
(assert (<= $Perm.No $k@22@03))
(assert (<= $k@22@03 $Perm.Write))
(assert (implies (< $Perm.No $k@22@03) (not (= diz@6@03 $Ref.null))))
(assert (=
  ($Snap.second $t@21@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@21@03))
    ($Snap.second ($Snap.second $t@21@03)))))
(assert (= ($Snap.first ($Snap.second $t@21@03)) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               324
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      20
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               67
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             429
;  :mk-clause               24
;  :num-allocs              3879963
;  :num-checks              72
;  :propagations            25
;  :quant-instantiations    14
;  :rlimit-count            128659)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@21@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@21@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               330
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      20
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               68
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             432
;  :mk-clause               24
;  :num-allocs              3879963
;  :num-checks              73
;  :propagations            25
;  :quant-instantiations    15
;  :rlimit-count            128931)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@21@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               335
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      20
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               69
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             433
;  :mk-clause               24
;  :num-allocs              3879963
;  :num-checks              74
;  :propagations            25
;  :quant-instantiations    15
;  :rlimit-count            129108)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               341
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      20
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               70
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             435
;  :mk-clause               24
;  :num-allocs              3879963
;  :num-checks              75
;  :propagations            25
;  :quant-instantiations    15
;  :rlimit-count            129327)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               348
;  :arith-assert-diseq      10
;  :arith-assert-lower      30
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               71
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             441
;  :mk-clause               24
;  :num-allocs              3879963
;  :num-checks              76
;  :propagations            25
;  :quant-instantiations    17
;  :rlimit-count            129656)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               354
;  :arith-assert-diseq      10
;  :arith-assert-lower      30
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               72
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             443
;  :mk-clause               24
;  :num-allocs              3879963
;  :num-checks              77
;  :propagations            25
;  :quant-instantiations    17
;  :rlimit-count            129895)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.ALU_m.Main_process_state[i] } 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|)
(declare-const i@23@03 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 4 | 0 <= i@23@03 | live]
; [else-branch: 4 | !(0 <= i@23@03) | live]
(push) ; 5
; [then-branch: 4 | 0 <= i@23@03]
(assert (<= 0 i@23@03))
; [eval] i < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               362
;  :arith-assert-diseq      10
;  :arith-assert-lower      33
;  :arith-assert-upper      22
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               73
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             451
;  :mk-clause               24
;  :num-allocs              3879963
;  :num-checks              78
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130333)
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(0 <= i@23@03)]
(assert (not (<= 0 i@23@03)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 5 | i@23@03 < |First:(Second:(Second:(Second:($t@21@03))))| && 0 <= i@23@03 | live]
; [else-branch: 5 | !(i@23@03 < |First:(Second:(Second:(Second:($t@21@03))))| && 0 <= i@23@03) | live]
(push) ; 5
; [then-branch: 5 | i@23@03 < |First:(Second:(Second:(Second:($t@21@03))))| && 0 <= i@23@03]
(assert (and
  (<
    i@23@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))
  (<= 0 i@23@03)))
; [eval] diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i] == -1
; [eval] diz.ALU_m.Main_process_state[i]
(push) ; 6
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      10
;  :arith-assert-lower      34
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               74
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             453
;  :mk-clause               24
;  :num-allocs              3879963
;  :num-checks              79
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130494)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@23@03 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      10
;  :arith-assert-lower      34
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               74
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             453
;  :mk-clause               24
;  :num-allocs              3879963
;  :num-checks              80
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130503)
; [eval] -1
(push) ; 6
; [then-branch: 6 | First:(Second:(Second:(Second:($t@21@03))))[i@23@03] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@21@03))))[i@23@03] != -1 | live]
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@21@03))))[i@23@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))
    i@23@03)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 6 | First:(Second:(Second:(Second:($t@21@03))))[i@23@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))
      i@23@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i]
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      10
;  :arith-assert-lower      34
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               75
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             454
;  :mk-clause               24
;  :num-allocs              3879963
;  :num-checks              81
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130717)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@23@03 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      10
;  :arith-assert-lower      34
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               75
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             454
;  :mk-clause               24
;  :num-allocs              3879963
;  :num-checks              82
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130726)
(push) ; 8
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@21@03))))[i@23@03] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@21@03))))[i@23@03]) | live]
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@21@03))))[i@23@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))
    i@23@03)))
; [eval] diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               76
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             457
;  :mk-clause               25
;  :num-allocs              3879963
;  :num-checks              83
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130889)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@23@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               76
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             457
;  :mk-clause               25
;  :num-allocs              3879963
;  :num-checks              84
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130898)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               77
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             457
;  :mk-clause               25
;  :num-allocs              3879963
;  :num-checks              85
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            130946)
(pop) ; 9
(push) ; 9
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@21@03))))[i@23@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))
      i@23@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(i@23@03 < |First:(Second:(Second:(Second:($t@21@03))))| && 0 <= i@23@03)]
(assert (not
  (and
    (<
      i@23@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))
    (<= 0 i@23@03))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@23@03 Int)) (!
  (implies
    (and
      (<
        i@23@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))
      (<= 0 i@23@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))
          i@23@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))
            i@23@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))
            i@23@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))
    i@23@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               368
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               78
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             459
;  :mk-clause               25
;  :num-allocs              3879963
;  :num-checks              86
;  :propagations            25
;  :quant-instantiations    19
;  :rlimit-count            131571)
(declare-const $k@24@03 $Perm)
(assert ($Perm.isReadVar $k@24@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@24@03 $Perm.No) (< $Perm.No $k@24@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               368
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      24
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               79
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             463
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              87
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            131770)
(assert (<= $Perm.No $k@24@03))
(assert (<= $k@24@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@24@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               374
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               80
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             466
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              88
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            132093)
(push) ; 3
(assert (not (< $Perm.No $k@24@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               374
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               81
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             466
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              89
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            132141)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               380
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               82
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             469
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              90
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            132497)
(push) ; 3
(assert (not (< $Perm.No $k@24@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               380
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               83
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             469
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              91
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            132545)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               385
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               84
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             470
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              92
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            132802)
(push) ; 3
(assert (not (< $Perm.No $k@24@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               385
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               85
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             470
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              93
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            132850)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               390
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               86
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             471
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              94
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            133117)
(push) ; 3
(assert (not (< $Perm.No $k@24@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               390
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               87
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             471
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              95
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            133165)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               395
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               88
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             472
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              96
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            133442)
(push) ; 3
(assert (not (< $Perm.No $k@24@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               395
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               89
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             472
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              97
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            133490)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               400
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               90
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             473
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              98
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            133777)
(push) ; 3
(assert (not (< $Perm.No $k@24@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               400
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               91
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             473
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              99
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            133825)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               405
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               92
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             474
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              100
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            134122)
(push) ; 3
(assert (not (< $Perm.No $k@24@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               405
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               93
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             474
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              101
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            134170)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               411
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               94
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             476
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              102
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            134509)
(push) ; 3
(assert (not (< $Perm.No $k@24@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               411
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               95
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             476
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              103
;  :propagations            26
;  :quant-instantiations    20
;  :rlimit-count            134557)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               418
;  :arith-assert-diseq      12
;  :arith-assert-lower      40
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               96
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             480
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              104
;  :propagations            26
;  :quant-instantiations    21
;  :rlimit-count            135004)
(push) ; 3
(assert (not (< $Perm.No $k@24@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               418
;  :arith-assert-diseq      12
;  :arith-assert-lower      40
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               97
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             480
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              105
;  :propagations            26
;  :quant-instantiations    21
;  :rlimit-count            135052)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               423
;  :arith-assert-diseq      12
;  :arith-assert-lower      40
;  :arith-assert-upper      26
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               98
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             482
;  :mk-clause               27
;  :num-allocs              3879963
;  :num-checks              106
;  :propagations            26
;  :quant-instantiations    21
;  :rlimit-count            135426)
(declare-const $k@25@03 $Perm)
(assert ($Perm.isReadVar $k@25@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@25@03 $Perm.No) (< $Perm.No $k@25@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               423
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      27
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               99
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             486
;  :mk-clause               29
;  :num-allocs              3879963
;  :num-checks              107
;  :propagations            27
;  :quant-instantiations    21
;  :rlimit-count            135625)
(assert (<= $Perm.No $k@25@03))
(assert (<= $k@25@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@25@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               429
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               100
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             489
;  :mk-clause               29
;  :num-allocs              3879963
;  :num-checks              108
;  :propagations            27
;  :quant-instantiations    21
;  :rlimit-count            136048)
(push) ; 3
(assert (not (< $Perm.No $k@25@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               429
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               101
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             489
;  :mk-clause               29
;  :num-allocs              3879963
;  :num-checks              109
;  :propagations            27
;  :quant-instantiations    21
;  :rlimit-count            136096)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               435
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               102
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             492
;  :mk-clause               29
;  :num-allocs              3879963
;  :num-checks              110
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            136552)
(push) ; 3
(assert (not (< $Perm.No $k@25@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               435
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               103
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             492
;  :mk-clause               29
;  :num-allocs              3879963
;  :num-checks              111
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            136600)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               435
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               103
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             492
;  :mk-clause               29
;  :num-allocs              3879963
;  :num-checks              112
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            136613)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               440
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               104
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             493
;  :mk-clause               29
;  :num-allocs              3879963
;  :num-checks              113
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            136970)
(push) ; 3
(assert (not (< $Perm.No $k@25@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               440
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               105
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             493
;  :mk-clause               29
;  :num-allocs              3879963
;  :num-checks              114
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            137018)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               445
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               106
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             494
;  :mk-clause               29
;  :num-allocs              3879963
;  :num-checks              115
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            137385)
(push) ; 3
(assert (not (< $Perm.No $k@25@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               445
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               107
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             494
;  :mk-clause               29
;  :num-allocs              4016001
;  :num-checks              116
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            137433)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               450
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               108
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             495
;  :mk-clause               29
;  :num-allocs              4016001
;  :num-checks              117
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            137810)
(push) ; 3
(assert (not (< $Perm.No $k@25@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               450
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               109
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             495
;  :mk-clause               29
;  :num-allocs              4016001
;  :num-checks              118
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            137858)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               455
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               110
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             496
;  :mk-clause               29
;  :num-allocs              4016001
;  :num-checks              119
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            138245)
(push) ; 3
(assert (not (< $Perm.No $k@25@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               455
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               111
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             496
;  :mk-clause               29
;  :num-allocs              4016001
;  :num-checks              120
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            138293)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               460
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      28
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               112
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             497
;  :mk-clause               29
;  :num-allocs              4016001
;  :num-checks              121
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            138690)
(declare-const $k@26@03 $Perm)
(assert ($Perm.isReadVar $k@26@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@26@03 $Perm.No) (< $Perm.No $k@26@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               460
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               113
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             501
;  :mk-clause               31
;  :num-allocs              4016001
;  :num-checks              122
;  :propagations            28
;  :quant-instantiations    22
;  :rlimit-count            138889)
(assert (<= $Perm.No $k@26@03))
(assert (<= $k@26@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@26@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               466
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               114
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             504
;  :mk-clause               31
;  :num-allocs              4016001
;  :num-checks              123
;  :propagations            28
;  :quant-instantiations    22
;  :rlimit-count            139382)
(push) ; 3
(assert (not (< $Perm.No $k@26@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               466
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               115
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             504
;  :mk-clause               31
;  :num-allocs              4016001
;  :num-checks              124
;  :propagations            28
;  :quant-instantiations    22
;  :rlimit-count            139430)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               472
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               116
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             507
;  :mk-clause               31
;  :num-allocs              4016001
;  :num-checks              125
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            139964)
(push) ; 3
(assert (not (< $Perm.No $k@26@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               472
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               117
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             507
;  :mk-clause               31
;  :num-allocs              4016001
;  :num-checks              126
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            140012)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               472
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               117
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             507
;  :mk-clause               31
;  :num-allocs              4016001
;  :num-checks              127
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            140025)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               477
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               118
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             508
;  :mk-clause               31
;  :num-allocs              4016001
;  :num-checks              128
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            140452)
(push) ; 3
(assert (not (< $Perm.No $k@24@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               477
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               119
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             508
;  :mk-clause               31
;  :num-allocs              4016001
;  :num-checks              129
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            140500)
(declare-const $k@27@03 $Perm)
(assert ($Perm.isReadVar $k@27@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@27@03 $Perm.No) (< $Perm.No $k@27@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               477
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         1
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               120
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   6
;  :datatype-splits         44
;  :decisions               44
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             512
;  :mk-clause               33
;  :num-allocs              4016001
;  :num-checks              130
;  :propagations            29
;  :quant-instantiations    23
;  :rlimit-count            140699)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               681
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-conflicts         1
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               122
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             571
;  :mk-clause               36
;  :num-allocs              4154993
;  :num-checks              131
;  :propagations            30
;  :quant-instantiations    23
;  :rlimit-count            142237
;  :time                    0.00)
(assert (<= $Perm.No $k@27@03))
(assert (<= $k@27@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@27@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               687
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-conflicts         1
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               123
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             574
;  :mk-clause               36
;  :num-allocs              4154993
;  :num-checks              132
;  :propagations            30
;  :quant-instantiations    23
;  :rlimit-count            142760)
(push) ; 3
(assert (not (< $Perm.No $k@24@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               687
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-conflicts         1
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               124
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             574
;  :mk-clause               36
;  :num-allocs              4154993
;  :num-checks              133
;  :propagations            30
;  :quant-instantiations    23
;  :rlimit-count            142808)
(push) ; 3
(assert (not (< $Perm.No $k@27@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               687
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-conflicts         1
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               125
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             574
;  :mk-clause               36
;  :num-allocs              4154993
;  :num-checks              134
;  :propagations            30
;  :quant-instantiations    23
;  :rlimit-count            142856)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               687
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-conflicts         1
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               126
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             574
;  :mk-clause               36
;  :num-allocs              4154993
;  :num-checks              135
;  :propagations            30
;  :quant-instantiations    23
;  :rlimit-count            142904)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               695
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-conflicts         1
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               127
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             577
;  :mk-clause               36
;  :num-allocs              4154993
;  :num-checks              136
;  :propagations            30
;  :quant-instantiations    24
;  :rlimit-count            143465)
(declare-const $k@28@03 $Perm)
(assert ($Perm.isReadVar $k@28@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@28@03 $Perm.No) (< $Perm.No $k@28@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               695
;  :arith-assert-diseq      16
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               128
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             581
;  :mk-clause               38
;  :num-allocs              4154993
;  :num-checks              137
;  :propagations            31
;  :quant-instantiations    24
;  :rlimit-count            143663)
(declare-const $t@29@03 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@24@03)
    (=
      $t@29@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))
  (implies
    (< $Perm.No $k@28@03)
    (=
      $t@29@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@24@03 $k@28@03)))
(assert (<= (+ $k@24@03 $k@28@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@24@03 $k@28@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@03)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               700
;  :arith-assert-diseq      16
;  :arith-assert-lower      50
;  :arith-assert-upper      35
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               129
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             587
;  :mk-clause               38
;  :num-allocs              4154993
;  :num-checks              138
;  :propagations            31
;  :quant-instantiations    25
;  :rlimit-count            144352)
(push) ; 3
(assert (not (< $Perm.No (+ $k@24@03 $k@28@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               700
;  :arith-assert-diseq      16
;  :arith-assert-lower      50
;  :arith-assert-upper      36
;  :arith-conflicts         2
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         5
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               130
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              24
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             588
;  :mk-clause               38
;  :num-allocs              4154993
;  :num-checks              139
;  :propagations            31
;  :quant-instantiations    25
;  :rlimit-count            144418)
(assert (= $t@29@03 diz@6@03))
(pop) ; 2
(push) ; 2
; [exec]
; var sys__local__result__12: Int
(declare-const sys__local__result__12@30@03 Int)
; [exec]
; var i__13: Int
(declare-const i__13@31@03 Int)
; [exec]
; var divisor__14: Int
(declare-const divisor__14@32@03 Int)
; [exec]
; var current_bit__15: Int
(declare-const current_bit__15@33@03 Int)
; [exec]
; var __flatten_2__16: Ref
(declare-const __flatten_2__16@34@03 $Ref)
; [exec]
; var __flatten_4__17: Int
(declare-const __flatten_4__17@35@03 Int)
; [exec]
; __flatten_2__16 := diz.ALU_m
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               700
;  :arith-assert-diseq      16
;  :arith-assert-lower      50
;  :arith-assert-upper      36
;  :arith-conflicts         2
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         5
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               131
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             588
;  :mk-clause               38
;  :num-allocs              4154993
;  :num-checks              140
;  :propagations            31
;  :quant-instantiations    25
;  :rlimit-count            144477)
(declare-const __flatten_2__16@36@03 $Ref)
(assert (=
  __flatten_2__16@36@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))))
; [exec]
; current_bit__15 := ALU_get_bit_EncodedGlobalVariables_Integer_Integer(__flatten_2__16.Main_alu, globals, value, pos)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
  __flatten_2__16@36@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      16
;  :arith-assert-lower      50
;  :arith-assert-upper      36
;  :arith-conflicts         2
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         5
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               131
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             589
;  :mk-clause               38
;  :num-allocs              4154993
;  :num-checks              141
;  :propagations            31
;  :quant-instantiations    25
;  :rlimit-count            144555)
(push) ; 3
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      16
;  :arith-assert-lower      50
;  :arith-assert-upper      37
;  :arith-conflicts         3
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               132
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             590
;  :mk-clause               38
;  :num-allocs              4154993
;  :num-checks              142
;  :propagations            31
;  :quant-instantiations    25
;  :rlimit-count            144617)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= $t@20@03 $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      16
;  :arith-assert-lower      50
;  :arith-assert-upper      37
;  :arith-conflicts         3
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               132
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             590
;  :mk-clause               38
;  :num-allocs              4154993
;  :num-checks              143
;  :propagations            31
;  :quant-instantiations    25
;  :rlimit-count            144635)
(assert (not (= $t@20@03 $Ref.null)))
(declare-const $k@37@03 $Perm)
(assert ($Perm.isReadVar $k@37@03 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@37@03 $Perm.No) (< $Perm.No $k@37@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      52
;  :arith-assert-upper      38
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               133
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             594
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              144
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            144860)
(set-option :timeout 10)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      52
;  :arith-assert-upper      38
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               133
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             594
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              145
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            144871)
(push) ; 3
(assert (not (not (= $k@13@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      52
;  :arith-assert-upper      38
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               133
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             594
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              146
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            144882)
(assert (< $k@37@03 $k@13@03))
(assert (<= $Perm.No (- $k@13@03 $k@37@03)))
(assert (<= (- $k@13@03 $k@37@03) $Perm.Write))
(assert (implies (< $Perm.No (- $k@13@03 $k@37@03)) (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               133
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             597
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              147
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145053)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               134
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             597
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              148
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145101)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               134
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             597
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              149
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145112)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               135
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             597
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              150
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145160)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               135
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             597
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              151
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145171)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               136
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             597
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              152
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145219)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               136
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             597
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              153
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145230)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               137
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             597
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              154
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145278)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               137
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             597
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              155
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145289)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               138
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             597
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              156
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145337)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               138
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             597
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              157
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145348)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               139
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             597
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              158
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145396)
; [eval] (forall i: Int :: { diz.ALU_m.Main_process_state[i] } 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|)
(declare-const i@38@03 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 8 | 0 <= i@38@03 | live]
; [else-branch: 8 | !(0 <= i@38@03) | live]
(push) ; 5
; [then-branch: 8 | 0 <= i@38@03]
(assert (<= 0 i@38@03))
; [eval] i < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 6
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      55
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               139
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             598
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              159
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145459)
(push) ; 6
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      17
;  :arith-assert-lower      55
;  :arith-assert-upper      39
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               140
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             598
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              160
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145507)
(pop) ; 5
(push) ; 5
; [else-branch: 8 | !(0 <= i@38@03)]
(assert (not (<= 0 i@38@03)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 9 | i@38@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@38@03 | live]
; [else-branch: 9 | !(i@38@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@38@03) | live]
(push) ; 5
; [then-branch: 9 | i@38@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@38@03]
(assert (and
  (<
    i@38@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
  (<= 0 i@38@03)))
; [eval] diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i] == -1
; [eval] diz.ALU_m.Main_process_state[i]
(push) ; 6
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               702
;  :arith-assert-diseq      17
;  :arith-assert-lower      56
;  :arith-assert-upper      40
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               140
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             600
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              161
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145631)
(push) ; 6
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               702
;  :arith-assert-diseq      17
;  :arith-assert-lower      56
;  :arith-assert-upper      40
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               141
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             600
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              162
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145679)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@38@03 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               702
;  :arith-assert-diseq      17
;  :arith-assert-lower      56
;  :arith-assert-upper      40
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               141
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             600
;  :mk-clause               40
;  :num-allocs              4154993
;  :num-checks              163
;  :propagations            32
;  :quant-instantiations    25
;  :rlimit-count            145688)
; [eval] -1
(push) ; 6
; [then-branch: 10 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@38@03] == -1 | live]
; [else-branch: 10 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@38@03] != -1 | live]
(push) ; 7
; [then-branch: 10 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@38@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@38@03)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 10 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@38@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
      i@38@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i]
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 8
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               704
;  :arith-assert-diseq      19
;  :arith-assert-lower      59
;  :arith-assert-upper      41
;  :arith-conflicts         3
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               141
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             607
;  :mk-clause               52
;  :num-allocs              4154993
;  :num-checks              164
;  :propagations            37
;  :quant-instantiations    26
;  :rlimit-count            145938)
(push) ; 8
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               704
;  :arith-assert-diseq      19
;  :arith-assert-lower      59
;  :arith-assert-upper      41
;  :arith-conflicts         3
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               142
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             607
;  :mk-clause               52
;  :num-allocs              4154993
;  :num-checks              165
;  :propagations            37
;  :quant-instantiations    26
;  :rlimit-count            145986)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@38@03 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               704
;  :arith-assert-diseq      19
;  :arith-assert-lower      59
;  :arith-assert-upper      41
;  :arith-conflicts         3
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               142
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             607
;  :mk-clause               52
;  :num-allocs              4154993
;  :num-checks              166
;  :propagations            37
;  :quant-instantiations    26
;  :rlimit-count            145995)
(push) ; 8
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@38@03] | live]
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@38@03]) | live]
(push) ; 9
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@38@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@38@03)))
; [eval] diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               706
;  :arith-assert-diseq      19
;  :arith-assert-lower      61
;  :arith-assert-upper      42
;  :arith-conflicts         3
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         8
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               142
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             611
;  :mk-clause               52
;  :num-allocs              4154993
;  :num-checks              167
;  :propagations            37
;  :quant-instantiations    26
;  :rlimit-count            146142)
(push) ; 10
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               706
;  :arith-assert-diseq      19
;  :arith-assert-lower      61
;  :arith-assert-upper      42
;  :arith-conflicts         3
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         8
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               143
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             611
;  :mk-clause               52
;  :num-allocs              4154993
;  :num-checks              168
;  :propagations            37
;  :quant-instantiations    26
;  :rlimit-count            146190)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@38@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               706
;  :arith-assert-diseq      19
;  :arith-assert-lower      61
;  :arith-assert-upper      42
;  :arith-conflicts         3
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         8
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               143
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             611
;  :mk-clause               52
;  :num-allocs              4154993
;  :num-checks              169
;  :propagations            37
;  :quant-instantiations    26
;  :rlimit-count            146199)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               706
;  :arith-assert-diseq      19
;  :arith-assert-lower      61
;  :arith-assert-upper      42
;  :arith-conflicts         3
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         8
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               143
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             611
;  :mk-clause               52
;  :num-allocs              4154993
;  :num-checks              170
;  :propagations            37
;  :quant-instantiations    26
;  :rlimit-count            146210)
(push) ; 10
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               706
;  :arith-assert-diseq      19
;  :arith-assert-lower      61
;  :arith-assert-upper      42
;  :arith-conflicts         3
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         8
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               144
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             611
;  :mk-clause               52
;  :num-allocs              4154993
;  :num-checks              171
;  :propagations            37
;  :quant-instantiations    26
;  :rlimit-count            146258)
(pop) ; 9
(push) ; 9
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@38@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
      i@38@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 9 | !(i@38@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@38@03)]
(assert (not
  (and
    (<
      i@38@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
    (<= 0 i@38@03))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((i@38@03 Int)) (!
  (implies
    (and
      (<
        i@38@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
      (<= 0 i@38@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
          i@38@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
            i@38@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
            i@38@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@38@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               706
;  :arith-assert-diseq      20
;  :arith-assert-lower      62
;  :arith-assert-upper      43
;  :arith-conflicts         3
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         9
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               145
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              60
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             619
;  :mk-clause               64
;  :num-allocs              4154993
;  :num-checks              172
;  :propagations            39
;  :quant-instantiations    27
;  :rlimit-count            146719)
(assert (forall ((i@38@03 Int)) (!
  (implies
    (and
      (<
        i@38@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
      (<= 0 i@38@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
          i@38@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
            i@38@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
            i@38@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@38@03))
  :qid |prog.l<no position>|)))
(declare-const $k@39@03 $Perm)
(assert ($Perm.isReadVar $k@39@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               706
;  :arith-assert-diseq      21
;  :arith-assert-lower      64
;  :arith-assert-upper      44
;  :arith-conflicts         3
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         9
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               145
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              60
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             624
;  :mk-clause               66
;  :num-allocs              4154993
;  :num-checks              173
;  :propagations            40
;  :quant-instantiations    27
;  :rlimit-count            147258)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               706
;  :arith-assert-diseq      21
;  :arith-assert-lower      64
;  :arith-assert-upper      44
;  :arith-conflicts         3
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         9
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               146
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              60
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             624
;  :mk-clause               66
;  :num-allocs              4154993
;  :num-checks              174
;  :propagations            40
;  :quant-instantiations    27
;  :rlimit-count            147306)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@39@03 $Perm.No) (< $Perm.No $k@39@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               706
;  :arith-assert-diseq      21
;  :arith-assert-lower      64
;  :arith-assert-upper      44
;  :arith-conflicts         3
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         9
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               147
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              60
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             624
;  :mk-clause               66
;  :num-allocs              4154993
;  :num-checks              175
;  :propagations            40
;  :quant-instantiations    27
;  :rlimit-count            147356)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= (+ $k@15@03 $k@19@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-assert-diseq      21
;  :arith-assert-lower      64
;  :arith-assert-upper      45
;  :arith-conflicts         4
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         9
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               148
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             626
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              176
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            147418)
(assert (< $k@39@03 (+ $k@15@03 $k@19@03)))
(assert (<= $Perm.No (- (+ $k@15@03 $k@19@03) $k@39@03)))
(assert (<= (- (+ $k@15@03 $k@19@03) $k@39@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@15@03 $k@19@03) $k@39@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         4
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         9
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               148
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             629
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              177
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            147598)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-conflicts         4
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         9
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             629
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              178
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            147646)
(push) ; 3
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      47
;  :arith-conflicts         5
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         10
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               150
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             630
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              179
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            147709)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      47
;  :arith-conflicts         5
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         10
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               150
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             630
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              180
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            147720)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      47
;  :arith-conflicts         5
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         10
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               151
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             630
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              181
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            147768)
(push) ; 3
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      48
;  :arith-conflicts         6
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         11
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               152
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             631
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              182
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            147831)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      48
;  :arith-conflicts         6
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         11
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               153
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             632
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              183
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148001)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      48
;  :arith-conflicts         6
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         11
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               153
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             632
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              184
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148012)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      48
;  :arith-conflicts         6
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         11
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               154
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             632
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              185
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148060)
(push) ; 3
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      49
;  :arith-conflicts         7
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               155
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             633
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              186
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148123)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      49
;  :arith-conflicts         7
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               156
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             634
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              187
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148293)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      49
;  :arith-conflicts         7
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               156
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             634
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              188
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148304)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      49
;  :arith-conflicts         7
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               157
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             634
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              189
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148352)
(push) ; 3
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      50
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         13
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               158
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             635
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              190
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148415)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      50
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         13
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               159
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             636
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              191
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148585)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      50
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         13
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               159
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             636
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              192
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148596)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      50
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         13
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               160
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             636
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              193
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148644)
(push) ; 3
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      51
;  :arith-conflicts         9
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         14
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               161
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             637
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              194
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148707)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      51
;  :arith-conflicts         9
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         14
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               162
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             638
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              195
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148877)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      51
;  :arith-conflicts         9
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         14
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               162
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             638
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              196
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148888)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      51
;  :arith-conflicts         9
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         14
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               163
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             638
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              197
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148936)
(push) ; 3
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      52
;  :arith-conflicts         10
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         15
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               164
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             639
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              198
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            148999)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      52
;  :arith-conflicts         10
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         15
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               165
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             640
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              199
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            149169)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      52
;  :arith-conflicts         10
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         15
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               165
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             640
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              200
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            149180)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      52
;  :arith-conflicts         10
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         15
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               166
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             640
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              201
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            149228)
(push) ; 3
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      53
;  :arith-conflicts         11
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         16
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               167
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             641
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              202
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            149291)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      53
;  :arith-conflicts         11
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         16
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               168
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             642
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              203
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            149461)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      53
;  :arith-conflicts         11
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         16
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               168
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             642
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              204
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            149472)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      53
;  :arith-conflicts         11
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         16
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               169
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             642
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              205
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            149520)
(push) ; 3
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      54
;  :arith-conflicts         12
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         17
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               170
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             643
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              206
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            149583)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      54
;  :arith-conflicts         12
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         17
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               171
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             644
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              207
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            149753)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      54
;  :arith-conflicts         12
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         17
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               171
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             644
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              208
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            149764)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      54
;  :arith-conflicts         12
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         17
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               172
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             644
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              209
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            149812)
(push) ; 3
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      55
;  :arith-conflicts         13
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         18
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               173
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             645
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              210
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            149875)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      55
;  :arith-conflicts         13
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         18
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               174
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             646
;  :mk-clause               68
;  :num-allocs              4154993
;  :num-checks              211
;  :propagations            41
;  :quant-instantiations    27
;  :rlimit-count            150045)
(declare-const $k@40@03 $Perm)
(assert ($Perm.isReadVar $k@40@03 $Perm.Write))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      68
;  :arith-assert-upper      56
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               174
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             650
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              212
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150204)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      68
;  :arith-assert-upper      56
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               175
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             650
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              213
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150252)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@40@03 $Perm.No) (< $Perm.No $k@40@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      68
;  :arith-assert-upper      56
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               176
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             650
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              214
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150302)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $k@16@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      68
;  :arith-assert-upper      56
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               176
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             650
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              215
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150313)
(assert (< $k@40@03 $k@16@03))
(assert (<= $Perm.No (- $k@16@03 $k@40@03)))
(assert (<= (- $k@16@03 $k@40@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@16@03 $k@40@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               176
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              216
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150496)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               177
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              217
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150544)
(push) ; 3
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               178
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              218
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150592)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               178
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              219
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150605)
(set-option :timeout 10)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               178
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              220
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150616)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               179
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              221
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150664)
(push) ; 3
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               180
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              222
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150712)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               180
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              223
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150723)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               181
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              224
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150771)
(push) ; 3
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               182
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              225
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150819)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               182
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              226
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150830)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               183
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              227
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150878)
(push) ; 3
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               184
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              228
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150926)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               184
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              229
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150937)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               185
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              230
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            150985)
(push) ; 3
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               186
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              231
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            151033)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               186
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              232
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            151044)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               187
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              233
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            151092)
(push) ; 3
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         13
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               188
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               70
;  :num-allocs              4154993
;  :num-checks              234
;  :propagations            42
;  :quant-instantiations    27
;  :rlimit-count            151140)
(declare-const $k@41@03 $Perm)
(assert ($Perm.isReadVar $k@41@03 $Perm.Write))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      23
;  :arith-assert-lower      72
;  :arith-assert-upper      58
;  :arith-conflicts         13
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               188
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             657
;  :mk-clause               72
;  :num-allocs              4154993
;  :num-checks              235
;  :propagations            43
;  :quant-instantiations    27
;  :rlimit-count            151300)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      23
;  :arith-assert-lower      72
;  :arith-assert-upper      58
;  :arith-conflicts         13
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               189
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             657
;  :mk-clause               72
;  :num-allocs              4154993
;  :num-checks              236
;  :propagations            43
;  :quant-instantiations    27
;  :rlimit-count            151348)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@41@03 $Perm.No) (< $Perm.No $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      23
;  :arith-assert-lower      72
;  :arith-assert-upper      58
;  :arith-conflicts         13
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             657
;  :mk-clause               72
;  :num-allocs              4154993
;  :num-checks              237
;  :propagations            43
;  :quant-instantiations    27
;  :rlimit-count            151398)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $k@17@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      23
;  :arith-assert-lower      72
;  :arith-assert-upper      58
;  :arith-conflicts         13
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             657
;  :mk-clause               72
;  :num-allocs              4154993
;  :num-checks              238
;  :propagations            43
;  :quant-instantiations    27
;  :rlimit-count            151409)
(assert (< $k@41@03 $k@17@03))
(assert (<= $Perm.No (- $k@17@03 $k@41@03)))
(assert (<= (- $k@17@03 $k@41@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@17@03 $k@41@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      23
;  :arith-assert-lower      74
;  :arith-assert-upper      59
;  :arith-conflicts         13
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             660
;  :mk-clause               72
;  :num-allocs              4154993
;  :num-checks              239
;  :propagations            43
;  :quant-instantiations    27
;  :rlimit-count            151580)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      23
;  :arith-assert-lower      74
;  :arith-assert-upper      59
;  :arith-conflicts         13
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               191
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             660
;  :mk-clause               72
;  :num-allocs              4154993
;  :num-checks              240
;  :propagations            43
;  :quant-instantiations    27
;  :rlimit-count            151628)
(push) ; 3
(assert (not (< $Perm.No $k@17@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      23
;  :arith-assert-lower      74
;  :arith-assert-upper      59
;  :arith-conflicts         13
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               192
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             660
;  :mk-clause               72
;  :num-allocs              4154993
;  :num-checks              241
;  :propagations            43
;  :quant-instantiations    27
;  :rlimit-count            151676)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      23
;  :arith-assert-lower      74
;  :arith-assert-upper      59
;  :arith-conflicts         13
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               192
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             660
;  :mk-clause               72
;  :num-allocs              4154993
;  :num-checks              242
;  :propagations            43
;  :quant-instantiations    27
;  :rlimit-count            151689)
(set-option :timeout 10)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      23
;  :arith-assert-lower      74
;  :arith-assert-upper      59
;  :arith-conflicts         13
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               192
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             660
;  :mk-clause               72
;  :num-allocs              4154993
;  :num-checks              243
;  :propagations            43
;  :quant-instantiations    27
;  :rlimit-count            151700)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      23
;  :arith-assert-lower      74
;  :arith-assert-upper      59
;  :arith-conflicts         13
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               193
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             660
;  :mk-clause               72
;  :num-allocs              4154993
;  :num-checks              244
;  :propagations            43
;  :quant-instantiations    27
;  :rlimit-count            151748)
(push) ; 3
(assert (not (< $Perm.No $k@17@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      23
;  :arith-assert-lower      74
;  :arith-assert-upper      59
;  :arith-conflicts         13
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               194
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             660
;  :mk-clause               72
;  :num-allocs              4154993
;  :num-checks              245
;  :propagations            43
;  :quant-instantiations    27
;  :rlimit-count            151796)
(declare-const $k@42@03 $Perm)
(assert ($Perm.isReadVar $k@42@03 $Perm.Write))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      24
;  :arith-assert-lower      76
;  :arith-assert-upper      60
;  :arith-conflicts         13
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               194
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             664
;  :mk-clause               74
;  :num-allocs              4154993
;  :num-checks              246
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            151956)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      24
;  :arith-assert-lower      76
;  :arith-assert-upper      60
;  :arith-conflicts         13
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               195
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             664
;  :mk-clause               74
;  :num-allocs              4154993
;  :num-checks              247
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            152004)
(push) ; 3
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      24
;  :arith-assert-lower      76
;  :arith-assert-upper      61
;  :arith-conflicts         14
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               196
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             665
;  :mk-clause               74
;  :num-allocs              4154993
;  :num-checks              248
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            152067)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@42@03 $Perm.No) (< $Perm.No $k@42@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      24
;  :arith-assert-lower      76
;  :arith-assert-upper      61
;  :arith-conflicts         14
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               197
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             665
;  :mk-clause               74
;  :num-allocs              4154993
;  :num-checks              249
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            152117)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      24
;  :arith-assert-lower      76
;  :arith-assert-upper      61
;  :arith-conflicts         14
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               198
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             666
;  :mk-clause               74
;  :num-allocs              4154993
;  :num-checks              250
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            152287)
(push) ; 3
(assert (not (not (= $k@18@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      24
;  :arith-assert-lower      76
;  :arith-assert-upper      61
;  :arith-conflicts         14
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               198
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             666
;  :mk-clause               74
;  :num-allocs              4154993
;  :num-checks              251
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            152298)
(assert (< $k@42@03 $k@18@03))
(assert (<= $Perm.No (- $k@18@03 $k@42@03)))
(assert (<= (- $k@18@03 $k@42@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@18@03 $k@42@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      24
;  :arith-assert-lower      78
;  :arith-assert-upper      62
;  :arith-conflicts         14
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         19
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               198
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             669
;  :mk-clause               74
;  :num-allocs              4154993
;  :num-checks              252
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            152475)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      24
;  :arith-assert-lower      78
;  :arith-assert-upper      62
;  :arith-conflicts         14
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         19
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               199
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             669
;  :mk-clause               74
;  :num-allocs              4154993
;  :num-checks              253
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            152523)
(push) ; 3
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      24
;  :arith-assert-lower      78
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         20
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               200
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             670
;  :mk-clause               74
;  :num-allocs              4154993
;  :num-checks              254
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            152586)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      24
;  :arith-assert-lower      78
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         20
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               200
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             670
;  :mk-clause               74
;  :num-allocs              4154993
;  :num-checks              255
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            152597)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      24
;  :arith-assert-lower      78
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         20
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               201
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             670
;  :mk-clause               74
;  :num-allocs              4154993
;  :num-checks              256
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            152645)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      24
;  :arith-assert-lower      78
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         20
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               201
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             670
;  :mk-clause               74
;  :num-allocs              4154993
;  :num-checks              257
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            152656)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      24
;  :arith-assert-lower      78
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         20
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               202
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             670
;  :mk-clause               74
;  :num-allocs              4154993
;  :num-checks              258
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            152704)
(declare-const $k@43@03 $Perm)
(assert ($Perm.isReadVar $k@43@03 $Perm.Write))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      80
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         20
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               202
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             674
;  :mk-clause               76
;  :num-allocs              4154993
;  :num-checks              259
;  :propagations            45
;  :quant-instantiations    27
;  :rlimit-count            152864)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      80
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         20
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               203
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             674
;  :mk-clause               76
;  :num-allocs              4154993
;  :num-checks              260
;  :propagations            45
;  :quant-instantiations    27
;  :rlimit-count            152912)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@43@03 $Perm.No) (< $Perm.No $k@43@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      80
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         20
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               204
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             674
;  :mk-clause               76
;  :num-allocs              4154993
;  :num-checks              261
;  :propagations            45
;  :quant-instantiations    27
;  :rlimit-count            152962)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= (- (+ $k@15@03 $k@19@03) $k@39@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      80
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         20
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               205
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             675
;  :mk-clause               76
;  :num-allocs              4154993
;  :num-checks              262
;  :propagations            45
;  :quant-instantiations    27
;  :rlimit-count            153036)
(assert (< $k@43@03 (- (+ $k@15@03 $k@19@03) $k@39@03)))
(assert (<= $Perm.No (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03)))
(assert (<= (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          3
;  :arith-assert-diseq      25
;  :arith-assert-lower      82
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         20
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               205
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             678
;  :mk-clause               76
;  :num-allocs              4154993
;  :num-checks              263
;  :propagations            45
;  :quant-instantiations    27
;  :rlimit-count            153260)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          3
;  :arith-assert-diseq      25
;  :arith-assert-lower      82
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         20
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               206
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             678
;  :mk-clause               76
;  :num-allocs              4154993
;  :num-checks              264
;  :propagations            45
;  :quant-instantiations    27
;  :rlimit-count            153308)
(push) ; 3
(assert (not (< $Perm.No (+ $k@15@03 $k@19@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          3
;  :arith-assert-diseq      25
;  :arith-assert-lower      82
;  :arith-assert-upper      66
;  :arith-conflicts         16
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         21
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               207
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             679
;  :mk-clause               76
;  :num-allocs              4154993
;  :num-checks              265
;  :propagations            45
;  :quant-instantiations    27
;  :rlimit-count            153371)
(declare-const sys__result@44@03 Int)
(declare-const $t@45@03 $Snap)
(assert (= $t@45@03 ($Snap.combine ($Snap.first $t@45@03) ($Snap.second $t@45@03))))
(declare-const $k@46@03 $Perm)
(assert ($Perm.isReadVar $k@46@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@46@03 $Perm.No) (< $Perm.No $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          3
;  :arith-assert-diseq      26
;  :arith-assert-lower      84
;  :arith-assert-upper      67
;  :arith-conflicts         16
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         21
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               208
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             684
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              266
;  :propagations            46
;  :quant-instantiations    27
;  :rlimit-count            153658)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          3
;  :arith-assert-diseq      26
;  :arith-assert-lower      84
;  :arith-assert-upper      67
;  :arith-conflicts         16
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         21
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               209
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             685
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              267
;  :propagations            46
;  :quant-instantiations    27
;  :rlimit-count            153828)
(declare-const $t@47@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@18@03 $k@42@03))
    (=
      $t@47@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@46@03)
    (= $t@47@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@45@03))))))
(assert (<= $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03)))
(assert (<= (+ (- $k@18@03 $k@42@03) $k@46@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second $t@45@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@45@03))
    ($Snap.second ($Snap.second $t@45@03)))))
(assert (= ($Snap.first ($Snap.second $t@45@03)) $Snap.unit))
; [eval] diz.ALU_m != null
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               722
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      85
;  :arith-assert-upper      68
;  :arith-conflicts         16
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         21
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               210
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             693
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              268
;  :propagations            46
;  :quant-instantiations    28
;  :rlimit-count            154422)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               722
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      85
;  :arith-assert-upper      69
;  :arith-conflicts         17
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         22
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               211
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             694
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              269
;  :propagations            46
;  :quant-instantiations    28
;  :rlimit-count            154500)
(assert (not (= $t@47@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@45@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@45@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               728
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      85
;  :arith-assert-upper      69
;  :arith-conflicts         17
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         22
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               212
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             697
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              270
;  :propagations            46
;  :quant-instantiations    28
;  :rlimit-count            154834)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               728
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      85
;  :arith-assert-upper      70
;  :arith-conflicts         18
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               213
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             698
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              271
;  :propagations            46
;  :quant-instantiations    28
;  :rlimit-count            154912)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@45@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               733
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      85
;  :arith-assert-upper      70
;  :arith-conflicts         18
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               213
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             699
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              272
;  :propagations            46
;  :quant-instantiations    28
;  :rlimit-count            155052)
(push) ; 3
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               733
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      85
;  :arith-assert-upper      70
;  :arith-conflicts         18
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               213
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             699
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              273
;  :propagations            46
;  :quant-instantiations    28
;  :rlimit-count            155071)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               739
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      85
;  :arith-assert-upper      70
;  :arith-conflicts         18
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               214
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             702
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              274
;  :propagations            46
;  :quant-instantiations    28
;  :rlimit-count            155412)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               739
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      85
;  :arith-assert-upper      71
;  :arith-conflicts         19
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         24
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               215
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             703
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              275
;  :propagations            46
;  :quant-instantiations    28
;  :rlimit-count            155490)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@47@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               739
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      85
;  :arith-assert-upper      71
;  :arith-conflicts         19
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         24
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               215
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             703
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              276
;  :propagations            46
;  :quant-instantiations    28
;  :rlimit-count            155501)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               746
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      72
;  :arith-conflicts         19
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         24
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               216
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             710
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              277
;  :propagations            46
;  :quant-instantiations    30
;  :rlimit-count            155953)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               746
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      73
;  :arith-conflicts         20
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         25
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             711
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              278
;  :propagations            46
;  :quant-instantiations    30
;  :rlimit-count            156031)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               752
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      73
;  :arith-conflicts         20
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         25
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             713
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              279
;  :propagations            46
;  :quant-instantiations    30
;  :rlimit-count            156233)
(push) ; 3
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               752
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      73
;  :arith-conflicts         20
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         25
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             713
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              280
;  :propagations            46
;  :quant-instantiations    30
;  :rlimit-count            156252)
(push) ; 3
(assert (not (= $t@47@03 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               752
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      73
;  :arith-conflicts         20
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         25
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             713
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              281
;  :propagations            46
;  :quant-instantiations    30
;  :rlimit-count            156263)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.ALU_m.Main_process_state[i] } 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|)
(declare-const i@48@03 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 12 | 0 <= i@48@03 | live]
; [else-branch: 12 | !(0 <= i@48@03) | live]
(push) ; 5
; [then-branch: 12 | 0 <= i@48@03]
(assert (<= 0 i@48@03))
; [eval] i < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 6
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               760
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      90
;  :arith-assert-upper      74
;  :arith-conflicts         20
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         25
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             721
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              282
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            156664)
(push) ; 6
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               760
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      90
;  :arith-assert-upper      74
;  :arith-conflicts         20
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         25
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             721
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              283
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            156683)
(pop) ; 5
(push) ; 5
; [else-branch: 12 | !(0 <= i@48@03)]
(assert (not (<= 0 i@48@03)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 13 | i@48@03 < |First:(Second:(Second:(Second:($t@45@03))))| && 0 <= i@48@03 | live]
; [else-branch: 13 | !(i@48@03 < |First:(Second:(Second:(Second:($t@45@03))))| && 0 <= i@48@03) | live]
(push) ; 5
; [then-branch: 13 | i@48@03 < |First:(Second:(Second:(Second:($t@45@03))))| && 0 <= i@48@03]
(assert (and
  (<
    i@48@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))
  (<= 0 i@48@03)))
; [eval] diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i] == -1
; [eval] diz.ALU_m.Main_process_state[i]
(push) ; 6
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               761
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      91
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             723
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              284
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            156807)
(push) ; 6
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               761
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      91
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             723
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              285
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            156826)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@48@03 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               761
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      91
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             723
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              286
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            156835)
; [eval] -1
(push) ; 6
; [then-branch: 14 | First:(Second:(Second:(Second:($t@45@03))))[i@48@03] == -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:($t@45@03))))[i@48@03] != -1 | live]
(push) ; 7
; [then-branch: 14 | First:(Second:(Second:(Second:($t@45@03))))[i@48@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
    i@48@03)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 14 | First:(Second:(Second:(Second:($t@45@03))))[i@48@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
      i@48@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i]
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 8
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               761
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      91
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             724
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              287
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            157012)
(push) ; 8
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               761
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      91
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             724
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              288
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            157031)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@48@03 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               761
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      91
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             724
;  :mk-clause               78
;  :num-allocs              4154993
;  :num-checks              289
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            157040)
(push) ; 8
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:($t@45@03))))[i@48@03] | live]
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:($t@45@03))))[i@48@03]) | live]
(push) ; 9
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:($t@45@03))))[i@48@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
    i@48@03)))
; [eval] diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               761
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      94
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             727
;  :mk-clause               79
;  :num-allocs              4154993
;  :num-checks              290
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            157165)
(push) ; 10
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               761
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      94
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             727
;  :mk-clause               79
;  :num-allocs              4154993
;  :num-checks              291
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            157184)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@48@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               761
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      94
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             727
;  :mk-clause               79
;  :num-allocs              4154993
;  :num-checks              292
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            157193)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               761
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      94
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             727
;  :mk-clause               79
;  :num-allocs              4154993
;  :num-checks              293
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            157204)
(push) ; 10
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               761
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      94
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             727
;  :mk-clause               79
;  :num-allocs              4154993
;  :num-checks              294
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            157223)
(push) ; 10
(assert (not (= $t@47@03 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               761
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      94
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              62
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             727
;  :mk-clause               79
;  :num-allocs              4154993
;  :num-checks              295
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            157234)
(pop) ; 9
(push) ; 9
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:($t@45@03))))[i@48@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
      i@48@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 13 | !(i@48@03 < |First:(Second:(Second:(Second:($t@45@03))))| && 0 <= i@48@03)]
(assert (not
  (and
    (<
      i@48@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))
    (<= 0 i@48@03))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@48@03 Int)) (!
  (implies
    (and
      (<
        i@48@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))
      (<= 0 i@48@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
          i@48@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
            i@48@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
            i@48@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
    i@48@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               766
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      94
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             729
;  :mk-clause               79
;  :num-allocs              4154993
;  :num-checks              296
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            157822)
(push) ; 3
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               766
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      94
;  :arith-assert-upper      75
;  :arith-conflicts         20
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             729
;  :mk-clause               79
;  :num-allocs              4154993
;  :num-checks              297
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            157841)
(declare-const $k@49@03 $Perm)
(assert ($Perm.isReadVar $k@49@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@49@03 $Perm.No) (< $Perm.No $k@49@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               766
;  :arith-add-rows          4
;  :arith-assert-diseq      28
;  :arith-assert-lower      96
;  :arith-assert-upper      76
;  :arith-conflicts         20
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               218
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             733
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              298
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            158039)
(declare-const $t@50@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03))
    (= $t@50@03 $t@20@03))
  (implies
    (< $Perm.No $k@49@03)
    (=
      $t@50@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))
(assert (<= $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)))
(assert (<= (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               776
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      77
;  :arith-conflicts         20
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         26
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               219
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             741
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              299
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            158740)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               776
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      78
;  :arith-conflicts         21
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         27
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               220
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             742
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              300
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            158818)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@47@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               776
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      78
;  :arith-conflicts         21
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         27
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               220
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             742
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              301
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            158829)
(push) ; 3
(assert (not (< $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               776
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      79
;  :arith-conflicts         22
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         28
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               221
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             743
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              302
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            158935)
(assert (not (= $t@50@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               781
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      79
;  :arith-conflicts         22
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         28
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               222
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             745
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              303
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            159322)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               781
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      80
;  :arith-conflicts         23
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         29
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               223
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             746
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              304
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            159400)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@47@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               781
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      80
;  :arith-conflicts         23
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         29
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               223
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             746
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              305
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            159411)
(push) ; 3
(assert (not (< $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               781
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      81
;  :arith-conflicts         24
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         30
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               224
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             747
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              306
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            159513)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               786
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      81
;  :arith-conflicts         24
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         30
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               224
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             748
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              307
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            159733)
(push) ; 3
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               786
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      81
;  :arith-conflicts         24
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         30
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               224
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             748
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              308
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            159752)
(push) ; 3
(assert (not (< $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               786
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      82
;  :arith-conflicts         25
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         31
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               225
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             749
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              309
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            159854)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               791
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      82
;  :arith-conflicts         25
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         31
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               226
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             751
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              310
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            160243)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               791
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      83
;  :arith-conflicts         26
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         32
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               227
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             752
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              311
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            160321)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@47@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               791
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      83
;  :arith-conflicts         26
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         32
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               227
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             752
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              312
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            160332)
(push) ; 3
(assert (not (< $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               791
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      84
;  :arith-conflicts         27
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         33
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               228
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             753
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              313
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            160434)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               796
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      84
;  :arith-conflicts         27
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         33
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               228
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             754
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              314
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            160674)
(push) ; 3
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               796
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      84
;  :arith-conflicts         27
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         33
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               228
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             754
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              315
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            160693)
(push) ; 3
(assert (not (< $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               796
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      85
;  :arith-conflicts         28
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         34
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               229
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             755
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              316
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            160795)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               801
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      85
;  :arith-conflicts         28
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         34
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               230
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             757
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              317
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            161204)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               801
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      86
;  :arith-conflicts         29
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         35
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               231
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             758
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              318
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            161282)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@47@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               801
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      86
;  :arith-conflicts         29
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         35
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               231
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             758
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              319
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            161293)
(push) ; 3
(assert (not (< $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               801
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      87
;  :arith-conflicts         30
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         36
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               232
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             759
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              320
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            161395)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               806
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      87
;  :arith-conflicts         30
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         36
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               232
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             760
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              321
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            161655)
(push) ; 3
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               806
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      87
;  :arith-conflicts         30
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         36
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               232
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             760
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              322
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            161674)
(push) ; 3
(assert (not (< $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               806
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      88
;  :arith-conflicts         31
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         37
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               233
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             761
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              323
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            161776)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               812
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      88
;  :arith-conflicts         31
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         37
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               234
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             764
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              324
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            162237)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               812
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      89
;  :arith-conflicts         32
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         38
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               235
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             765
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              325
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            162315)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@47@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               812
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      89
;  :arith-conflicts         32
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         38
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               235
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             765
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              326
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            162326)
(push) ; 3
(assert (not (< $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               812
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      97
;  :arith-assert-upper      90
;  :arith-conflicts         33
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         39
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               236
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             766
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              327
;  :propagations            47
;  :quant-instantiations    33
;  :rlimit-count            162428)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               819
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      98
;  :arith-assert-upper      90
;  :arith-conflicts         33
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         39
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               237
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             771
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              328
;  :propagations            47
;  :quant-instantiations    34
;  :rlimit-count            162998)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               819
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      98
;  :arith-assert-upper      91
;  :arith-conflicts         34
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         40
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               238
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             772
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              329
;  :propagations            47
;  :quant-instantiations    34
;  :rlimit-count            163076)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@47@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               819
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      98
;  :arith-assert-upper      91
;  :arith-conflicts         34
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         40
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               238
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             772
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              330
;  :propagations            47
;  :quant-instantiations    34
;  :rlimit-count            163087)
(push) ; 3
(assert (not (< $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               819
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      98
;  :arith-assert-upper      92
;  :arith-conflicts         35
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         41
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               239
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             773
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              331
;  :propagations            47
;  :quant-instantiations    34
;  :rlimit-count            163189)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               824
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      98
;  :arith-assert-upper      93
;  :arith-conflicts         35
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         41
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               240
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             776
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              332
;  :propagations            47
;  :quant-instantiations    34
;  :rlimit-count            163684)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               824
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      98
;  :arith-assert-upper      94
;  :arith-conflicts         36
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         42
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               241
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             777
;  :mk-clause               81
;  :num-allocs              4154993
;  :num-checks              333
;  :propagations            47
;  :quant-instantiations    34
;  :rlimit-count            163762)
(declare-const $k@51@03 $Perm)
(assert ($Perm.isReadVar $k@51@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@51@03 $Perm.No) (< $Perm.No $k@51@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               824
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      100
;  :arith-assert-upper      95
;  :arith-conflicts         36
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         42
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               242
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             781
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              334
;  :propagations            48
;  :quant-instantiations    34
;  :rlimit-count            163960)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@47@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               824
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      100
;  :arith-assert-upper      95
;  :arith-conflicts         36
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         42
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               242
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             781
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              335
;  :propagations            48
;  :quant-instantiations    34
;  :rlimit-count            163971)
(declare-const $t@52@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@16@03 $k@40@03))
    (=
      $t@52@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@51@03)
    (=
      $t@52@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03)))
(assert (<= (+ (- $k@16@03 $k@40@03) $k@51@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               834
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      96
;  :arith-conflicts         36
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         42
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               242
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             788
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              336
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            164798)
(push) ; 3
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               834
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      96
;  :arith-conflicts         36
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         42
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               242
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             788
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              337
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            164817)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               834
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      97
;  :arith-conflicts         37
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         43
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               243
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             789
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              338
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            164901)
(assert (not (= $t@52@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               840
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      97
;  :arith-conflicts         37
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         43
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               243
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             791
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              339
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            165256)
(push) ; 3
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               840
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      97
;  :arith-conflicts         37
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         43
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               243
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             791
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              340
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            165275)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               840
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      98
;  :arith-conflicts         38
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         44
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               244
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             792
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              341
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            165355)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               840
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      98
;  :arith-conflicts         38
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         44
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               244
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             792
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              342
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            165368)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      98
;  :arith-conflicts         38
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         44
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               245
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             794
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              343
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            165847)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      99
;  :arith-conflicts         39
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         45
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               246
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             795
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              344
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            165925)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@47@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      99
;  :arith-conflicts         39
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         45
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               246
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             795
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              345
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            165936)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      100
;  :arith-conflicts         40
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         46
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               247
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             796
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              346
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            166016
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               850
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      100
;  :arith-conflicts         40
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         46
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               247
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             797
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              347
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            166346)
(push) ; 3
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               850
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      100
;  :arith-conflicts         40
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         46
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               247
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             797
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              348
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            166365)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               850
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      101
;  :arith-conflicts         41
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         47
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               248
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             798
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              349
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            166445)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               855
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      101
;  :arith-conflicts         41
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         47
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               249
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             800
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              350
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            166944)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               855
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      102
;  :arith-conflicts         42
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         48
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               250
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             801
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              351
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            167022)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@47@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               855
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      102
;  :arith-conflicts         42
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         48
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               250
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             801
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              352
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            167033)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               855
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      103
;  :arith-conflicts         43
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         49
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               251
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             802
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              353
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            167113)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               860
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      103
;  :arith-conflicts         43
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         49
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               251
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             803
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              354
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            167463)
(push) ; 3
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               860
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      103
;  :arith-conflicts         43
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         49
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               251
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             803
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              355
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            167482)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               860
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      104
;  :arith-conflicts         44
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         50
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               252
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             804
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              356
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            167562)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))))
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               865
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      104
;  :arith-conflicts         44
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         50
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               253
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             806
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              357
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            168081)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               865
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      105
;  :arith-conflicts         45
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         51
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               254
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             807
;  :mk-clause               83
;  :num-allocs              4154993
;  :num-checks              358
;  :propagations            48
;  :quant-instantiations    35
;  :rlimit-count            168159)
(declare-const $k@53@03 $Perm)
(assert ($Perm.isReadVar $k@53@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@53@03 $Perm.No) (< $Perm.No $k@53@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               865
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      103
;  :arith-assert-upper      106
;  :arith-conflicts         45
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         51
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               255
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             811
;  :mk-clause               85
;  :num-allocs              4154993
;  :num-checks              359
;  :propagations            49
;  :quant-instantiations    35
;  :rlimit-count            168358)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@47@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               865
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      103
;  :arith-assert-upper      106
;  :arith-conflicts         45
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         51
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               255
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             811
;  :mk-clause               85
;  :num-allocs              4154993
;  :num-checks              360
;  :propagations            49
;  :quant-instantiations    35
;  :rlimit-count            168369)
(declare-const $t@54@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@17@03 $k@41@03))
    (=
      $t@54@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@53@03)
    (=
      $t@54@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@17@03 $k@41@03) $k@53@03)))
(assert (<= (+ (- $k@17@03 $k@41@03) $k@53@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@17@03 $k@41@03) $k@53@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      107
;  :arith-conflicts         45
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         51
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               255
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             818
;  :mk-clause               85
;  :num-allocs              4315164
;  :num-checks              361
;  :propagations            49
;  :quant-instantiations    36
;  :rlimit-count            169343)
(push) ; 3
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      107
;  :arith-conflicts         45
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         51
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               255
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             818
;  :mk-clause               85
;  :num-allocs              4315164
;  :num-checks              362
;  :propagations            49
;  :quant-instantiations    36
;  :rlimit-count            169362)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@17@03 $k@41@03) $k@53@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-add-rows          8
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      108
;  :arith-conflicts         46
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         52
;  :arith-pivots            15
;  :binary-propagations     16
;  :conflicts               256
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             819
;  :mk-clause               85
;  :num-allocs              4315164
;  :num-checks              363
;  :propagations            49
;  :quant-instantiations    36
;  :rlimit-count            169469)
(assert (not (= $t@54@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               881
;  :arith-add-rows          8
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      108
;  :arith-conflicts         46
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         52
;  :arith-pivots            15
;  :binary-propagations     16
;  :conflicts               256
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             821
;  :mk-clause               85
;  :num-allocs              4315164
;  :num-checks              364
;  :propagations            49
;  :quant-instantiations    36
;  :rlimit-count            169894)
(push) ; 3
(assert (not (< $Perm.No (- $k@13@03 $k@37@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               881
;  :arith-add-rows          8
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      108
;  :arith-conflicts         46
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         52
;  :arith-pivots            15
;  :binary-propagations     16
;  :conflicts               256
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             821
;  :mk-clause               85
;  :num-allocs              4315164
;  :num-checks              365
;  :propagations            49
;  :quant-instantiations    36
;  :rlimit-count            169913)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@17@03 $k@41@03) $k@53@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               881
;  :arith-add-rows          8
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      109
;  :arith-conflicts         47
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         53
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               257
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             822
;  :mk-clause               85
;  :num-allocs              4315164
;  :num-checks              366
;  :propagations            49
;  :quant-instantiations    36
;  :rlimit-count            170001)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               881
;  :arith-add-rows          8
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      109
;  :arith-conflicts         47
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         53
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               257
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             822
;  :mk-clause               85
;  :num-allocs              4315164
;  :num-checks              367
;  :propagations            49
;  :quant-instantiations    36
;  :rlimit-count            170014)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               886
;  :arith-add-rows          8
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      109
;  :arith-conflicts         47
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         53
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               258
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             824
;  :mk-clause               85
;  :num-allocs              4315164
;  :num-checks              368
;  :propagations            49
;  :quant-instantiations    36
;  :rlimit-count            170563)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               886
;  :arith-add-rows          8
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      110
;  :arith-conflicts         48
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         54
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               259
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             825
;  :mk-clause               85
;  :num-allocs              4315164
;  :num-checks              369
;  :propagations            49
;  :quant-instantiations    36
;  :rlimit-count            170641)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@47@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               886
;  :arith-add-rows          8
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      110
;  :arith-conflicts         48
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         54
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               259
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             825
;  :mk-clause               85
;  :num-allocs              4315164
;  :num-checks              370
;  :propagations            49
;  :quant-instantiations    36
;  :rlimit-count            170652)
(push) ; 3
(assert (not (< $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               886
;  :arith-add-rows          8
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      111
;  :arith-conflicts         49
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         55
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               260
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             826
;  :mk-clause               85
;  :num-allocs              4315164
;  :num-checks              371
;  :propagations            49
;  :quant-instantiations    36
;  :rlimit-count            170754)
(declare-const $k@55@03 $Perm)
(assert ($Perm.isReadVar $k@55@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@55@03 $Perm.No) (< $Perm.No $k@55@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               886
;  :arith-add-rows          8
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      112
;  :arith-conflicts         49
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         55
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               261
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             830
;  :mk-clause               87
;  :num-allocs              4315164
;  :num-checks              372
;  :propagations            50
;  :quant-instantiations    36
;  :rlimit-count            170953)
(set-option :timeout 10)
(push) ; 3
(assert (not (= diz@6@03 $t@50@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               886
;  :arith-add-rows          8
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      112
;  :arith-conflicts         49
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         55
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               261
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             830
;  :mk-clause               87
;  :num-allocs              4315164
;  :num-checks              373
;  :propagations            50
;  :quant-instantiations    36
;  :rlimit-count            170964)
(declare-const $t@56@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@13@03 $k@37@03))
    (=
      $t@56@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))))
  (implies
    (< $Perm.No $k@55@03)
    (=
      $t@56@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03)))
(assert (<= (+ (- $k@13@03 $k@37@03) $k@55@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))
  (not (= diz@6@03 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               896
;  :arith-add-rows          8
;  :arith-assert-diseq      31
;  :arith-assert-lower      107
;  :arith-assert-upper      113
;  :arith-conflicts         49
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         55
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               261
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             837
;  :mk-clause               87
;  :num-allocs              4315164
;  :num-checks              374
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            171682)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               896
;  :arith-add-rows          9
;  :arith-assert-diseq      31
;  :arith-assert-lower      107
;  :arith-assert-upper      114
;  :arith-conflicts         50
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         56
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               262
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             838
;  :mk-clause               87
;  :num-allocs              4315164
;  :num-checks              375
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            171789)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               896
;  :arith-add-rows          9
;  :arith-assert-diseq      31
;  :arith-assert-lower      107
;  :arith-assert-upper      114
;  :arith-conflicts         50
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         56
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               262
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             838
;  :mk-clause               87
;  :num-allocs              4315164
;  :num-checks              376
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            171800)
(push) ; 3
(assert (not (< $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               896
;  :arith-add-rows          9
;  :arith-assert-diseq      31
;  :arith-assert-lower      107
;  :arith-assert-upper      115
;  :arith-conflicts         51
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         57
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               263
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             839
;  :mk-clause               87
;  :num-allocs              4315164
;  :num-checks              377
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            171902)
(push) ; 3
(assert (not (= diz@6@03 $t@50@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               896
;  :arith-add-rows          9
;  :arith-assert-diseq      31
;  :arith-assert-lower      107
;  :arith-assert-upper      115
;  :arith-conflicts         51
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         57
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               263
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             839
;  :mk-clause               87
;  :num-allocs              4315164
;  :num-checks              378
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            171913)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               896
;  :arith-add-rows          9
;  :arith-assert-diseq      31
;  :arith-assert-lower      107
;  :arith-assert-upper      116
;  :arith-conflicts         52
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         58
;  :arith-pivots            19
;  :binary-propagations     16
;  :conflicts               264
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             840
;  :mk-clause               87
;  :num-allocs              4315164
;  :num-checks              379
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            172001)
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               896
;  :arith-add-rows          9
;  :arith-assert-diseq      31
;  :arith-assert-lower      107
;  :arith-assert-upper      116
;  :arith-conflicts         52
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         58
;  :arith-pivots            19
;  :binary-propagations     16
;  :conflicts               264
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             840
;  :mk-clause               87
;  :num-allocs              4315164
;  :num-checks              380
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            172012)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               896
;  :arith-add-rows          9
;  :arith-assert-diseq      31
;  :arith-assert-lower      107
;  :arith-assert-upper      117
;  :arith-conflicts         53
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         59
;  :arith-pivots            20
;  :binary-propagations     16
;  :conflicts               265
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             841
;  :mk-clause               87
;  :num-allocs              4315164
;  :num-checks              381
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            172100)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (= diz@6@03 $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               901
;  :arith-add-rows          9
;  :arith-assert-diseq      31
;  :arith-assert-lower      107
;  :arith-assert-upper      117
;  :arith-conflicts         53
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         59
;  :arith-pivots            20
;  :binary-propagations     16
;  :conflicts               265
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             842
;  :mk-clause               87
;  :num-allocs              4315164
;  :num-checks              382
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            172506)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               901
;  :arith-add-rows          9
;  :arith-assert-diseq      31
;  :arith-assert-lower      107
;  :arith-assert-upper      118
;  :arith-conflicts         54
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         60
;  :arith-pivots            21
;  :binary-propagations     16
;  :conflicts               266
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             843
;  :mk-clause               87
;  :num-allocs              4315164
;  :num-checks              383
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            172594)
(declare-const $k@57@03 $Perm)
(assert ($Perm.isReadVar $k@57@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@57@03 $Perm.No) (< $Perm.No $k@57@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               901
;  :arith-add-rows          9
;  :arith-assert-diseq      32
;  :arith-assert-lower      109
;  :arith-assert-upper      119
;  :arith-conflicts         54
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         60
;  :arith-pivots            21
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             847
;  :mk-clause               89
;  :num-allocs              4315164
;  :num-checks              384
;  :propagations            51
;  :quant-instantiations    37
;  :rlimit-count            172793)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               901
;  :arith-add-rows          9
;  :arith-assert-diseq      32
;  :arith-assert-lower      109
;  :arith-assert-upper      119
;  :arith-conflicts         54
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         60
;  :arith-pivots            21
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             847
;  :mk-clause               89
;  :num-allocs              4315164
;  :num-checks              385
;  :propagations            51
;  :quant-instantiations    37
;  :rlimit-count            172804)
(declare-const $t@58@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03))
    (= $t@58@03 $t@50@03))
  (implies
    (< $Perm.No $k@57@03)
    (=
      $t@58@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)))
(assert (<=
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               909
;  :arith-add-rows          13
;  :arith-assert-diseq      32
;  :arith-assert-lower      110
;  :arith-assert-upper      120
;  :arith-conflicts         54
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         60
;  :arith-pivots            22
;  :binary-propagations     16
;  :conflicts               268
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             856
;  :mk-clause               90
;  :num-allocs              4315164
;  :num-checks              386
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            173784)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               909
;  :arith-add-rows          13
;  :arith-assert-diseq      32
;  :arith-assert-lower      110
;  :arith-assert-upper      121
;  :arith-conflicts         55
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         61
;  :arith-pivots            22
;  :binary-propagations     16
;  :conflicts               269
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             857
;  :mk-clause               90
;  :num-allocs              4315164
;  :num-checks              387
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            173862)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@47@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               909
;  :arith-add-rows          13
;  :arith-assert-diseq      32
;  :arith-assert-lower      110
;  :arith-assert-upper      121
;  :arith-conflicts         55
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         61
;  :arith-pivots            22
;  :binary-propagations     16
;  :conflicts               269
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             857
;  :mk-clause               90
;  :num-allocs              4315164
;  :num-checks              388
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            173873)
(push) ; 3
(assert (not (<
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               909
;  :arith-add-rows          13
;  :arith-assert-diseq      32
;  :arith-assert-lower      110
;  :arith-assert-upper      122
;  :arith-conflicts         56
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         62
;  :arith-pivots            22
;  :binary-propagations     16
;  :conflicts               270
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   14
;  :datatype-splits         93
;  :decisions               111
;  :del-clause              63
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             858
;  :mk-clause               90
;  :num-allocs              4315164
;  :num-checks              389
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            173980)
(assert (= $t@58@03 $t@20@03))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] 0 <= sys__result
(assert (<= 0 sys__result@44@03))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] sys__result < 16
(assert (< sys__result@44@03 16))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; divisor__14 := 1
; [exec]
; i__13 := 0
(declare-const divisor__14@59@03 Int)
(declare-const __flatten_4__17@60@03 Int)
(declare-const i__13@61@03 Int)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@62@03 $Snap)
(assert (= $t@62@03 ($Snap.combine ($Snap.first $t@62@03) ($Snap.second $t@62@03))))
(declare-const $k@63@03 $Perm)
(assert ($Perm.isReadVar $k@63@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@63@03 $Perm.No) (< $Perm.No $k@63@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1095
;  :arith-add-rows          13
;  :arith-assert-diseq      33
;  :arith-assert-lower      114
;  :arith-assert-upper      125
;  :arith-conflicts         56
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         63
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               272
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             910
;  :mk-clause               94
;  :num-allocs              4315164
;  :num-checks              391
;  :propagations            53
;  :quant-instantiations    38
;  :rlimit-count            176142)
(assert (<= $Perm.No $k@63@03))
(assert (<= $k@63@03 $Perm.Write))
(assert (implies (< $Perm.No $k@63@03) (not (= diz@6@03 $Ref.null))))
(assert (=
  ($Snap.second $t@62@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@62@03))
    ($Snap.second ($Snap.second $t@62@03)))))
(assert (= ($Snap.first ($Snap.second $t@62@03)) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1101
;  :arith-add-rows          13
;  :arith-assert-diseq      33
;  :arith-assert-lower      114
;  :arith-assert-upper      126
;  :arith-conflicts         56
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         63
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               273
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             913
;  :mk-clause               94
;  :num-allocs              4315164
;  :num-checks              392
;  :propagations            53
;  :quant-instantiations    38
;  :rlimit-count            176385)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@62@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@62@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1107
;  :arith-add-rows          13
;  :arith-assert-diseq      33
;  :arith-assert-lower      114
;  :arith-assert-upper      126
;  :arith-conflicts         56
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         63
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               274
;  :datatype-accessor-ax    107
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             916
;  :mk-clause               94
;  :num-allocs              4315164
;  :num-checks              393
;  :propagations            53
;  :quant-instantiations    39
;  :rlimit-count            176657)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@62@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1112
;  :arith-add-rows          13
;  :arith-assert-diseq      33
;  :arith-assert-lower      114
;  :arith-assert-upper      126
;  :arith-conflicts         56
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         63
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               275
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             917
;  :mk-clause               94
;  :num-allocs              4315164
;  :num-checks              394
;  :propagations            53
;  :quant-instantiations    39
;  :rlimit-count            176834)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1118
;  :arith-add-rows          13
;  :arith-assert-diseq      33
;  :arith-assert-lower      114
;  :arith-assert-upper      126
;  :arith-conflicts         56
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         63
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               276
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               94
;  :num-allocs              4315164
;  :num-checks              395
;  :propagations            53
;  :quant-instantiations    39
;  :rlimit-count            177053)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1125
;  :arith-add-rows          13
;  :arith-assert-diseq      33
;  :arith-assert-lower      116
;  :arith-assert-upper      127
;  :arith-conflicts         56
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         63
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               277
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             925
;  :mk-clause               94
;  :num-allocs              4315164
;  :num-checks              396
;  :propagations            53
;  :quant-instantiations    41
;  :rlimit-count            177383)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1131
;  :arith-add-rows          13
;  :arith-assert-diseq      33
;  :arith-assert-lower      116
;  :arith-assert-upper      127
;  :arith-conflicts         56
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         63
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               278
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             927
;  :mk-clause               94
;  :num-allocs              4315164
;  :num-checks              397
;  :propagations            53
;  :quant-instantiations    41
;  :rlimit-count            177622)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))
  $Snap.unit))
; [eval] (forall i__18: Int :: { diz.ALU_m.Main_process_state[i__18] } 0 <= i__18 && i__18 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__18] == -1 || 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|)
(declare-const i__18@64@03 Int)
(push) ; 4
; [eval] 0 <= i__18 && i__18 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__18] == -1 || 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__18 && i__18 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__18
(push) ; 5
; [then-branch: 16 | 0 <= i__18@64@03 | live]
; [else-branch: 16 | !(0 <= i__18@64@03) | live]
(push) ; 6
; [then-branch: 16 | 0 <= i__18@64@03]
(assert (<= 0 i__18@64@03))
; [eval] i__18 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1139
;  :arith-add-rows          13
;  :arith-assert-diseq      33
;  :arith-assert-lower      119
;  :arith-assert-upper      128
;  :arith-conflicts         56
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         63
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               279
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             935
;  :mk-clause               94
;  :num-allocs              4315164
;  :num-checks              398
;  :propagations            53
;  :quant-instantiations    43
;  :rlimit-count            178061)
(pop) ; 6
(push) ; 6
; [else-branch: 16 | !(0 <= i__18@64@03)]
(assert (not (<= 0 i__18@64@03)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 17 | i__18@64@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__18@64@03 | live]
; [else-branch: 17 | !(i__18@64@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__18@64@03) | live]
(push) ; 6
; [then-branch: 17 | i__18@64@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__18@64@03]
(assert (and
  (<
    i__18@64@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
  (<= 0 i__18@64@03)))
; [eval] diz.ALU_m.Main_process_state[i__18] == -1 || 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__18] == -1
; [eval] diz.ALU_m.Main_process_state[i__18]
(push) ; 7
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1140
;  :arith-add-rows          13
;  :arith-assert-diseq      33
;  :arith-assert-lower      120
;  :arith-assert-upper      129
;  :arith-conflicts         56
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               280
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             937
;  :mk-clause               94
;  :num-allocs              4315164
;  :num-checks              399
;  :propagations            53
;  :quant-instantiations    43
;  :rlimit-count            178222)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__18@64@03 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1140
;  :arith-add-rows          13
;  :arith-assert-diseq      33
;  :arith-assert-lower      120
;  :arith-assert-upper      129
;  :arith-conflicts         56
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               280
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             937
;  :mk-clause               94
;  :num-allocs              4315164
;  :num-checks              400
;  :propagations            53
;  :quant-instantiations    43
;  :rlimit-count            178231)
; [eval] -1
(push) ; 7
; [then-branch: 18 | First:(Second:(Second:(Second:($t@62@03))))[i__18@64@03] == -1 | live]
; [else-branch: 18 | First:(Second:(Second:(Second:($t@62@03))))[i__18@64@03] != -1 | live]
(push) ; 8
; [then-branch: 18 | First:(Second:(Second:(Second:($t@62@03))))[i__18@64@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__18@64@03)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 18 | First:(Second:(Second:(Second:($t@62@03))))[i__18@64@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__18@64@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__18]
; [eval] diz.ALU_m.Main_process_state[i__18]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1140
;  :arith-add-rows          13
;  :arith-assert-diseq      33
;  :arith-assert-lower      120
;  :arith-assert-upper      129
;  :arith-conflicts         56
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               281
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             938
;  :mk-clause               94
;  :num-allocs              4315164
;  :num-checks              401
;  :propagations            53
;  :quant-instantiations    43
;  :rlimit-count            178445)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__18@64@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1140
;  :arith-add-rows          13
;  :arith-assert-diseq      33
;  :arith-assert-lower      120
;  :arith-assert-upper      129
;  :arith-conflicts         56
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               281
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             938
;  :mk-clause               94
;  :num-allocs              4315164
;  :num-checks              402
;  :propagations            53
;  :quant-instantiations    43
;  :rlimit-count            178454)
(push) ; 9
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__18@64@03] | live]
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__18@64@03]) | live]
(push) ; 10
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__18@64@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__18@64@03)))
; [eval] diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__18]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1140
;  :arith-add-rows          13
;  :arith-assert-diseq      34
;  :arith-assert-lower      123
;  :arith-assert-upper      129
;  :arith-conflicts         56
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               282
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             941
;  :mk-clause               95
;  :num-allocs              4315164
;  :num-checks              403
;  :propagations            53
;  :quant-instantiations    43
;  :rlimit-count            178617)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__18@64@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1140
;  :arith-add-rows          13
;  :arith-assert-diseq      34
;  :arith-assert-lower      123
;  :arith-assert-upper      129
;  :arith-conflicts         56
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               282
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             941
;  :mk-clause               95
;  :num-allocs              4315164
;  :num-checks              404
;  :propagations            53
;  :quant-instantiations    43
;  :rlimit-count            178626)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1140
;  :arith-add-rows          13
;  :arith-assert-diseq      34
;  :arith-assert-lower      123
;  :arith-assert-upper      129
;  :arith-conflicts         56
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               283
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              89
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             941
;  :mk-clause               95
;  :num-allocs              4315164
;  :num-checks              405
;  :propagations            53
;  :quant-instantiations    43
;  :rlimit-count            178674)
(pop) ; 10
(push) ; 10
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__18@64@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__18@64@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 17 | !(i__18@64@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__18@64@03)]
(assert (not
  (and
    (<
      i__18@64@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
    (<= 0 i__18@64@03))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__18@64@03 Int)) (!
  (implies
    (and
      (<
        i__18@64@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__18@64@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__18@64@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__18@64@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__18@64@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__18@64@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1145
;  :arith-add-rows          13
;  :arith-assert-diseq      34
;  :arith-assert-lower      123
;  :arith-assert-upper      129
;  :arith-conflicts         56
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               284
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             943
;  :mk-clause               95
;  :num-allocs              4315164
;  :num-checks              406
;  :propagations            53
;  :quant-instantiations    43
;  :rlimit-count            179299)
(declare-const $k@65@03 $Perm)
(assert ($Perm.isReadVar $k@65@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@65@03 $Perm.No) (< $Perm.No $k@65@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1145
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      130
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               285
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             947
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              407
;  :propagations            54
;  :quant-instantiations    43
;  :rlimit-count            179497)
(assert (<= $Perm.No $k@65@03))
(assert (<= $k@65@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@65@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1151
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               286
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             950
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              408
;  :propagations            54
;  :quant-instantiations    43
;  :rlimit-count            179820)
(push) ; 4
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1151
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               287
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             950
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              409
;  :propagations            54
;  :quant-instantiations    43
;  :rlimit-count            179868)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1157
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               288
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             953
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              410
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            180224)
(push) ; 4
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1157
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               289
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             953
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              411
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            180272)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1162
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               290
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             954
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              412
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            180529)
(push) ; 4
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1162
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               291
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             954
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              413
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            180577)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1167
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               292
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             955
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              414
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            180844)
(push) ; 4
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1167
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               293
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             955
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              415
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            180892)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1172
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               294
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             956
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              416
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            181169)
(push) ; 4
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1172
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               295
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             956
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              417
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            181217)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1177
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               296
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             957
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              418
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            181504)
(push) ; 4
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1177
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               297
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             957
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              419
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            181552)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1182
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               298
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             958
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              420
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            181849)
(push) ; 4
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1182
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               299
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             958
;  :mk-clause               97
;  :num-allocs              4315164
;  :num-checks              421
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            181897)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1188
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               300
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             960
;  :mk-clause               97
;  :num-allocs              4484357
;  :num-checks              422
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            182236)
(push) ; 4
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1188
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      125
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               301
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             960
;  :mk-clause               97
;  :num-allocs              4484357
;  :num-checks              423
;  :propagations            54
;  :quant-instantiations    44
;  :rlimit-count            182284)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1195
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      126
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               302
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             964
;  :mk-clause               97
;  :num-allocs              4484357
;  :num-checks              424
;  :propagations            54
;  :quant-instantiations    45
;  :rlimit-count            182731)
(push) ; 4
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1195
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      126
;  :arith-assert-upper      131
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               303
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             964
;  :mk-clause               97
;  :num-allocs              4484357
;  :num-checks              425
;  :propagations            54
;  :quant-instantiations    45
;  :rlimit-count            182779)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1200
;  :arith-add-rows          13
;  :arith-assert-diseq      35
;  :arith-assert-lower      126
;  :arith-assert-upper      132
;  :arith-conflicts         56
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               304
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             966
;  :mk-clause               97
;  :num-allocs              4484357
;  :num-checks              426
;  :propagations            54
;  :quant-instantiations    45
;  :rlimit-count            183153)
(declare-const $k@66@03 $Perm)
(assert ($Perm.isReadVar $k@66@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@66@03 $Perm.No) (< $Perm.No $k@66@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1200
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      133
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               305
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             970
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              427
;  :propagations            55
;  :quant-instantiations    45
;  :rlimit-count            183351)
(assert (<= $Perm.No $k@66@03))
(assert (<= $k@66@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@66@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1206
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               306
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             973
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              428
;  :propagations            55
;  :quant-instantiations    45
;  :rlimit-count            183774)
(push) ; 4
(assert (not (< $Perm.No $k@66@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1206
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               307
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             973
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              429
;  :propagations            55
;  :quant-instantiations    45
;  :rlimit-count            183822)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1212
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               308
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             976
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              430
;  :propagations            55
;  :quant-instantiations    46
;  :rlimit-count            184278)
(push) ; 4
(assert (not (< $Perm.No $k@66@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1212
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               309
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             976
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              431
;  :propagations            55
;  :quant-instantiations    46
;  :rlimit-count            184326)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1212
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               309
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             976
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              432
;  :propagations            55
;  :quant-instantiations    46
;  :rlimit-count            184339)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1217
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               310
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             977
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              433
;  :propagations            55
;  :quant-instantiations    46
;  :rlimit-count            184696)
(push) ; 4
(assert (not (< $Perm.No $k@66@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1217
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               311
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             977
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              434
;  :propagations            55
;  :quant-instantiations    46
;  :rlimit-count            184744)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1222
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               312
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             978
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              435
;  :propagations            55
;  :quant-instantiations    46
;  :rlimit-count            185111)
(push) ; 4
(assert (not (< $Perm.No $k@66@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1222
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               313
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             978
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              436
;  :propagations            55
;  :quant-instantiations    46
;  :rlimit-count            185159)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1227
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               314
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             979
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              437
;  :propagations            55
;  :quant-instantiations    46
;  :rlimit-count            185536)
(push) ; 4
(assert (not (< $Perm.No $k@66@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1227
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               315
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             979
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              438
;  :propagations            55
;  :quant-instantiations    46
;  :rlimit-count            185584)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1232
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               316
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             980
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              439
;  :propagations            55
;  :quant-instantiations    46
;  :rlimit-count            185971)
(push) ; 4
(assert (not (< $Perm.No $k@66@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1232
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               317
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             980
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              440
;  :propagations            55
;  :quant-instantiations    46
;  :rlimit-count            186019)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1237
;  :arith-add-rows          13
;  :arith-assert-diseq      36
;  :arith-assert-lower      128
;  :arith-assert-upper      134
;  :arith-conflicts         56
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               318
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             981
;  :mk-clause               99
;  :num-allocs              4484357
;  :num-checks              441
;  :propagations            55
;  :quant-instantiations    46
;  :rlimit-count            186416)
(declare-const $k@67@03 $Perm)
(assert ($Perm.isReadVar $k@67@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@67@03 $Perm.No) (< $Perm.No $k@67@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1237
;  :arith-add-rows          13
;  :arith-assert-diseq      37
;  :arith-assert-lower      130
;  :arith-assert-upper      135
;  :arith-conflicts         56
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               319
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             985
;  :mk-clause               101
;  :num-allocs              4484357
;  :num-checks              442
;  :propagations            56
;  :quant-instantiations    46
;  :rlimit-count            186615)
(assert (<= $Perm.No $k@67@03))
(assert (<= $k@67@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@67@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1243
;  :arith-add-rows          13
;  :arith-assert-diseq      37
;  :arith-assert-lower      130
;  :arith-assert-upper      136
;  :arith-conflicts         56
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               320
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             988
;  :mk-clause               101
;  :num-allocs              4484357
;  :num-checks              443
;  :propagations            56
;  :quant-instantiations    46
;  :rlimit-count            187108)
(push) ; 4
(assert (not (< $Perm.No $k@67@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1243
;  :arith-add-rows          13
;  :arith-assert-diseq      37
;  :arith-assert-lower      130
;  :arith-assert-upper      136
;  :arith-conflicts         56
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               321
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             988
;  :mk-clause               101
;  :num-allocs              4484357
;  :num-checks              444
;  :propagations            56
;  :quant-instantiations    46
;  :rlimit-count            187156)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1249
;  :arith-add-rows          13
;  :arith-assert-diseq      37
;  :arith-assert-lower      130
;  :arith-assert-upper      136
;  :arith-conflicts         56
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               322
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             991
;  :mk-clause               101
;  :num-allocs              4484357
;  :num-checks              445
;  :propagations            56
;  :quant-instantiations    47
;  :rlimit-count            187690)
(push) ; 4
(assert (not (< $Perm.No $k@67@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1249
;  :arith-add-rows          13
;  :arith-assert-diseq      37
;  :arith-assert-lower      130
;  :arith-assert-upper      136
;  :arith-conflicts         56
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               323
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             991
;  :mk-clause               101
;  :num-allocs              4484357
;  :num-checks              446
;  :propagations            56
;  :quant-instantiations    47
;  :rlimit-count            187738)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1249
;  :arith-add-rows          13
;  :arith-assert-diseq      37
;  :arith-assert-lower      130
;  :arith-assert-upper      136
;  :arith-conflicts         56
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               323
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             991
;  :mk-clause               101
;  :num-allocs              4484357
;  :num-checks              447
;  :propagations            56
;  :quant-instantiations    47
;  :rlimit-count            187751)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1254
;  :arith-add-rows          13
;  :arith-assert-diseq      37
;  :arith-assert-lower      130
;  :arith-assert-upper      136
;  :arith-conflicts         56
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               324
;  :datatype-accessor-ax    133
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             992
;  :mk-clause               101
;  :num-allocs              4484357
;  :num-checks              448
;  :propagations            56
;  :quant-instantiations    47
;  :rlimit-count            188178)
(push) ; 4
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1254
;  :arith-add-rows          13
;  :arith-assert-diseq      37
;  :arith-assert-lower      130
;  :arith-assert-upper      136
;  :arith-conflicts         56
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               325
;  :datatype-accessor-ax    133
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             992
;  :mk-clause               101
;  :num-allocs              4484357
;  :num-checks              449
;  :propagations            56
;  :quant-instantiations    47
;  :rlimit-count            188226)
(declare-const $k@68@03 $Perm)
(assert ($Perm.isReadVar $k@68@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@68@03 $Perm.No) (< $Perm.No $k@68@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1254
;  :arith-add-rows          13
;  :arith-assert-diseq      38
;  :arith-assert-lower      132
;  :arith-assert-upper      137
;  :arith-conflicts         56
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         64
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               326
;  :datatype-accessor-ax    133
;  :datatype-constructor-ax 173
;  :datatype-occurs-check   20
;  :datatype-splits         128
;  :decisions               166
;  :del-clause              90
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             996
;  :mk-clause               103
;  :num-allocs              4484357
;  :num-checks              450
;  :propagations            57
;  :quant-instantiations    47
;  :rlimit-count            188424)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1643
;  :arith-add-rows          14
;  :arith-assert-diseq      38
;  :arith-assert-lower      137
;  :arith-assert-upper      142
;  :arith-conflicts         56
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         69
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               328
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              100
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1098
;  :mk-clause               113
;  :num-allocs              4658066
;  :num-checks              451
;  :propagations            61
;  :quant-instantiations    47
;  :rlimit-count            190848
;  :time                    0.00)
(assert (<= $Perm.No $k@68@03))
(assert (<= $k@68@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@68@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1649
;  :arith-add-rows          14
;  :arith-assert-diseq      38
;  :arith-assert-lower      137
;  :arith-assert-upper      143
;  :arith-conflicts         56
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         69
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               329
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              100
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1101
;  :mk-clause               113
;  :num-allocs              4658066
;  :num-checks              452
;  :propagations            61
;  :quant-instantiations    47
;  :rlimit-count            191371)
(push) ; 4
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1649
;  :arith-add-rows          14
;  :arith-assert-diseq      38
;  :arith-assert-lower      137
;  :arith-assert-upper      143
;  :arith-conflicts         56
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         69
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               330
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              100
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1101
;  :mk-clause               113
;  :num-allocs              4658066
;  :num-checks              453
;  :propagations            61
;  :quant-instantiations    47
;  :rlimit-count            191419)
(push) ; 4
(assert (not (< $Perm.No $k@68@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1649
;  :arith-add-rows          14
;  :arith-assert-diseq      38
;  :arith-assert-lower      137
;  :arith-assert-upper      143
;  :arith-conflicts         56
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         69
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               331
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              100
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1101
;  :mk-clause               113
;  :num-allocs              4658066
;  :num-checks              454
;  :propagations            61
;  :quant-instantiations    47
;  :rlimit-count            191467)
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1649
;  :arith-add-rows          14
;  :arith-assert-diseq      38
;  :arith-assert-lower      137
;  :arith-assert-upper      143
;  :arith-conflicts         56
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         69
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               332
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              100
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1101
;  :mk-clause               113
;  :num-allocs              4658066
;  :num-checks              455
;  :propagations            61
;  :quant-instantiations    47
;  :rlimit-count            191515)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 4
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1654
;  :arith-add-rows          14
;  :arith-assert-diseq      38
;  :arith-assert-lower      137
;  :arith-assert-upper      143
;  :arith-conflicts         56
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         69
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               333
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              100
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1104
;  :mk-clause               113
;  :num-allocs              4658066
;  :num-checks              456
;  :propagations            61
;  :quant-instantiations    48
;  :rlimit-count            192019)
(push) ; 4
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1654
;  :arith-add-rows          14
;  :arith-assert-diseq      38
;  :arith-assert-lower      137
;  :arith-assert-upper      143
;  :arith-conflicts         56
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         69
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               334
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              100
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1104
;  :mk-clause               113
;  :num-allocs              4658066
;  :num-checks              457
;  :propagations            61
;  :quant-instantiations    48
;  :rlimit-count            192067)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  diz@6@03))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] i__13 < pos
(pop) ; 4
(push) ; 4
; [eval] !(i__13 < pos)
; [eval] i__13 < pos
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(declare-const $k@69@03 $Perm)
(assert ($Perm.isReadVar $k@69@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@69@03 $Perm.No) (< $Perm.No $k@69@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1657
;  :arith-add-rows          14
;  :arith-assert-diseq      39
;  :arith-assert-lower      139
;  :arith-assert-upper      144
;  :arith-conflicts         56
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         69
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               335
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              110
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1109
;  :mk-clause               115
;  :num-allocs              4658066
;  :num-checks              458
;  :propagations            62
;  :quant-instantiations    48
;  :rlimit-count            192420)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ (- $k@13@03 $k@37@03) $k@55@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          14
;  :arith-assert-diseq      39
;  :arith-assert-lower      139
;  :arith-assert-upper      145
;  :arith-conflicts         57
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         69
;  :arith-pivots            33
;  :binary-propagations     16
;  :conflicts               336
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1111
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              459
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            192508)
(assert (< $k@69@03 (+ (- $k@13@03 $k@37@03) $k@55@03)))
(assert (<= $Perm.No (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))
(assert (<= (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      141
;  :arith-assert-upper      147
;  :arith-conflicts         58
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         70
;  :arith-pivots            34
;  :binary-propagations     16
;  :conflicts               337
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1115
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              460
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            192784)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= $t@56@03 $Ref.null))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      141
;  :arith-assert-upper      147
;  :arith-conflicts         58
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         70
;  :arith-pivots            34
;  :binary-propagations     16
;  :conflicts               337
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1115
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              461
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            192802)
(assert (not (= $t@56@03 $Ref.null)))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      141
;  :arith-assert-upper      148
;  :arith-conflicts         59
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         71
;  :arith-pivots            35
;  :binary-propagations     16
;  :conflicts               338
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1116
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              462
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            192911)
(push) ; 4
(assert (not (= $t@47@03 $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      141
;  :arith-assert-upper      148
;  :arith-conflicts         59
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         71
;  :arith-pivots            35
;  :binary-propagations     16
;  :conflicts               338
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1116
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              463
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            192922)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      141
;  :arith-assert-upper      149
;  :arith-conflicts         60
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         72
;  :arith-pivots            36
;  :binary-propagations     16
;  :conflicts               339
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1117
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              464
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            193011)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      141
;  :arith-assert-upper      149
;  :arith-conflicts         60
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         72
;  :arith-pivots            36
;  :binary-propagations     16
;  :conflicts               339
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1117
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              465
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            193022)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      141
;  :arith-assert-upper      150
;  :arith-conflicts         61
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         73
;  :arith-pivots            37
;  :binary-propagations     16
;  :conflicts               340
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1118
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              466
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            193111)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      141
;  :arith-assert-upper      150
;  :arith-conflicts         61
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         73
;  :arith-pivots            37
;  :binary-propagations     16
;  :conflicts               340
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1118
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              467
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            193122)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      141
;  :arith-assert-upper      151
;  :arith-conflicts         62
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         74
;  :arith-pivots            38
;  :binary-propagations     16
;  :conflicts               341
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1119
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              468
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            193211)
(push) ; 4
(assert (not (= $t@47@03 $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      141
;  :arith-assert-upper      151
;  :arith-conflicts         62
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         74
;  :arith-pivots            38
;  :binary-propagations     16
;  :conflicts               341
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1119
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              469
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            193222)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      141
;  :arith-assert-upper      152
;  :arith-conflicts         63
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         75
;  :arith-pivots            39
;  :binary-propagations     16
;  :conflicts               342
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1120
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              470
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            193311)
(push) ; 4
(assert (not (= $t@47@03 $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      141
;  :arith-assert-upper      152
;  :arith-conflicts         63
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         75
;  :arith-pivots            39
;  :binary-propagations     16
;  :conflicts               342
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1120
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              471
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            193322)
; [eval] (forall i__18: Int :: { diz.ALU_m.Main_process_state[i__18] } 0 <= i__18 && i__18 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__18] == -1 || 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|)
(declare-const i__18@70@03 Int)
(push) ; 4
; [eval] 0 <= i__18 && i__18 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__18] == -1 || 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__18 && i__18 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__18
(push) ; 5
; [then-branch: 20 | 0 <= i__18@70@03 | live]
; [else-branch: 20 | !(0 <= i__18@70@03) | live]
(push) ; 6
; [then-branch: 20 | 0 <= i__18@70@03]
(assert (<= 0 i__18@70@03))
; [eval] i__18 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      142
;  :arith-assert-upper      153
;  :arith-conflicts         64
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         76
;  :arith-pivots            40
;  :binary-propagations     16
;  :conflicts               343
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1122
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              472
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            193463)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1658
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      142
;  :arith-assert-upper      153
;  :arith-conflicts         64
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         76
;  :arith-pivots            40
;  :binary-propagations     16
;  :conflicts               343
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1122
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              473
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            193474)
(pop) ; 6
(push) ; 6
; [else-branch: 20 | !(0 <= i__18@70@03)]
(assert (not (<= 0 i__18@70@03)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 21 | i__18@70@03 < |First:(Second:(Second:(Second:($t@45@03))))| && 0 <= i__18@70@03 | live]
; [else-branch: 21 | !(i__18@70@03 < |First:(Second:(Second:(Second:($t@45@03))))| && 0 <= i__18@70@03) | live]
(push) ; 6
; [then-branch: 21 | i__18@70@03 < |First:(Second:(Second:(Second:($t@45@03))))| && 0 <= i__18@70@03]
(assert (and
  (<
    i__18@70@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))
  (<= 0 i__18@70@03)))
; [eval] diz.ALU_m.Main_process_state[i__18] == -1 || 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__18] == -1
; [eval] diz.ALU_m.Main_process_state[i__18]
(push) ; 7
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1659
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      143
;  :arith-assert-upper      155
;  :arith-conflicts         65
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         78
;  :arith-pivots            41
;  :binary-propagations     16
;  :conflicts               344
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1125
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              474
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            193676)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1659
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      143
;  :arith-assert-upper      155
;  :arith-conflicts         65
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         78
;  :arith-pivots            41
;  :binary-propagations     16
;  :conflicts               344
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1125
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              475
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            193687)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__18@70@03 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1659
;  :arith-add-rows          15
;  :arith-assert-diseq      39
;  :arith-assert-lower      143
;  :arith-assert-upper      155
;  :arith-conflicts         65
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         78
;  :arith-pivots            41
;  :binary-propagations     16
;  :conflicts               344
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1125
;  :mk-clause               117
;  :num-allocs              4658066
;  :num-checks              476
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            193696)
; [eval] -1
(push) ; 7
; [then-branch: 22 | First:(Second:(Second:(Second:($t@45@03))))[i__18@70@03] == -1 | live]
; [else-branch: 22 | First:(Second:(Second:(Second:($t@45@03))))[i__18@70@03] != -1 | live]
(push) ; 8
; [then-branch: 22 | First:(Second:(Second:(Second:($t@45@03))))[i__18@70@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
    i__18@70@03)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 22 | First:(Second:(Second:(Second:($t@45@03))))[i__18@70@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
      i__18@70@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__18]
; [eval] diz.ALU_m.Main_process_state[i__18]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1661
;  :arith-add-rows          15
;  :arith-assert-diseq      41
;  :arith-assert-lower      146
;  :arith-assert-upper      157
;  :arith-conflicts         66
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         79
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               345
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1133
;  :mk-clause               129
;  :num-allocs              4658066
;  :num-checks              477
;  :propagations            68
;  :quant-instantiations    49
;  :rlimit-count            194007)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1661
;  :arith-add-rows          15
;  :arith-assert-diseq      41
;  :arith-assert-lower      146
;  :arith-assert-upper      157
;  :arith-conflicts         66
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         79
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               345
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1133
;  :mk-clause               129
;  :num-allocs              4658066
;  :num-checks              478
;  :propagations            68
;  :quant-instantiations    49
;  :rlimit-count            194018)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__18@70@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1661
;  :arith-add-rows          15
;  :arith-assert-diseq      41
;  :arith-assert-lower      146
;  :arith-assert-upper      157
;  :arith-conflicts         66
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         79
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               345
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1133
;  :mk-clause               129
;  :num-allocs              4658066
;  :num-checks              479
;  :propagations            68
;  :quant-instantiations    49
;  :rlimit-count            194027)
(push) ; 9
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@45@03))))[i__18@70@03] | live]
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@45@03))))[i__18@70@03]) | live]
(push) ; 10
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@45@03))))[i__18@70@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
    i__18@70@03)))
; [eval] diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__18]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1663
;  :arith-add-rows          15
;  :arith-assert-diseq      41
;  :arith-assert-lower      148
;  :arith-assert-upper      159
;  :arith-conflicts         67
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         81
;  :arith-pivots            44
;  :binary-propagations     16
;  :conflicts               346
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1138
;  :mk-clause               129
;  :num-allocs              4658066
;  :num-checks              480
;  :propagations            68
;  :quant-instantiations    49
;  :rlimit-count            194242)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1663
;  :arith-add-rows          15
;  :arith-assert-diseq      41
;  :arith-assert-lower      148
;  :arith-assert-upper      159
;  :arith-conflicts         67
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         81
;  :arith-pivots            44
;  :binary-propagations     16
;  :conflicts               346
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1138
;  :mk-clause               129
;  :num-allocs              4658066
;  :num-checks              481
;  :propagations            68
;  :quant-instantiations    49
;  :rlimit-count            194253)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__18@70@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1663
;  :arith-add-rows          15
;  :arith-assert-diseq      41
;  :arith-assert-lower      148
;  :arith-assert-upper      159
;  :arith-conflicts         67
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         81
;  :arith-pivots            44
;  :binary-propagations     16
;  :conflicts               346
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1138
;  :mk-clause               129
;  :num-allocs              4658066
;  :num-checks              482
;  :propagations            68
;  :quant-instantiations    49
;  :rlimit-count            194262)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1663
;  :arith-add-rows          15
;  :arith-assert-diseq      41
;  :arith-assert-lower      148
;  :arith-assert-upper      160
;  :arith-conflicts         68
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         82
;  :arith-pivots            45
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1139
;  :mk-clause               129
;  :num-allocs              4658066
;  :num-checks              483
;  :propagations            68
;  :quant-instantiations    49
;  :rlimit-count            194351)
(push) ; 11
(assert (not (= $t@47@03 $t@56@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1663
;  :arith-add-rows          15
;  :arith-assert-diseq      41
;  :arith-assert-lower      148
;  :arith-assert-upper      160
;  :arith-conflicts         68
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         82
;  :arith-pivots            45
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              112
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1139
;  :mk-clause               129
;  :num-allocs              4658066
;  :num-checks              484
;  :propagations            68
;  :quant-instantiations    49
;  :rlimit-count            194362)
(pop) ; 10
(push) ; 10
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@45@03))))[i__18@70@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
      i__18@70@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 21 | !(i__18@70@03 < |First:(Second:(Second:(Second:($t@45@03))))| && 0 <= i__18@70@03)]
(assert (not
  (and
    (<
      i__18@70@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))
    (<= 0 i__18@70@03))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__18@70@03 Int)) (!
  (implies
    (and
      (<
        i__18@70@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))
      (<= 0 i__18@70@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
          i__18@70@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
            i__18@70@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
            i__18@70@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
    i__18@70@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1663
;  :arith-add-rows          15
;  :arith-assert-diseq      42
;  :arith-assert-lower      149
;  :arith-assert-upper      161
;  :arith-conflicts         68
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         83
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               348
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              136
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1147
;  :mk-clause               141
;  :num-allocs              4658066
;  :num-checks              485
;  :propagations            70
;  :quant-instantiations    50
;  :rlimit-count            194811)
(assert (forall ((i__18@70@03 Int)) (!
  (implies
    (and
      (<
        i__18@70@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))
      (<= 0 i__18@70@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
          i__18@70@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
            i__18@70@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
            i__18@70@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@03)))))
    i__18@70@03))
  :qid |prog.l<no position>|)))
(declare-const $k@71@03 $Perm)
(assert ($Perm.isReadVar $k@71@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1663
;  :arith-add-rows          15
;  :arith-assert-diseq      43
;  :arith-assert-lower      151
;  :arith-assert-upper      163
;  :arith-conflicts         69
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         84
;  :arith-pivots            47
;  :binary-propagations     16
;  :conflicts               349
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              136
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1153
;  :mk-clause               143
;  :num-allocs              4658066
;  :num-checks              486
;  :propagations            71
;  :quant-instantiations    50
;  :rlimit-count            195410)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@71@03 $Perm.No) (< $Perm.No $k@71@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1663
;  :arith-add-rows          15
;  :arith-assert-diseq      43
;  :arith-assert-lower      151
;  :arith-assert-upper      163
;  :arith-conflicts         69
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         84
;  :arith-pivots            47
;  :binary-propagations     16
;  :conflicts               350
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              136
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1153
;  :mk-clause               143
;  :num-allocs              4658066
;  :num-checks              487
;  :propagations            71
;  :quant-instantiations    50
;  :rlimit-count            195460)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1663
;  :arith-add-rows          15
;  :arith-assert-diseq      43
;  :arith-assert-lower      151
;  :arith-assert-upper      163
;  :arith-conflicts         69
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         84
;  :arith-pivots            47
;  :binary-propagations     16
;  :conflicts               350
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              136
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1153
;  :mk-clause               143
;  :num-allocs              4658066
;  :num-checks              488
;  :propagations            71
;  :quant-instantiations    50
;  :rlimit-count            195471)
(push) ; 4
(assert (not (not
  (=
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          15
;  :arith-assert-diseq      43
;  :arith-assert-lower      151
;  :arith-assert-upper      164
;  :arith-conflicts         70
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         84
;  :arith-pivots            47
;  :binary-propagations     16
;  :conflicts               351
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1155
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              489
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            195578)
(assert (<
  $k@71@03
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)))
(assert (<=
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03)))
(assert (<=
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      166
;  :arith-conflicts         71
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         85
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               352
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1159
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              490
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            195882)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      166
;  :arith-conflicts         71
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         85
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               352
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1159
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              491
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            195893)
(push) ; 4
(assert (not (<
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      167
;  :arith-conflicts         72
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         86
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               353
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1160
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              492
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196001)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= $t@58@03 $Ref.null))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      167
;  :arith-conflicts         72
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         86
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               353
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1160
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              493
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196019)
(assert (not (= $t@58@03 $Ref.null)))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      168
;  :arith-conflicts         73
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         87
;  :arith-pivots            49
;  :binary-propagations     16
;  :conflicts               354
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1161
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              494
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196128)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      168
;  :arith-conflicts         73
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         87
;  :arith-pivots            49
;  :binary-propagations     16
;  :conflicts               354
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1161
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              495
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196139)
(push) ; 4
(assert (not (<
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      169
;  :arith-conflicts         74
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         88
;  :arith-pivots            49
;  :binary-propagations     16
;  :conflicts               355
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1162
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              496
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196247)
(push) ; 4
(assert (not (= $t@50@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      169
;  :arith-conflicts         74
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         88
;  :arith-pivots            49
;  :binary-propagations     16
;  :conflicts               355
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1162
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              497
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196258)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      170
;  :arith-conflicts         75
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         89
;  :arith-pivots            50
;  :binary-propagations     16
;  :conflicts               356
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1163
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              498
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196347)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      170
;  :arith-conflicts         75
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         89
;  :arith-pivots            50
;  :binary-propagations     16
;  :conflicts               356
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1163
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              499
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196358)
(push) ; 4
(assert (not (<
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      171
;  :arith-conflicts         76
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         90
;  :arith-pivots            50
;  :binary-propagations     16
;  :conflicts               357
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1164
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              500
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196466)
(push) ; 4
(assert (not (= $t@50@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      171
;  :arith-conflicts         76
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         90
;  :arith-pivots            50
;  :binary-propagations     16
;  :conflicts               357
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1164
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              501
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196477)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      172
;  :arith-conflicts         77
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         91
;  :arith-pivots            51
;  :binary-propagations     16
;  :conflicts               358
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1165
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              502
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196566)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      172
;  :arith-conflicts         77
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         91
;  :arith-pivots            51
;  :binary-propagations     16
;  :conflicts               358
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1165
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              503
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196577)
(push) ; 4
(assert (not (<
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      173
;  :arith-conflicts         78
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         92
;  :arith-pivots            51
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1166
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              504
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196685)
(push) ; 4
(assert (not (= $t@50@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      173
;  :arith-conflicts         78
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         92
;  :arith-pivots            51
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1166
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              505
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196696)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      174
;  :arith-conflicts         79
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         93
;  :arith-pivots            52
;  :binary-propagations     16
;  :conflicts               360
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1167
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              506
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196785)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      174
;  :arith-conflicts         79
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         93
;  :arith-pivots            52
;  :binary-propagations     16
;  :conflicts               360
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1167
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              507
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196796)
(push) ; 4
(assert (not (<
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      175
;  :arith-conflicts         80
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         94
;  :arith-pivots            52
;  :binary-propagations     16
;  :conflicts               361
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1168
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              508
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196904)
(push) ; 4
(assert (not (= $t@50@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      175
;  :arith-conflicts         80
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         94
;  :arith-pivots            52
;  :binary-propagations     16
;  :conflicts               361
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1168
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              509
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            196915)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      176
;  :arith-conflicts         81
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         95
;  :arith-pivots            53
;  :binary-propagations     16
;  :conflicts               362
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1169
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              510
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197004)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      176
;  :arith-conflicts         81
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         95
;  :arith-pivots            53
;  :binary-propagations     16
;  :conflicts               362
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1169
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              511
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197015)
(push) ; 4
(assert (not (<
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      177
;  :arith-conflicts         82
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         96
;  :arith-pivots            53
;  :binary-propagations     16
;  :conflicts               363
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1170
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              512
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197123)
(push) ; 4
(assert (not (= $t@50@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      177
;  :arith-conflicts         82
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         96
;  :arith-pivots            53
;  :binary-propagations     16
;  :conflicts               363
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1170
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              513
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197134)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      178
;  :arith-conflicts         83
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         97
;  :arith-pivots            54
;  :binary-propagations     16
;  :conflicts               364
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1171
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              514
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197223)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      178
;  :arith-conflicts         83
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         97
;  :arith-pivots            54
;  :binary-propagations     16
;  :conflicts               364
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1171
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              515
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197234)
(push) ; 4
(assert (not (<
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      179
;  :arith-conflicts         84
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         98
;  :arith-pivots            54
;  :binary-propagations     16
;  :conflicts               365
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1172
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              516
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197342)
(push) ; 4
(assert (not (= $t@50@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      179
;  :arith-conflicts         84
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         98
;  :arith-pivots            54
;  :binary-propagations     16
;  :conflicts               365
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1172
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              517
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197353)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      180
;  :arith-conflicts         85
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         99
;  :arith-pivots            55
;  :binary-propagations     16
;  :conflicts               366
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1173
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              518
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197442)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      180
;  :arith-conflicts         85
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         99
;  :arith-pivots            55
;  :binary-propagations     16
;  :conflicts               366
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1173
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              519
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197453)
(push) ; 4
(assert (not (<
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      181
;  :arith-conflicts         86
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         100
;  :arith-pivots            55
;  :binary-propagations     16
;  :conflicts               367
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1174
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              520
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197561)
(push) ; 4
(assert (not (= $t@50@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      181
;  :arith-conflicts         86
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         100
;  :arith-pivots            55
;  :binary-propagations     16
;  :conflicts               367
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1174
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              521
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197572)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      182
;  :arith-conflicts         87
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         101
;  :arith-pivots            56
;  :binary-propagations     16
;  :conflicts               368
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1175
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              522
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197661)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      182
;  :arith-conflicts         87
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         101
;  :arith-pivots            56
;  :binary-propagations     16
;  :conflicts               368
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1175
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              523
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197672)
(push) ; 4
(assert (not (<
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      183
;  :arith-conflicts         88
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         102
;  :arith-pivots            56
;  :binary-propagations     16
;  :conflicts               369
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1176
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              524
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197780)
(push) ; 4
(assert (not (= $t@50@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      43
;  :arith-assert-lower      153
;  :arith-assert-upper      183
;  :arith-conflicts         88
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         102
;  :arith-pivots            56
;  :binary-propagations     16
;  :conflicts               369
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1176
;  :mk-clause               145
;  :num-allocs              4658066
;  :num-checks              525
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            197791)
(declare-const $k@72@03 $Perm)
(assert ($Perm.isReadVar $k@72@03 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      44
;  :arith-assert-lower      155
;  :arith-assert-upper      185
;  :arith-conflicts         89
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         103
;  :arith-pivots            57
;  :binary-propagations     16
;  :conflicts               370
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1181
;  :mk-clause               147
;  :num-allocs              4658066
;  :num-checks              526
;  :propagations            73
;  :quant-instantiations    50
;  :rlimit-count            198028)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@72@03 $Perm.No) (< $Perm.No $k@72@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      44
;  :arith-assert-lower      155
;  :arith-assert-upper      185
;  :arith-conflicts         89
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         103
;  :arith-pivots            57
;  :binary-propagations     16
;  :conflicts               371
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1181
;  :mk-clause               147
;  :num-allocs              4658066
;  :num-checks              527
;  :propagations            73
;  :quant-instantiations    50
;  :rlimit-count            198078)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          18
;  :arith-assert-diseq      44
;  :arith-assert-lower      155
;  :arith-assert-upper      185
;  :arith-conflicts         89
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         103
;  :arith-pivots            57
;  :binary-propagations     16
;  :conflicts               371
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              138
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1181
;  :mk-clause               147
;  :num-allocs              4658066
;  :num-checks              528
;  :propagations            73
;  :quant-instantiations    50
;  :rlimit-count            198089)
(push) ; 4
(assert (not (not (= (+ (- $k@16@03 $k@40@03) $k@51@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          18
;  :arith-assert-diseq      44
;  :arith-assert-lower      155
;  :arith-assert-upper      186
;  :arith-conflicts         90
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         103
;  :arith-pivots            57
;  :binary-propagations     16
;  :conflicts               372
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1183
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              529
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            198169)
(assert (< $k@72@03 (+ (- $k@16@03 $k@40@03) $k@51@03)))
(assert (<= $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03)))
(assert (<= (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      188
;  :arith-conflicts         91
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         104
;  :arith-pivots            58
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1187
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              530
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            198446)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      188
;  :arith-conflicts         91
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         104
;  :arith-pivots            58
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1187
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              531
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            198457)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      189
;  :arith-conflicts         92
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         105
;  :arith-pivots            58
;  :binary-propagations     16
;  :conflicts               374
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1188
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              532
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            198538)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      189
;  :arith-conflicts         92
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         105
;  :arith-pivots            58
;  :binary-propagations     16
;  :conflicts               374
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1188
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              533
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            198551)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      190
;  :arith-conflicts         93
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         106
;  :arith-pivots            59
;  :binary-propagations     16
;  :conflicts               375
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1189
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              534
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            198640)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      190
;  :arith-conflicts         93
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         106
;  :arith-pivots            59
;  :binary-propagations     16
;  :conflicts               375
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1189
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              535
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            198651)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      191
;  :arith-conflicts         94
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         107
;  :arith-pivots            59
;  :binary-propagations     16
;  :conflicts               376
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1190
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              536
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            198732)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      192
;  :arith-conflicts         95
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         108
;  :arith-pivots            60
;  :binary-propagations     16
;  :conflicts               377
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1191
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              537
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            198821)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      192
;  :arith-conflicts         95
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         108
;  :arith-pivots            60
;  :binary-propagations     16
;  :conflicts               377
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1191
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              538
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            198832)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      193
;  :arith-conflicts         96
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         109
;  :arith-pivots            60
;  :binary-propagations     16
;  :conflicts               378
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1192
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              539
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            198913)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      194
;  :arith-conflicts         97
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         110
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               379
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1193
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              540
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            199002)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      194
;  :arith-conflicts         97
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         110
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               379
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1193
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              541
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            199013)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      195
;  :arith-conflicts         98
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         111
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               380
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1194
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              542
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            199094)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      196
;  :arith-conflicts         99
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         112
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               381
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1195
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              543
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            199183)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      196
;  :arith-conflicts         99
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         112
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               381
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1195
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              544
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            199194)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      197
;  :arith-conflicts         100
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         113
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               382
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1196
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              545
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            199275)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      198
;  :arith-conflicts         101
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         114
;  :arith-pivots            63
;  :binary-propagations     16
;  :conflicts               383
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1197
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              546
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            199364)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      198
;  :arith-conflicts         101
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         114
;  :arith-pivots            63
;  :binary-propagations     16
;  :conflicts               383
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1197
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              547
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            199375)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@16@03 $k@40@03) $k@51@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      44
;  :arith-assert-lower      157
;  :arith-assert-upper      199
;  :arith-conflicts         102
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         115
;  :arith-pivots            63
;  :binary-propagations     16
;  :conflicts               384
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1198
;  :mk-clause               149
;  :num-allocs              4658066
;  :num-checks              548
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            199456)
(declare-const $k@73@03 $Perm)
(assert ($Perm.isReadVar $k@73@03 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      45
;  :arith-assert-lower      159
;  :arith-assert-upper      201
;  :arith-conflicts         103
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         116
;  :arith-pivots            64
;  :binary-propagations     16
;  :conflicts               385
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1203
;  :mk-clause               151
;  :num-allocs              4658066
;  :num-checks              549
;  :propagations            75
;  :quant-instantiations    50
;  :rlimit-count            199694)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@73@03 $Perm.No) (< $Perm.No $k@73@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      45
;  :arith-assert-lower      159
;  :arith-assert-upper      201
;  :arith-conflicts         103
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         116
;  :arith-pivots            64
;  :binary-propagations     16
;  :conflicts               386
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1203
;  :mk-clause               151
;  :num-allocs              4658066
;  :num-checks              550
;  :propagations            75
;  :quant-instantiations    50
;  :rlimit-count            199744)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          20
;  :arith-assert-diseq      45
;  :arith-assert-lower      159
;  :arith-assert-upper      201
;  :arith-conflicts         103
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         116
;  :arith-pivots            64
;  :binary-propagations     16
;  :conflicts               386
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              140
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1203
;  :mk-clause               151
;  :num-allocs              4658066
;  :num-checks              551
;  :propagations            75
;  :quant-instantiations    50
;  :rlimit-count            199755)
(push) ; 4
(assert (not (not (= (+ (- $k@17@03 $k@41@03) $k@53@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1666
;  :arith-add-rows          20
;  :arith-assert-diseq      45
;  :arith-assert-lower      159
;  :arith-assert-upper      202
;  :arith-conflicts         104
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         116
;  :arith-pivots            65
;  :binary-propagations     16
;  :conflicts               387
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              142
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1205
;  :mk-clause               153
;  :num-allocs              4658066
;  :num-checks              552
;  :propagations            76
;  :quant-instantiations    50
;  :rlimit-count            199843)
(assert (< $k@73@03 (+ (- $k@17@03 $k@41@03) $k@53@03)))
(assert (<= $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)))
(assert (<= (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1666
;  :arith-add-rows          21
;  :arith-assert-diseq      45
;  :arith-assert-lower      161
;  :arith-assert-upper      204
;  :arith-conflicts         105
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         117
;  :arith-pivots            66
;  :binary-propagations     16
;  :conflicts               388
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              142
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1209
;  :mk-clause               153
;  :num-allocs              4658066
;  :num-checks              553
;  :propagations            76
;  :quant-instantiations    50
;  :rlimit-count            200119)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1666
;  :arith-add-rows          21
;  :arith-assert-diseq      45
;  :arith-assert-lower      161
;  :arith-assert-upper      204
;  :arith-conflicts         105
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         117
;  :arith-pivots            66
;  :binary-propagations     16
;  :conflicts               388
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              142
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1209
;  :mk-clause               153
;  :num-allocs              4658066
;  :num-checks              554
;  :propagations            76
;  :quant-instantiations    50
;  :rlimit-count            200130)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@03 $k@41@03) $k@53@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1666
;  :arith-add-rows          21
;  :arith-assert-diseq      45
;  :arith-assert-lower      161
;  :arith-assert-upper      205
;  :arith-conflicts         106
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         118
;  :arith-pivots            67
;  :binary-propagations     16
;  :conflicts               389
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              142
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1210
;  :mk-clause               153
;  :num-allocs              4658066
;  :num-checks              555
;  :propagations            76
;  :quant-instantiations    50
;  :rlimit-count            200219)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1666
;  :arith-add-rows          21
;  :arith-assert-diseq      45
;  :arith-assert-lower      161
;  :arith-assert-upper      205
;  :arith-conflicts         106
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         118
;  :arith-pivots            67
;  :binary-propagations     16
;  :conflicts               389
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              142
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1210
;  :mk-clause               153
;  :num-allocs              4658066
;  :num-checks              556
;  :propagations            76
;  :quant-instantiations    50
;  :rlimit-count            200232)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1666
;  :arith-add-rows          21
;  :arith-assert-diseq      45
;  :arith-assert-lower      161
;  :arith-assert-upper      206
;  :arith-conflicts         107
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         119
;  :arith-pivots            68
;  :binary-propagations     16
;  :conflicts               390
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              142
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1211
;  :mk-clause               153
;  :num-allocs              4658066
;  :num-checks              557
;  :propagations            76
;  :quant-instantiations    50
;  :rlimit-count            200321)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1666
;  :arith-add-rows          21
;  :arith-assert-diseq      45
;  :arith-assert-lower      161
;  :arith-assert-upper      206
;  :arith-conflicts         107
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         119
;  :arith-pivots            68
;  :binary-propagations     16
;  :conflicts               390
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              142
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1211
;  :mk-clause               153
;  :num-allocs              4658066
;  :num-checks              558
;  :propagations            76
;  :quant-instantiations    50
;  :rlimit-count            200332)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@03 $k@41@03) $k@53@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1666
;  :arith-add-rows          21
;  :arith-assert-diseq      45
;  :arith-assert-lower      161
;  :arith-assert-upper      207
;  :arith-conflicts         108
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         120
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               391
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              142
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1212
;  :mk-clause               153
;  :num-allocs              4658066
;  :num-checks              559
;  :propagations            76
;  :quant-instantiations    50
;  :rlimit-count            200421)
(declare-const $k@74@03 $Perm)
(assert ($Perm.isReadVar $k@74@03 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1666
;  :arith-add-rows          21
;  :arith-assert-diseq      46
;  :arith-assert-lower      163
;  :arith-assert-upper      209
;  :arith-conflicts         109
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         121
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               392
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              142
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1217
;  :mk-clause               155
;  :num-allocs              4658066
;  :num-checks              560
;  :propagations            77
;  :quant-instantiations    50
;  :rlimit-count            200659)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1666
;  :arith-add-rows          21
;  :arith-assert-diseq      46
;  :arith-assert-lower      163
;  :arith-assert-upper      209
;  :arith-conflicts         109
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         121
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               392
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              142
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1217
;  :mk-clause               155
;  :num-allocs              4658066
;  :num-checks              561
;  :propagations            77
;  :quant-instantiations    50
;  :rlimit-count            200670)
(push) ; 4
(assert (not (<
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1666
;  :arith-add-rows          21
;  :arith-assert-diseq      46
;  :arith-assert-lower      163
;  :arith-assert-upper      210
;  :arith-conflicts         110
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         122
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               393
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              142
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1218
;  :mk-clause               155
;  :num-allocs              4658066
;  :num-checks              562
;  :propagations            77
;  :quant-instantiations    50
;  :rlimit-count            200778)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@74@03 $Perm.No) (< $Perm.No $k@74@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1666
;  :arith-add-rows          21
;  :arith-assert-diseq      46
;  :arith-assert-lower      163
;  :arith-assert-upper      210
;  :arith-conflicts         110
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         122
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               394
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              142
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1218
;  :mk-clause               155
;  :num-allocs              4658066
;  :num-checks              563
;  :propagations            77
;  :quant-instantiations    50
;  :rlimit-count            200828)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1666
;  :arith-add-rows          21
;  :arith-assert-diseq      46
;  :arith-assert-lower      163
;  :arith-assert-upper      210
;  :arith-conflicts         110
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         122
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               395
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              142
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1219
;  :mk-clause               155
;  :num-allocs              4658066
;  :num-checks              564
;  :propagations            77
;  :quant-instantiations    50
;  :rlimit-count            200998)
(push) ; 4
(assert (not (not (= (+ (- $k@18@03 $k@42@03) $k@46@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1667
;  :arith-add-rows          21
;  :arith-assert-diseq      46
;  :arith-assert-lower      163
;  :arith-assert-upper      211
;  :arith-conflicts         111
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         122
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               396
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              144
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1221
;  :mk-clause               157
;  :num-allocs              4658066
;  :num-checks              565
;  :propagations            78
;  :quant-instantiations    50
;  :rlimit-count            201076)
(assert (< $k@74@03 (+ (- $k@18@03 $k@42@03) $k@46@03)))
(assert (<= $Perm.No (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03)))
(assert (<= (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1667
;  :arith-add-rows          22
;  :arith-assert-diseq      46
;  :arith-assert-lower      165
;  :arith-assert-upper      213
;  :arith-conflicts         112
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         123
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               397
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              144
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1225
;  :mk-clause               157
;  :num-allocs              4658066
;  :num-checks              566
;  :propagations            78
;  :quant-instantiations    50
;  :rlimit-count            201352)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1667
;  :arith-add-rows          22
;  :arith-assert-diseq      46
;  :arith-assert-lower      165
;  :arith-assert-upper      213
;  :arith-conflicts         112
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         123
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               397
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              144
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1225
;  :mk-clause               157
;  :num-allocs              4658066
;  :num-checks              567
;  :propagations            78
;  :quant-instantiations    50
;  :rlimit-count            201363)
(push) ; 4
(assert (not (<
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1667
;  :arith-add-rows          22
;  :arith-assert-diseq      46
;  :arith-assert-lower      165
;  :arith-assert-upper      214
;  :arith-conflicts         113
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         124
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               398
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              144
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1226
;  :mk-clause               157
;  :num-allocs              4658066
;  :num-checks              568
;  :propagations            78
;  :quant-instantiations    50
;  :rlimit-count            201471)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1667
;  :arith-add-rows          22
;  :arith-assert-diseq      46
;  :arith-assert-lower      165
;  :arith-assert-upper      214
;  :arith-conflicts         113
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         124
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               399
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              144
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1227
;  :mk-clause               157
;  :num-allocs              4658066
;  :num-checks              569
;  :propagations            78
;  :quant-instantiations    50
;  :rlimit-count            201641)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@03 $k@42@03) $k@46@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1667
;  :arith-add-rows          22
;  :arith-assert-diseq      46
;  :arith-assert-lower      165
;  :arith-assert-upper      215
;  :arith-conflicts         114
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         125
;  :arith-pivots            71
;  :binary-propagations     16
;  :conflicts               400
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              144
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1228
;  :mk-clause               157
;  :num-allocs              4658066
;  :num-checks              570
;  :propagations            78
;  :quant-instantiations    50
;  :rlimit-count            201719)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1667
;  :arith-add-rows          22
;  :arith-assert-diseq      46
;  :arith-assert-lower      165
;  :arith-assert-upper      216
;  :arith-conflicts         115
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         126
;  :arith-pivots            72
;  :binary-propagations     16
;  :conflicts               401
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              144
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1229
;  :mk-clause               157
;  :num-allocs              4658066
;  :num-checks              571
;  :propagations            78
;  :quant-instantiations    50
;  :rlimit-count            201808)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@47@03 $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1667
;  :arith-add-rows          22
;  :arith-assert-diseq      46
;  :arith-assert-lower      165
;  :arith-assert-upper      216
;  :arith-conflicts         115
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         126
;  :arith-pivots            72
;  :binary-propagations     16
;  :conflicts               401
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              144
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1229
;  :mk-clause               157
;  :num-allocs              4658066
;  :num-checks              572
;  :propagations            78
;  :quant-instantiations    50
;  :rlimit-count            201819)
(assert (= $t@47@03 $t@56@03))
; [eval] diz.ALU_m.Main_alu == diz
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@13@03 $k@37@03) $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1667
;  :arith-add-rows          22
;  :arith-assert-diseq      46
;  :arith-assert-lower      165
;  :arith-assert-upper      217
;  :arith-conflicts         116
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         127
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               402
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              144
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1230
;  :mk-clause               157
;  :num-allocs              4658066
;  :num-checks              573
;  :propagations            78
;  :quant-instantiations    50
;  :rlimit-count            201911)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1667
;  :arith-add-rows          22
;  :arith-assert-diseq      46
;  :arith-assert-lower      165
;  :arith-assert-upper      217
;  :arith-conflicts         116
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         127
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               402
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              144
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1230
;  :mk-clause               157
;  :num-allocs              4658066
;  :num-checks              574
;  :propagations            78
;  :quant-instantiations    50
;  :rlimit-count            201922)
(push) ; 4
(assert (not (<
  $Perm.No
  (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1667
;  :arith-add-rows          22
;  :arith-assert-diseq      46
;  :arith-assert-lower      165
;  :arith-assert-upper      218
;  :arith-conflicts         117
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         128
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               403
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              144
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1231
;  :mk-clause               157
;  :num-allocs              4658066
;  :num-checks              575
;  :propagations            78
;  :quant-instantiations    50
;  :rlimit-count            202030)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@58@03 diz@6@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1667
;  :arith-add-rows          22
;  :arith-assert-diseq      46
;  :arith-assert-lower      165
;  :arith-assert-upper      218
;  :arith-conflicts         117
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         128
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               403
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 289
;  :datatype-occurs-check   32
;  :datatype-splits         208
;  :decisions               278
;  :del-clause              144
;  :final-checks            18
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1231
;  :mk-clause               157
;  :num-allocs              4658066
;  :num-checks              576
;  :propagations            78
;  :quant-instantiations    50
;  :rlimit-count            202041)
(assert (= $t@58@03 diz@6@03))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@63@03 $Perm.Write))
(assert ($Perm.isReadVar $k@65@03 $Perm.Write))
(assert ($Perm.isReadVar $k@66@03 $Perm.Write))
(assert ($Perm.isReadVar $k@67@03 $Perm.Write))
(assert ($Perm.isReadVar $k@68@03 $Perm.Write))
(assert (= $t@62@03 ($Snap.combine ($Snap.first $t@62@03) ($Snap.second $t@62@03))))
(assert (<= $Perm.No $k@63@03))
(assert (<= $k@63@03 $Perm.Write))
(assert (implies (< $Perm.No $k@63@03) (not (= diz@6@03 $Ref.null))))
(assert (=
  ($Snap.second $t@62@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@62@03))
    ($Snap.second ($Snap.second $t@62@03)))))
(assert (= ($Snap.first ($Snap.second $t@62@03)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@62@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@62@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@62@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))
  $Snap.unit))
(assert (forall ((i__18@64@03 Int)) (!
  (implies
    (and
      (<
        i__18@64@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__18@64@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__18@64@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__18@64@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__18@64@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__18@64@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))
(assert (<= $Perm.No $k@65@03))
(assert (<= $k@65@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@65@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))
  $Snap.unit))
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))
(assert (<= $Perm.No $k@66@03))
(assert (<= $k@66@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@66@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@67@03))
(assert (<= $k@67@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@67@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@68@03))
(assert (<= $k@68@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@68@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  diz@6@03))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] i__13 < pos
(push) ; 5
(assert (not (not (< i__13@61@03 pos@9@03))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          23
;  :arith-assert-diseq      51
;  :arith-assert-lower      187
;  :arith-assert-upper      239
;  :arith-conflicts         117
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         135
;  :arith-pivots            89
;  :binary-propagations     16
;  :conflicts               404
;  :datatype-accessor-ax    178
;  :datatype-constructor-ax 497
;  :datatype-occurs-check   62
;  :datatype-splits         359
;  :decisions               476
;  :del-clause              163
;  :final-checks            28
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1500
;  :mk-clause               177
;  :num-allocs              4846043
;  :num-checks              579
;  :propagations            91
;  :quant-instantiations    60
;  :rlimit-count            211843
;  :time                    0.00)
(push) ; 5
(assert (not (< i__13@61@03 pos@9@03)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2741
;  :arith-add-rows          24
;  :arith-assert-diseq      51
;  :arith-assert-lower      190
;  :arith-assert-upper      241
;  :arith-conflicts         117
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         137
;  :arith-pivots            95
;  :binary-propagations     16
;  :conflicts               404
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1547
;  :mk-clause               179
;  :num-allocs              4846043
;  :num-checks              580
;  :propagations            94
;  :quant-instantiations    60
;  :rlimit-count            213352
;  :time                    0.00)
; [then-branch: 24 | i__13@61@03 < pos@9@03 | live]
; [else-branch: 24 | !(i__13@61@03 < pos@9@03) | live]
(push) ; 5
; [then-branch: 24 | i__13@61@03 < pos@9@03]
(assert (< i__13@61@03 pos@9@03))
; [exec]
; divisor__14 := divisor__14 * 2
; [eval] divisor__14 * 2
(declare-const divisor__14@75@03 Int)
(assert (= divisor__14@75@03 (* divisor__14@59@03 2)))
; [exec]
; __flatten_4__17 := i__13
; [exec]
; i__13 := i__13 + 1
; [eval] i__13 + 1
(declare-const i__13@76@03 Int)
(assert (= i__13@76@03 (+ i__13@61@03 1)))
; Loop head block: Re-establish invariant
(declare-const $k@77@03 $Perm)
(assert ($Perm.isReadVar $k@77@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@77@03 $Perm.No) (< $Perm.No $k@77@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2743
;  :arith-add-rows          24
;  :arith-assert-diseq      52
;  :arith-assert-lower      194
;  :arith-assert-upper      245
;  :arith-conflicts         117
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         137
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               405
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1558
;  :mk-clause               187
;  :num-allocs              4846043
;  :num-checks              581
;  :propagations            99
;  :quant-instantiations    60
;  :rlimit-count            213786)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@63@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2743
;  :arith-add-rows          24
;  :arith-assert-diseq      52
;  :arith-assert-lower      194
;  :arith-assert-upper      245
;  :arith-conflicts         117
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         137
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               405
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1558
;  :mk-clause               187
;  :num-allocs              4846043
;  :num-checks              582
;  :propagations            99
;  :quant-instantiations    60
;  :rlimit-count            213797)
(assert (< $k@77@03 $k@63@03))
(assert (<= $Perm.No (- $k@63@03 $k@77@03)))
(assert (<= (- $k@63@03 $k@77@03) $Perm.Write))
(assert (implies (< $Perm.No (- $k@63@03 $k@77@03)) (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2743
;  :arith-add-rows          24
;  :arith-assert-diseq      52
;  :arith-assert-lower      196
;  :arith-assert-upper      246
;  :arith-conflicts         117
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         137
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               406
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1561
;  :mk-clause               187
;  :num-allocs              4846043
;  :num-checks              583
;  :propagations            99
;  :quant-instantiations    60
;  :rlimit-count            214005)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2743
;  :arith-add-rows          24
;  :arith-assert-diseq      52
;  :arith-assert-lower      196
;  :arith-assert-upper      246
;  :arith-conflicts         117
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         137
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               407
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1561
;  :mk-clause               187
;  :num-allocs              4846043
;  :num-checks              584
;  :propagations            99
;  :quant-instantiations    60
;  :rlimit-count            214053)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2743
;  :arith-add-rows          24
;  :arith-assert-diseq      52
;  :arith-assert-lower      196
;  :arith-assert-upper      246
;  :arith-conflicts         117
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         137
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               408
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1561
;  :mk-clause               187
;  :num-allocs              4846043
;  :num-checks              585
;  :propagations            99
;  :quant-instantiations    60
;  :rlimit-count            214101)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2743
;  :arith-add-rows          24
;  :arith-assert-diseq      52
;  :arith-assert-lower      196
;  :arith-assert-upper      246
;  :arith-conflicts         117
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         137
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               409
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1561
;  :mk-clause               187
;  :num-allocs              4846043
;  :num-checks              586
;  :propagations            99
;  :quant-instantiations    60
;  :rlimit-count            214149)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2743
;  :arith-add-rows          24
;  :arith-assert-diseq      52
;  :arith-assert-lower      196
;  :arith-assert-upper      246
;  :arith-conflicts         117
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         137
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               410
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1561
;  :mk-clause               187
;  :num-allocs              4846043
;  :num-checks              587
;  :propagations            99
;  :quant-instantiations    60
;  :rlimit-count            214197)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2743
;  :arith-add-rows          24
;  :arith-assert-diseq      52
;  :arith-assert-lower      196
;  :arith-assert-upper      246
;  :arith-conflicts         117
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         137
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               411
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1561
;  :mk-clause               187
;  :num-allocs              4846043
;  :num-checks              588
;  :propagations            99
;  :quant-instantiations    60
;  :rlimit-count            214245)
; [eval] (forall i__18: Int :: { diz.ALU_m.Main_process_state[i__18] } 0 <= i__18 && i__18 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__18] == -1 || 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|)
(declare-const i__18@78@03 Int)
(push) ; 6
; [eval] 0 <= i__18 && i__18 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__18] == -1 || 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__18 && i__18 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__18
(push) ; 7
; [then-branch: 25 | 0 <= i__18@78@03 | live]
; [else-branch: 25 | !(0 <= i__18@78@03) | live]
(push) ; 8
; [then-branch: 25 | 0 <= i__18@78@03]
(assert (<= 0 i__18@78@03))
; [eval] i__18 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2743
;  :arith-add-rows          24
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      246
;  :arith-conflicts         117
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         137
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               412
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1562
;  :mk-clause               187
;  :num-allocs              4846043
;  :num-checks              589
;  :propagations            99
;  :quant-instantiations    60
;  :rlimit-count            214346)
(pop) ; 8
(push) ; 8
; [else-branch: 25 | !(0 <= i__18@78@03)]
(assert (not (<= 0 i__18@78@03)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 26 | i__18@78@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__18@78@03 | live]
; [else-branch: 26 | !(i__18@78@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__18@78@03) | live]
(push) ; 8
; [then-branch: 26 | i__18@78@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__18@78@03]
(assert (and
  (<
    i__18@78@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
  (<= 0 i__18@78@03)))
; [eval] diz.ALU_m.Main_process_state[i__18] == -1 || 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__18] == -1
; [eval] diz.ALU_m.Main_process_state[i__18]
(push) ; 9
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2744
;  :arith-add-rows          24
;  :arith-assert-diseq      52
;  :arith-assert-lower      198
;  :arith-assert-upper      247
;  :arith-conflicts         117
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         138
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               413
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1564
;  :mk-clause               187
;  :num-allocs              4846043
;  :num-checks              590
;  :propagations            99
;  :quant-instantiations    60
;  :rlimit-count            214507)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__18@78@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2744
;  :arith-add-rows          24
;  :arith-assert-diseq      52
;  :arith-assert-lower      198
;  :arith-assert-upper      247
;  :arith-conflicts         117
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         138
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               413
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1564
;  :mk-clause               187
;  :num-allocs              4846043
;  :num-checks              591
;  :propagations            99
;  :quant-instantiations    60
;  :rlimit-count            214516)
; [eval] -1
(push) ; 9
; [then-branch: 27 | First:(Second:(Second:(Second:($t@62@03))))[i__18@78@03] == -1 | live]
; [else-branch: 27 | First:(Second:(Second:(Second:($t@62@03))))[i__18@78@03] != -1 | live]
(push) ; 10
; [then-branch: 27 | First:(Second:(Second:(Second:($t@62@03))))[i__18@78@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__18@78@03)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 27 | First:(Second:(Second:(Second:($t@62@03))))[i__18@78@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__18@78@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__18]
; [eval] diz.ALU_m.Main_process_state[i__18]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2746
;  :arith-add-rows          24
;  :arith-assert-diseq      54
;  :arith-assert-lower      201
;  :arith-assert-upper      248
;  :arith-conflicts         117
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         138
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               414
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1571
;  :mk-clause               199
;  :num-allocs              4846043
;  :num-checks              592
;  :propagations            104
;  :quant-instantiations    61
;  :rlimit-count            214785)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__18@78@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2746
;  :arith-add-rows          24
;  :arith-assert-diseq      54
;  :arith-assert-lower      201
;  :arith-assert-upper      248
;  :arith-conflicts         117
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         138
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               414
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1571
;  :mk-clause               199
;  :num-allocs              4846043
;  :num-checks              593
;  :propagations            104
;  :quant-instantiations    61
;  :rlimit-count            214794)
(push) ; 11
; [then-branch: 28 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__18@78@03] | live]
; [else-branch: 28 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__18@78@03]) | live]
(push) ; 12
; [then-branch: 28 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__18@78@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__18@78@03)))
; [eval] diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__18]
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      54
;  :arith-assert-lower      203
;  :arith-assert-upper      249
;  :arith-conflicts         117
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         139
;  :arith-pivots            98
;  :binary-propagations     16
;  :conflicts               415
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1575
;  :mk-clause               199
;  :num-allocs              4846043
;  :num-checks              594
;  :propagations            104
;  :quant-instantiations    61
;  :rlimit-count            214970)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__18@78@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      54
;  :arith-assert-lower      203
;  :arith-assert-upper      249
;  :arith-conflicts         117
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         139
;  :arith-pivots            98
;  :binary-propagations     16
;  :conflicts               415
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1575
;  :mk-clause               199
;  :num-allocs              4846043
;  :num-checks              595
;  :propagations            104
;  :quant-instantiations    61
;  :rlimit-count            214979)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      54
;  :arith-assert-lower      203
;  :arith-assert-upper      249
;  :arith-conflicts         117
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         139
;  :arith-pivots            98
;  :binary-propagations     16
;  :conflicts               416
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              165
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1575
;  :mk-clause               199
;  :num-allocs              4846043
;  :num-checks              596
;  :propagations            104
;  :quant-instantiations    61
;  :rlimit-count            215027)
(pop) ; 12
(push) ; 12
; [else-branch: 28 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__18@78@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__18@78@03))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 26 | !(i__18@78@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__18@78@03)]
(assert (not
  (and
    (<
      i__18@78@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
    (<= 0 i__18@78@03))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((i__18@78@03 Int)) (!
  (implies
    (and
      (<
        i__18@78@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__18@78@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__18@78@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__18@78@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__18@78@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__18@78@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      56
;  :arith-assert-lower      204
;  :arith-assert-upper      250
;  :arith-conflicts         117
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         140
;  :arith-pivots            99
;  :binary-propagations     16
;  :conflicts               417
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1583
;  :mk-clause               213
;  :num-allocs              4846043
;  :num-checks              597
;  :propagations            106
;  :quant-instantiations    62
;  :rlimit-count            215476)
(assert (forall ((i__18@78@03 Int)) (!
  (implies
    (and
      (<
        i__18@78@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__18@78@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__18@78@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__18@78@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__18@78@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__18@78@03))
  :qid |prog.l<no position>|)))
(declare-const $k@79@03 $Perm)
(assert ($Perm.isReadVar $k@79@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      206
;  :arith-assert-upper      251
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            99
;  :binary-propagations     16
;  :conflicts               418
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1588
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              598
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216035)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@79@03 $Perm.No) (< $Perm.No $k@79@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      206
;  :arith-assert-upper      251
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            99
;  :binary-propagations     16
;  :conflicts               419
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1588
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              599
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216085)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@65@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      206
;  :arith-assert-upper      251
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            99
;  :binary-propagations     16
;  :conflicts               419
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1588
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              600
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216096)
(assert (< $k@79@03 $k@65@03))
(assert (<= $Perm.No (- $k@65@03 $k@79@03)))
(assert (<= (- $k@65@03 $k@79@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@65@03 $k@79@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               420
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              601
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216310)
(push) ; 6
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               421
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              602
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216358)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               422
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              603
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216406)
(push) ; 6
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               423
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              604
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216454)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               424
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              605
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216502)
(push) ; 6
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               425
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              606
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216550)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               426
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              607
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216598)
(push) ; 6
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               427
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              608
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216646)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               428
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              609
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216694)
(push) ; 6
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               429
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              610
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216742)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               430
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              611
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216790)
(push) ; 6
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               431
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              612
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216838)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               432
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              613
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216886)
(push) ; 6
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               433
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              614
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216934)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               434
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              615
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            216982)
(push) ; 6
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               435
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              616
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            217030)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               436
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              617
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            217078)
(push) ; 6
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      57
;  :arith-assert-lower      208
;  :arith-assert-upper      252
;  :arith-conflicts         117
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               437
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1591
;  :mk-clause               215
;  :num-allocs              4846043
;  :num-checks              618
;  :propagations            107
;  :quant-instantiations    62
;  :rlimit-count            217126)
(declare-const $k@80@03 $Perm)
(assert ($Perm.isReadVar $k@80@03 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      210
;  :arith-assert-upper      253
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               438
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1595
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              619
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            217322)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@80@03 $Perm.No) (< $Perm.No $k@80@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      210
;  :arith-assert-upper      253
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               439
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1595
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              620
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            217372)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@66@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      210
;  :arith-assert-upper      253
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            100
;  :binary-propagations     16
;  :conflicts               439
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1595
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              621
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            217383)
(assert (< $k@80@03 $k@66@03))
(assert (<= $Perm.No (- $k@66@03 $k@80@03)))
(assert (<= (- $k@66@03 $k@80@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@66@03 $k@80@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      212
;  :arith-assert-upper      254
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               440
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1598
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              622
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            217597)
(push) ; 6
(assert (not (< $Perm.No $k@66@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      212
;  :arith-assert-upper      254
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               441
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1598
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              623
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            217645)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      212
;  :arith-assert-upper      254
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               441
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1598
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              624
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            217658)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      212
;  :arith-assert-upper      254
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               442
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1598
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              625
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            217706)
(push) ; 6
(assert (not (< $Perm.No $k@66@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      212
;  :arith-assert-upper      254
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               443
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1598
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              626
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            217754)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      212
;  :arith-assert-upper      254
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               444
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1598
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              627
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            217802)
(push) ; 6
(assert (not (< $Perm.No $k@66@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      212
;  :arith-assert-upper      254
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               445
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1598
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              628
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            217850)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      212
;  :arith-assert-upper      254
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               446
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1598
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              629
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            217898)
(push) ; 6
(assert (not (< $Perm.No $k@66@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      212
;  :arith-assert-upper      254
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1598
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              630
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            217946)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      212
;  :arith-assert-upper      254
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               448
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1598
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              631
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            217994)
(push) ; 6
(assert (not (< $Perm.No $k@66@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      212
;  :arith-assert-upper      254
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               449
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1598
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              632
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            218042)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      212
;  :arith-assert-upper      254
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               450
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1598
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              633
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            218090)
(push) ; 6
(assert (not (< $Perm.No $k@66@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      58
;  :arith-assert-lower      212
;  :arith-assert-upper      254
;  :arith-conflicts         117
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               451
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1598
;  :mk-clause               217
;  :num-allocs              4846043
;  :num-checks              634
;  :propagations            108
;  :quant-instantiations    62
;  :rlimit-count            218138)
(declare-const $k@81@03 $Perm)
(assert ($Perm.isReadVar $k@81@03 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      59
;  :arith-assert-lower      214
;  :arith-assert-upper      255
;  :arith-conflicts         117
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               452
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1602
;  :mk-clause               219
;  :num-allocs              4846043
;  :num-checks              635
;  :propagations            109
;  :quant-instantiations    62
;  :rlimit-count            218334)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@81@03 $Perm.No) (< $Perm.No $k@81@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      59
;  :arith-assert-lower      214
;  :arith-assert-upper      255
;  :arith-conflicts         117
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               453
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1602
;  :mk-clause               219
;  :num-allocs              4846043
;  :num-checks              636
;  :propagations            109
;  :quant-instantiations    62
;  :rlimit-count            218384)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@67@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      59
;  :arith-assert-lower      214
;  :arith-assert-upper      255
;  :arith-conflicts         117
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         140
;  :arith-pivots            101
;  :binary-propagations     16
;  :conflicts               453
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1602
;  :mk-clause               219
;  :num-allocs              4846043
;  :num-checks              637
;  :propagations            109
;  :quant-instantiations    62
;  :rlimit-count            218395)
(assert (< $k@81@03 $k@67@03))
(assert (<= $Perm.No (- $k@67@03 $k@81@03)))
(assert (<= (- $k@67@03 $k@81@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@67@03 $k@81@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      59
;  :arith-assert-lower      216
;  :arith-assert-upper      256
;  :arith-conflicts         117
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         140
;  :arith-pivots            103
;  :binary-propagations     16
;  :conflicts               454
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1605
;  :mk-clause               219
;  :num-allocs              4846043
;  :num-checks              638
;  :propagations            109
;  :quant-instantiations    62
;  :rlimit-count            218615)
(push) ; 6
(assert (not (< $Perm.No $k@67@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      59
;  :arith-assert-lower      216
;  :arith-assert-upper      256
;  :arith-conflicts         117
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         140
;  :arith-pivots            103
;  :binary-propagations     16
;  :conflicts               455
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1605
;  :mk-clause               219
;  :num-allocs              4846043
;  :num-checks              639
;  :propagations            109
;  :quant-instantiations    62
;  :rlimit-count            218663)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      59
;  :arith-assert-lower      216
;  :arith-assert-upper      256
;  :arith-conflicts         117
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         140
;  :arith-pivots            103
;  :binary-propagations     16
;  :conflicts               455
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1605
;  :mk-clause               219
;  :num-allocs              4846043
;  :num-checks              640
;  :propagations            109
;  :quant-instantiations    62
;  :rlimit-count            218676)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      59
;  :arith-assert-lower      216
;  :arith-assert-upper      256
;  :arith-conflicts         117
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         140
;  :arith-pivots            103
;  :binary-propagations     16
;  :conflicts               456
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1605
;  :mk-clause               219
;  :num-allocs              4846043
;  :num-checks              641
;  :propagations            109
;  :quant-instantiations    62
;  :rlimit-count            218724)
(push) ; 6
(assert (not (< $Perm.No $k@67@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      59
;  :arith-assert-lower      216
;  :arith-assert-upper      256
;  :arith-conflicts         117
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         140
;  :arith-pivots            103
;  :binary-propagations     16
;  :conflicts               457
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1605
;  :mk-clause               219
;  :num-allocs              4846043
;  :num-checks              642
;  :propagations            109
;  :quant-instantiations    62
;  :rlimit-count            218772)
(declare-const $k@82@03 $Perm)
(assert ($Perm.isReadVar $k@82@03 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      60
;  :arith-assert-lower      218
;  :arith-assert-upper      257
;  :arith-conflicts         117
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         140
;  :arith-pivots            103
;  :binary-propagations     16
;  :conflicts               458
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1609
;  :mk-clause               221
;  :num-allocs              4846043
;  :num-checks              643
;  :propagations            110
;  :quant-instantiations    62
;  :rlimit-count            218968)
(push) ; 6
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      60
;  :arith-assert-lower      218
;  :arith-assert-upper      257
;  :arith-conflicts         117
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         140
;  :arith-pivots            103
;  :binary-propagations     16
;  :conflicts               459
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1609
;  :mk-clause               221
;  :num-allocs              4846043
;  :num-checks              644
;  :propagations            110
;  :quant-instantiations    62
;  :rlimit-count            219016)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@82@03 $Perm.No) (< $Perm.No $k@82@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      60
;  :arith-assert-lower      218
;  :arith-assert-upper      257
;  :arith-conflicts         117
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         140
;  :arith-pivots            103
;  :binary-propagations     16
;  :conflicts               460
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1609
;  :mk-clause               221
;  :num-allocs              4846043
;  :num-checks              645
;  :propagations            110
;  :quant-instantiations    62
;  :rlimit-count            219066)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@68@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      60
;  :arith-assert-lower      218
;  :arith-assert-upper      257
;  :arith-conflicts         117
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         140
;  :arith-pivots            103
;  :binary-propagations     16
;  :conflicts               460
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1609
;  :mk-clause               221
;  :num-allocs              4846043
;  :num-checks              646
;  :propagations            110
;  :quant-instantiations    62
;  :rlimit-count            219077)
(assert (< $k@82@03 $k@68@03))
(assert (<= $Perm.No (- $k@68@03 $k@82@03)))
(assert (<= (- $k@68@03 $k@82@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@68@03 $k@82@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      60
;  :arith-assert-lower      220
;  :arith-assert-upper      258
;  :arith-conflicts         117
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         140
;  :arith-pivots            105
;  :binary-propagations     16
;  :conflicts               461
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1612
;  :mk-clause               221
;  :num-allocs              4846043
;  :num-checks              647
;  :propagations            110
;  :quant-instantiations    62
;  :rlimit-count            219320)
(push) ; 6
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      60
;  :arith-assert-lower      220
;  :arith-assert-upper      258
;  :arith-conflicts         117
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         140
;  :arith-pivots            105
;  :binary-propagations     16
;  :conflicts               462
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1612
;  :mk-clause               221
;  :num-allocs              4846043
;  :num-checks              648
;  :propagations            110
;  :quant-instantiations    62
;  :rlimit-count            219368)
(push) ; 6
(assert (not (< $Perm.No $k@68@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      60
;  :arith-assert-lower      220
;  :arith-assert-upper      258
;  :arith-conflicts         117
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         140
;  :arith-pivots            105
;  :binary-propagations     16
;  :conflicts               463
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1612
;  :mk-clause               221
;  :num-allocs              4846043
;  :num-checks              649
;  :propagations            110
;  :quant-instantiations    62
;  :rlimit-count            219416)
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      60
;  :arith-assert-lower      220
;  :arith-assert-upper      258
;  :arith-conflicts         117
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         140
;  :arith-pivots            105
;  :binary-propagations     16
;  :conflicts               464
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1612
;  :mk-clause               221
;  :num-allocs              4846043
;  :num-checks              650
;  :propagations            110
;  :quant-instantiations    62
;  :rlimit-count            219464)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 6
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      60
;  :arith-assert-lower      220
;  :arith-assert-upper      258
;  :arith-conflicts         117
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         140
;  :arith-pivots            105
;  :binary-propagations     16
;  :conflicts               465
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1612
;  :mk-clause               221
;  :num-allocs              4846043
;  :num-checks              651
;  :propagations            110
;  :quant-instantiations    62
;  :rlimit-count            219512)
(push) ; 6
(assert (not (< $Perm.No $k@65@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      60
;  :arith-assert-lower      220
;  :arith-assert-upper      258
;  :arith-conflicts         117
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         140
;  :arith-pivots            105
;  :binary-propagations     16
;  :conflicts               466
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              191
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1612
;  :mk-clause               221
;  :num-allocs              4846043
;  :num-checks              652
;  :propagations            110
;  :quant-instantiations    62
;  :rlimit-count            219560)
(pop) ; 5
(push) ; 5
; [else-branch: 24 | !(i__13@61@03 < pos@9@03)]
(assert (not (< i__13@61@03 pos@9@03)))
(pop) ; 5
(push) ; 5
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          24
;  :arith-assert-diseq      60
;  :arith-assert-lower      220
;  :arith-assert-upper      258
;  :arith-conflicts         117
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         140
;  :arith-pivots            111
;  :binary-propagations     16
;  :conflicts               467
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 555
;  :datatype-occurs-check   71
;  :datatype-splits         398
;  :decisions               531
;  :del-clause              207
;  :final-checks            31
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1613
;  :mk-clause               221
;  :num-allocs              4846043
;  :num-checks              653
;  :propagations            110
;  :quant-instantiations    62
;  :rlimit-count            219762)
(declare-const $t@83@03 $Ref)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3043
;  :arith-add-rows          26
;  :arith-assert-diseq      60
;  :arith-assert-lower      224
;  :arith-assert-upper      262
;  :arith-conflicts         117
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         144
;  :arith-pivots            119
;  :binary-propagations     16
;  :conflicts               468
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 649
;  :datatype-occurs-check   83
;  :datatype-splits         473
;  :decisions               619
;  :del-clause              212
;  :final-checks            35
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1705
;  :mk-clause               226
;  :num-allocs              4846043
;  :num-checks              654
;  :propagations            113
;  :quant-instantiations    62
;  :rlimit-count            221771
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3338
;  :arith-add-rows          26
;  :arith-assert-diseq      60
;  :arith-assert-lower      228
;  :arith-assert-upper      266
;  :arith-conflicts         117
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         148
;  :arith-pivots            127
;  :binary-propagations     16
;  :conflicts               469
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 743
;  :datatype-occurs-check   95
;  :datatype-splits         548
;  :decisions               707
;  :del-clause              217
;  :final-checks            39
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1797
;  :mk-clause               231
;  :num-allocs              4846043
;  :num-checks              655
;  :propagations            116
;  :quant-instantiations    62
;  :rlimit-count            223774
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3633
;  :arith-add-rows          28
;  :arith-assert-diseq      60
;  :arith-assert-lower      232
;  :arith-assert-upper      270
;  :arith-conflicts         117
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         152
;  :arith-pivots            135
;  :binary-propagations     16
;  :conflicts               470
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 837
;  :datatype-occurs-check   107
;  :datatype-splits         623
;  :decisions               795
;  :del-clause              222
;  :final-checks            43
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1889
;  :mk-clause               236
;  :num-allocs              4846043
;  :num-checks              656
;  :propagations            119
;  :quant-instantiations    62
;  :rlimit-count            225783
;  :time                    0.00)
(declare-const $t@84@03 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@63@03)
    (= $t@83@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03))))
  (implies
    (< $Perm.No (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (= $t@83@03 $t@47@03))))
(assert (and
  (implies
    (< $Perm.No (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03)))
    (= $t@84@03 $t@83@03))
  (implies
    (< $Perm.No (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    (= $t@84@03 $t@56@03))))
(assert (<=
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))))
(assert (<=
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))
  (not (= diz@6@03 $Ref.null))))
(assert (<= $Perm.No (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))))
(assert (<= (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03)))
  (not (= diz@6@03 $Ref.null))))
; [eval] !(i__13 < pos)
; [eval] i__13 < pos
(push) ; 5
(assert (not (< i__13@61@03 pos@9@03)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3832
;  :arith-add-rows          32
;  :arith-assert-diseq      60
;  :arith-assert-lower      237
;  :arith-assert-upper      274
;  :arith-conflicts         117
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         154
;  :arith-pivots            140
;  :binary-propagations     16
;  :conflicts               470
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 894
;  :datatype-occurs-check   116
;  :datatype-splits         661
;  :decisions               849
;  :del-clause              224
;  :final-checks            46
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1942
;  :mk-clause               238
;  :num-allocs              4846043
;  :num-checks              657
;  :propagations            122
;  :quant-instantiations    62
;  :rlimit-count            227787
;  :time                    0.00)
(push) ; 5
(assert (not (not (< i__13@61@03 pos@9@03))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4026
;  :arith-add-rows          32
;  :arith-assert-diseq      60
;  :arith-assert-lower      239
;  :arith-assert-upper      277
;  :arith-conflicts         117
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         156
;  :arith-pivots            144
;  :binary-propagations     16
;  :conflicts               470
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 951
;  :datatype-occurs-check   125
;  :datatype-splits         699
;  :decisions               903
;  :del-clause              226
;  :final-checks            49
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             1988
;  :mk-clause               240
;  :num-allocs              4846043
;  :num-checks              658
;  :propagations            125
;  :quant-instantiations    62
;  :rlimit-count            229295
;  :time                    0.00)
; [then-branch: 29 | !(i__13@61@03 < pos@9@03) | live]
; [else-branch: 29 | i__13@61@03 < pos@9@03 | live]
(push) ; 5
; [then-branch: 29 | !(i__13@61@03 < pos@9@03)]
(assert (not (< i__13@61@03 pos@9@03)))
; [eval] current_bit__15 == bit
(push) ; 6
(assert (not (not (= sys__result@44@03 bit@10@03))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4219
;  :arith-add-rows          32
;  :arith-assert-diseq      60
;  :arith-assert-lower      242
;  :arith-assert-upper      279
;  :arith-conflicts         117
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         158
;  :arith-pivots            148
;  :binary-propagations     16
;  :conflicts               470
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 1007
;  :datatype-occurs-check   134
;  :datatype-splits         736
;  :decisions               957
;  :del-clause              231
;  :final-checks            53
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2034
;  :mk-clause               245
;  :num-allocs              4846043
;  :num-checks              659
;  :propagations            130
;  :quant-instantiations    62
;  :rlimit-count            230827
;  :time                    0.00)
(push) ; 6
(assert (not (= sys__result@44@03 bit@10@03)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4413
;  :arith-add-rows          32
;  :arith-assert-diseq      60
;  :arith-assert-lower      244
;  :arith-assert-upper      281
;  :arith-conflicts         117
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         160
;  :arith-pivots            152
;  :binary-propagations     16
;  :conflicts               470
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              233
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2080
;  :mk-clause               247
;  :num-allocs              4846043
;  :num-checks              660
;  :propagations            133
;  :quant-instantiations    62
;  :rlimit-count            232298
;  :time                    0.00)
; [then-branch: 30 | sys__result@44@03 == bit@10@03 | live]
; [else-branch: 30 | sys__result@44@03 != bit@10@03 | live]
(push) ; 6
; [then-branch: 30 | sys__result@44@03 == bit@10@03]
(assert (= sys__result@44@03 bit@10@03))
; [exec]
; sys__local__result__12 := value
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && (true && (true && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__19: Int :: { diz.ALU_m.Main_process_state[i__19] } 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|)) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && 0 <= diz.ALU_m.Main_alu.ALU_RESULT && diz.ALU_m.Main_alu.ALU_RESULT <= 16 && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_init, 1 / 2) && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_mon.Monitor_init, 1 / 2) && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu == diz
(declare-const $k@85@03 $Perm)
(assert ($Perm.isReadVar $k@85@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@85@03 $Perm.No) (< $Perm.No $k@85@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4414
;  :arith-add-rows          32
;  :arith-assert-diseq      61
;  :arith-assert-lower      246
;  :arith-assert-upper      282
;  :arith-conflicts         117
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         160
;  :arith-pivots            152
;  :binary-propagations     16
;  :conflicts               471
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              233
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2085
;  :mk-clause               249
;  :num-allocs              4846043
;  :num-checks              661
;  :propagations            134
;  :quant-instantiations    62
;  :rlimit-count            232531)
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          41
;  :arith-assert-diseq      61
;  :arith-assert-lower      246
;  :arith-assert-upper      283
;  :arith-conflicts         118
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         160
;  :arith-pivots            156
;  :binary-propagations     16
;  :conflicts               472
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2087
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              662
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            232910)
(assert (<
  $k@85@03
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))))
(assert (<=
  $Perm.No
  (-
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $k@85@03)))
(assert (<=
  (-
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $k@85@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@85@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          46
;  :arith-assert-diseq      61
;  :arith-assert-lower      248
;  :arith-assert-upper      285
;  :arith-conflicts         119
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         161
;  :arith-pivots            159
;  :binary-propagations     16
;  :conflicts               473
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2091
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              663
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            233375)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= $t@84@03 $Ref.null))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          46
;  :arith-assert-diseq      61
;  :arith-assert-lower      248
;  :arith-assert-upper      285
;  :arith-conflicts         119
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         161
;  :arith-pivots            159
;  :binary-propagations     16
;  :conflicts               473
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2091
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              664
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            233393)
(assert (not (= $t@84@03 $Ref.null)))
(set-option :timeout 10)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          48
;  :arith-assert-diseq      61
;  :arith-assert-lower      248
;  :arith-assert-upper      286
;  :arith-conflicts         120
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         162
;  :arith-pivots            160
;  :binary-propagations     16
;  :conflicts               474
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2092
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              665
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            233618)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          48
;  :arith-assert-diseq      61
;  :arith-assert-lower      248
;  :arith-assert-upper      286
;  :arith-conflicts         120
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         162
;  :arith-pivots            160
;  :binary-propagations     16
;  :conflicts               475
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2093
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              666
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            233698)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          50
;  :arith-assert-diseq      61
;  :arith-assert-lower      248
;  :arith-assert-upper      287
;  :arith-conflicts         121
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         163
;  :arith-pivots            163
;  :binary-propagations     16
;  :conflicts               476
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2094
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              667
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            233910)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          50
;  :arith-assert-diseq      61
;  :arith-assert-lower      248
;  :arith-assert-upper      287
;  :arith-conflicts         121
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         163
;  :arith-pivots            163
;  :binary-propagations     16
;  :conflicts               477
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2095
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              668
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            233990)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          52
;  :arith-assert-diseq      61
;  :arith-assert-lower      248
;  :arith-assert-upper      288
;  :arith-conflicts         122
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         164
;  :arith-pivots            164
;  :binary-propagations     16
;  :conflicts               478
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2096
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              669
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            234195)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          52
;  :arith-assert-diseq      61
;  :arith-assert-lower      248
;  :arith-assert-upper      288
;  :arith-conflicts         122
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         164
;  :arith-pivots            164
;  :binary-propagations     16
;  :conflicts               479
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2097
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              670
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            234275)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          54
;  :arith-assert-diseq      61
;  :arith-assert-lower      248
;  :arith-assert-upper      289
;  :arith-conflicts         123
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         165
;  :arith-pivots            167
;  :binary-propagations     16
;  :conflicts               480
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2098
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              671
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            234487)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          54
;  :arith-assert-diseq      61
;  :arith-assert-lower      248
;  :arith-assert-upper      289
;  :arith-conflicts         123
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         165
;  :arith-pivots            167
;  :binary-propagations     16
;  :conflicts               481
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2099
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              672
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            234567)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          56
;  :arith-assert-diseq      61
;  :arith-assert-lower      248
;  :arith-assert-upper      290
;  :arith-conflicts         124
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         166
;  :arith-pivots            168
;  :binary-propagations     16
;  :conflicts               482
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2100
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              673
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            234772)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          56
;  :arith-assert-diseq      61
;  :arith-assert-lower      248
;  :arith-assert-upper      290
;  :arith-conflicts         124
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         166
;  :arith-pivots            168
;  :binary-propagations     16
;  :conflicts               483
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2101
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              674
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            234852)
; [eval] (forall i__19: Int :: { diz.ALU_m.Main_process_state[i__19] } 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|)
(declare-const i__19@86@03 Int)
(push) ; 7
; [eval] 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__19
(push) ; 8
; [then-branch: 31 | 0 <= i__19@86@03 | live]
; [else-branch: 31 | !(0 <= i__19@86@03) | live]
(push) ; 9
; [then-branch: 31 | 0 <= i__19@86@03]
(assert (<= 0 i__19@86@03))
; [eval] i__19 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          58
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      291
;  :arith-conflicts         125
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         167
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               484
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2103
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              675
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            235117)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          58
;  :arith-assert-diseq      61
;  :arith-assert-lower      249
;  :arith-assert-upper      291
;  :arith-conflicts         125
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         167
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               485
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2104
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              676
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            235197)
(pop) ; 9
(push) ; 9
; [else-branch: 31 | !(0 <= i__19@86@03)]
(assert (not (<= 0 i__19@86@03)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 32 | i__19@86@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__19@86@03 | live]
; [else-branch: 32 | !(i__19@86@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__19@86@03) | live]
(push) ; 9
; [then-branch: 32 | i__19@86@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__19@86@03]
(assert (and
  (<
    i__19@86@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
  (<= 0 i__19@86@03)))
; [eval] diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__19] == -1
; [eval] diz.ALU_m.Main_process_state[i__19]
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4416
;  :arith-add-rows          60
;  :arith-assert-diseq      61
;  :arith-assert-lower      250
;  :arith-assert-upper      293
;  :arith-conflicts         126
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         169
;  :arith-pivots            172
;  :binary-propagations     16
;  :conflicts               486
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2107
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              677
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            235515)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4416
;  :arith-add-rows          60
;  :arith-assert-diseq      61
;  :arith-assert-lower      250
;  :arith-assert-upper      293
;  :arith-conflicts         126
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         169
;  :arith-pivots            172
;  :binary-propagations     16
;  :conflicts               487
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2108
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              678
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            235595)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__19@86@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4416
;  :arith-add-rows          60
;  :arith-assert-diseq      61
;  :arith-assert-lower      250
;  :arith-assert-upper      293
;  :arith-conflicts         126
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         169
;  :arith-pivots            172
;  :binary-propagations     16
;  :conflicts               487
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2108
;  :mk-clause               251
;  :num-allocs              4846043
;  :num-checks              679
;  :propagations            135
;  :quant-instantiations    62
;  :rlimit-count            235604)
; [eval] -1
(push) ; 10
; [then-branch: 33 | First:(Second:(Second:(Second:($t@62@03))))[i__19@86@03] == -1 | live]
; [else-branch: 33 | First:(Second:(Second:(Second:($t@62@03))))[i__19@86@03] != -1 | live]
(push) ; 11
; [then-branch: 33 | First:(Second:(Second:(Second:($t@62@03))))[i__19@86@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__19@86@03)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 33 | First:(Second:(Second:(Second:($t@62@03))))[i__19@86@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__19@86@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__19]
; [eval] diz.ALU_m.Main_process_state[i__19]
(set-option :timeout 10)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4418
;  :arith-add-rows          62
;  :arith-assert-diseq      63
;  :arith-assert-lower      253
;  :arith-assert-upper      295
;  :arith-conflicts         127
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         170
;  :arith-pivots            175
;  :binary-propagations     16
;  :conflicts               488
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2116
;  :mk-clause               263
;  :num-allocs              4846043
;  :num-checks              680
;  :propagations            140
;  :quant-instantiations    63
;  :rlimit-count            236024)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4418
;  :arith-add-rows          62
;  :arith-assert-diseq      63
;  :arith-assert-lower      253
;  :arith-assert-upper      295
;  :arith-conflicts         127
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         170
;  :arith-pivots            175
;  :binary-propagations     16
;  :conflicts               489
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2117
;  :mk-clause               263
;  :num-allocs              4846043
;  :num-checks              681
;  :propagations            140
;  :quant-instantiations    63
;  :rlimit-count            236104)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__19@86@03 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4418
;  :arith-add-rows          62
;  :arith-assert-diseq      63
;  :arith-assert-lower      253
;  :arith-assert-upper      295
;  :arith-conflicts         127
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         170
;  :arith-pivots            175
;  :binary-propagations     16
;  :conflicts               489
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2117
;  :mk-clause               263
;  :num-allocs              4846043
;  :num-checks              682
;  :propagations            140
;  :quant-instantiations    63
;  :rlimit-count            236113)
(push) ; 12
; [then-branch: 34 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__19@86@03] | live]
; [else-branch: 34 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__19@86@03]) | live]
(push) ; 13
; [then-branch: 34 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__19@86@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__19@86@03)))
; [eval] diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__19]
(set-option :timeout 10)
(push) ; 14
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          64
;  :arith-assert-diseq      63
;  :arith-assert-lower      255
;  :arith-assert-upper      297
;  :arith-conflicts         128
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         172
;  :arith-pivots            178
;  :binary-propagations     16
;  :conflicts               490
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2122
;  :mk-clause               263
;  :num-allocs              4846043
;  :num-checks              683
;  :propagations            140
;  :quant-instantiations    63
;  :rlimit-count            236450)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          64
;  :arith-assert-diseq      63
;  :arith-assert-lower      255
;  :arith-assert-upper      297
;  :arith-conflicts         128
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         172
;  :arith-pivots            178
;  :binary-propagations     16
;  :conflicts               491
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2123
;  :mk-clause               263
;  :num-allocs              4846043
;  :num-checks              684
;  :propagations            140
;  :quant-instantiations    63
;  :rlimit-count            236530)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__19@86@03 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          64
;  :arith-assert-diseq      63
;  :arith-assert-lower      255
;  :arith-assert-upper      297
;  :arith-conflicts         128
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         172
;  :arith-pivots            178
;  :binary-propagations     16
;  :conflicts               491
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2123
;  :mk-clause               263
;  :num-allocs              4846043
;  :num-checks              685
;  :propagations            140
;  :quant-instantiations    63
;  :rlimit-count            236539)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          66
;  :arith-assert-diseq      63
;  :arith-assert-lower      255
;  :arith-assert-upper      298
;  :arith-conflicts         129
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         173
;  :arith-pivots            181
;  :binary-propagations     16
;  :conflicts               492
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2124
;  :mk-clause               263
;  :num-allocs              4846043
;  :num-checks              686
;  :propagations            140
;  :quant-instantiations    63
;  :rlimit-count            236751)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          66
;  :arith-assert-diseq      63
;  :arith-assert-lower      255
;  :arith-assert-upper      298
;  :arith-conflicts         129
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         173
;  :arith-pivots            181
;  :binary-propagations     16
;  :conflicts               493
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              235
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2125
;  :mk-clause               263
;  :num-allocs              4846043
;  :num-checks              687
;  :propagations            140
;  :quant-instantiations    63
;  :rlimit-count            236831)
(pop) ; 13
(push) ; 13
; [else-branch: 34 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__19@86@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__19@86@03))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 32 | !(i__19@86@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__19@86@03)]
(assert (not
  (and
    (<
      i__19@86@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
    (<= 0 i__19@86@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__19@86@03 Int)) (!
  (implies
    (and
      (<
        i__19@86@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__19@86@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__19@86@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__19@86@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__19@86@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__19@86@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          66
;  :arith-assert-diseq      64
;  :arith-assert-lower      256
;  :arith-assert-upper      299
;  :arith-conflicts         129
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         174
;  :arith-pivots            182
;  :binary-propagations     16
;  :conflicts               494
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2133
;  :mk-clause               275
;  :num-allocs              4846043
;  :num-checks              688
;  :propagations            142
;  :quant-instantiations    64
;  :rlimit-count            237280)
(assert (forall ((i__19@86@03 Int)) (!
  (implies
    (and
      (<
        i__19@86@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__19@86@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__19@86@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__19@86@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__19@86@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__19@86@03))
  :qid |prog.l<no position>|)))
(declare-const $k@87@03 $Perm)
(assert ($Perm.isReadVar $k@87@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          68
;  :arith-assert-diseq      65
;  :arith-assert-lower      258
;  :arith-assert-upper      301
;  :arith-conflicts         130
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         175
;  :arith-pivots            183
;  :binary-propagations     16
;  :conflicts               495
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2139
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              689
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            237996)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@87@03 $Perm.No) (< $Perm.No $k@87@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          68
;  :arith-assert-diseq      65
;  :arith-assert-lower      258
;  :arith-assert-upper      301
;  :arith-conflicts         130
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         175
;  :arith-pivots            183
;  :binary-propagations     16
;  :conflicts               496
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2139
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              690
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            238046)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          68
;  :arith-assert-diseq      65
;  :arith-assert-lower      258
;  :arith-assert-upper      301
;  :arith-conflicts         130
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         175
;  :arith-pivots            183
;  :binary-propagations     16
;  :conflicts               496
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2139
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              691
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            238057)
(push) ; 7
(assert (not (not
  (=
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          68
;  :arith-assert-diseq      65
;  :arith-assert-lower      258
;  :arith-assert-upper      301
;  :arith-conflicts         130
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         175
;  :arith-pivots            183
;  :binary-propagations     16
;  :conflicts               497
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2140
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              692
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            238175)
(assert (<
  $k@87@03
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03)))
(assert (<=
  $Perm.No
  (-
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $k@87@03)))
(assert (<=
  (-
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $k@87@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@87@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          74
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      303
;  :arith-conflicts         131
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         176
;  :arith-pivots            187
;  :binary-propagations     16
;  :conflicts               498
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2144
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              693
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            238646)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          74
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      303
;  :arith-conflicts         131
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         176
;  :arith-pivots            187
;  :binary-propagations     16
;  :conflicts               498
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2144
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              694
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            238657)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          74
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      303
;  :arith-conflicts         131
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         176
;  :arith-pivots            187
;  :binary-propagations     16
;  :conflicts               498
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2144
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              695
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            238698)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          76
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      304
;  :arith-conflicts         132
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         177
;  :arith-pivots            188
;  :binary-propagations     16
;  :conflicts               499
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2145
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              696
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            238903)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          76
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      304
;  :arith-conflicts         132
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         177
;  :arith-pivots            188
;  :binary-propagations     16
;  :conflicts               499
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2145
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              697
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            238914)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          76
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      304
;  :arith-conflicts         132
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         177
;  :arith-pivots            188
;  :binary-propagations     16
;  :conflicts               499
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2145
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              698
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            238955)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          76
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      304
;  :arith-conflicts         132
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         177
;  :arith-pivots            188
;  :binary-propagations     16
;  :conflicts               499
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2145
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              699
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            238966)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          78
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      305
;  :arith-conflicts         133
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         178
;  :arith-pivots            191
;  :binary-propagations     16
;  :conflicts               500
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2146
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              700
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            239178)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          78
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      305
;  :arith-conflicts         133
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         178
;  :arith-pivots            191
;  :binary-propagations     16
;  :conflicts               500
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2146
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              701
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            239189)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          78
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      305
;  :arith-conflicts         133
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         178
;  :arith-pivots            191
;  :binary-propagations     16
;  :conflicts               500
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2146
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              702
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            239230)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          78
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      305
;  :arith-conflicts         133
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         178
;  :arith-pivots            191
;  :binary-propagations     16
;  :conflicts               500
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2146
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              703
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            239241)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          80
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      306
;  :arith-conflicts         134
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         179
;  :arith-pivots            192
;  :binary-propagations     16
;  :conflicts               501
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2147
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              704
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            239446)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          80
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      306
;  :arith-conflicts         134
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         179
;  :arith-pivots            192
;  :binary-propagations     16
;  :conflicts               501
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2147
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              705
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            239457)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          80
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      306
;  :arith-conflicts         134
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         179
;  :arith-pivots            192
;  :binary-propagations     16
;  :conflicts               501
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2147
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              706
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            239498)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          80
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      306
;  :arith-conflicts         134
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         179
;  :arith-pivots            192
;  :binary-propagations     16
;  :conflicts               501
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2147
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              707
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            239509)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          82
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      307
;  :arith-conflicts         135
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         180
;  :arith-pivots            195
;  :binary-propagations     16
;  :conflicts               502
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2148
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              708
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            239721)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          82
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      307
;  :arith-conflicts         135
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         180
;  :arith-pivots            195
;  :binary-propagations     16
;  :conflicts               502
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2148
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              709
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            239732)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          82
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      307
;  :arith-conflicts         135
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         180
;  :arith-pivots            195
;  :binary-propagations     16
;  :conflicts               502
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2148
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              710
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            239773)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          82
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      307
;  :arith-conflicts         135
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         180
;  :arith-pivots            195
;  :binary-propagations     16
;  :conflicts               502
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2148
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              711
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            239784)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          84
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      308
;  :arith-conflicts         136
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         181
;  :arith-pivots            196
;  :binary-propagations     16
;  :conflicts               503
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2149
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              712
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            239989)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          84
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      308
;  :arith-conflicts         136
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         181
;  :arith-pivots            196
;  :binary-propagations     16
;  :conflicts               503
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2149
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              713
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240000)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          84
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      308
;  :arith-conflicts         136
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         181
;  :arith-pivots            196
;  :binary-propagations     16
;  :conflicts               503
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2149
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              714
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240041)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          84
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      308
;  :arith-conflicts         136
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         181
;  :arith-pivots            196
;  :binary-propagations     16
;  :conflicts               503
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2149
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              715
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240052)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          86
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      309
;  :arith-conflicts         137
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         182
;  :arith-pivots            199
;  :binary-propagations     16
;  :conflicts               504
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2150
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              716
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240264)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          86
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      309
;  :arith-conflicts         137
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         182
;  :arith-pivots            199
;  :binary-propagations     16
;  :conflicts               504
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2150
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              717
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240275)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          86
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      309
;  :arith-conflicts         137
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         182
;  :arith-pivots            199
;  :binary-propagations     16
;  :conflicts               504
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2150
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              718
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240316)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          86
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      309
;  :arith-conflicts         137
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         182
;  :arith-pivots            199
;  :binary-propagations     16
;  :conflicts               504
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2150
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              719
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240327)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          88
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      310
;  :arith-conflicts         138
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         183
;  :arith-pivots            200
;  :binary-propagations     16
;  :conflicts               505
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2151
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              720
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240532)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          88
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      310
;  :arith-conflicts         138
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         183
;  :arith-pivots            200
;  :binary-propagations     16
;  :conflicts               505
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2151
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              721
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240543)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          88
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      310
;  :arith-conflicts         138
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         183
;  :arith-pivots            200
;  :binary-propagations     16
;  :conflicts               505
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2151
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              722
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240584)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          88
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      310
;  :arith-conflicts         138
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         183
;  :arith-pivots            200
;  :binary-propagations     16
;  :conflicts               505
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2151
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              723
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240595)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          90
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      311
;  :arith-conflicts         139
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         184
;  :arith-pivots            203
;  :binary-propagations     16
;  :conflicts               506
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2152
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              724
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240807)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          90
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      311
;  :arith-conflicts         139
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         184
;  :arith-pivots            203
;  :binary-propagations     16
;  :conflicts               506
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2152
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              725
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240818)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          90
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      311
;  :arith-conflicts         139
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         184
;  :arith-pivots            203
;  :binary-propagations     16
;  :conflicts               506
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2152
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              726
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240859)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          90
;  :arith-assert-diseq      65
;  :arith-assert-lower      260
;  :arith-assert-upper      311
;  :arith-conflicts         139
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         184
;  :arith-pivots            203
;  :binary-propagations     16
;  :conflicts               506
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2152
;  :mk-clause               277
;  :num-allocs              4846043
;  :num-checks              727
;  :propagations            143
;  :quant-instantiations    64
;  :rlimit-count            240870)
(declare-const $k@88@03 $Perm)
(assert ($Perm.isReadVar $k@88@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          92
;  :arith-assert-diseq      66
;  :arith-assert-lower      262
;  :arith-assert-upper      313
;  :arith-conflicts         140
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         185
;  :arith-pivots            204
;  :binary-propagations     16
;  :conflicts               507
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2157
;  :mk-clause               279
;  :num-allocs              4846043
;  :num-checks              728
;  :propagations            144
;  :quant-instantiations    64
;  :rlimit-count            241223)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@88@03 $Perm.No) (< $Perm.No $k@88@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          92
;  :arith-assert-diseq      66
;  :arith-assert-lower      262
;  :arith-assert-upper      313
;  :arith-conflicts         140
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         185
;  :arith-pivots            204
;  :binary-propagations     16
;  :conflicts               508
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2157
;  :mk-clause               279
;  :num-allocs              4846043
;  :num-checks              729
;  :propagations            144
;  :quant-instantiations    64
;  :rlimit-count            241273)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          92
;  :arith-assert-diseq      66
;  :arith-assert-lower      262
;  :arith-assert-upper      313
;  :arith-conflicts         140
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         185
;  :arith-pivots            204
;  :binary-propagations     16
;  :conflicts               508
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2157
;  :mk-clause               279
;  :num-allocs              4846043
;  :num-checks              730
;  :propagations            144
;  :quant-instantiations    64
;  :rlimit-count            241284)
(push) ; 7
(assert (not (not (= (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          92
;  :arith-assert-diseq      66
;  :arith-assert-lower      262
;  :arith-assert-upper      313
;  :arith-conflicts         140
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         185
;  :arith-pivots            204
;  :binary-propagations     16
;  :conflicts               509
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2158
;  :mk-clause               279
;  :num-allocs              4846043
;  :num-checks              731
;  :propagations            144
;  :quant-instantiations    64
;  :rlimit-count            241376)
(assert (< $k@88@03 (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03)))
(assert (<= $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@88@03)))
(assert (<= (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@88@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@88@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          97
;  :arith-assert-diseq      66
;  :arith-assert-lower      264
;  :arith-assert-upper      315
;  :arith-conflicts         141
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         186
;  :arith-pivots            209
;  :binary-propagations     16
;  :conflicts               510
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2162
;  :mk-clause               279
;  :num-allocs              4846043
;  :num-checks              732
;  :propagations            144
;  :quant-instantiations    64
;  :rlimit-count            241827)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          97
;  :arith-assert-diseq      66
;  :arith-assert-lower      264
;  :arith-assert-upper      315
;  :arith-conflicts         141
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         186
;  :arith-pivots            209
;  :binary-propagations     16
;  :conflicts               510
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2162
;  :mk-clause               279
;  :num-allocs              4846043
;  :num-checks              733
;  :propagations            144
;  :quant-instantiations    64
;  :rlimit-count            241838)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          97
;  :arith-assert-diseq      66
;  :arith-assert-lower      264
;  :arith-assert-upper      315
;  :arith-conflicts         141
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         186
;  :arith-pivots            209
;  :binary-propagations     16
;  :conflicts               510
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2162
;  :mk-clause               279
;  :num-allocs              4846043
;  :num-checks              734
;  :propagations            144
;  :quant-instantiations    64
;  :rlimit-count            241867)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          97
;  :arith-assert-diseq      66
;  :arith-assert-lower      264
;  :arith-assert-upper      315
;  :arith-conflicts         141
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         186
;  :arith-pivots            209
;  :binary-propagations     16
;  :conflicts               510
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2162
;  :mk-clause               279
;  :num-allocs              4846043
;  :num-checks              735
;  :propagations            144
;  :quant-instantiations    64
;  :rlimit-count            241880)
(set-option :timeout 10)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          99
;  :arith-assert-diseq      66
;  :arith-assert-lower      264
;  :arith-assert-upper      316
;  :arith-conflicts         142
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         187
;  :arith-pivots            210
;  :binary-propagations     16
;  :conflicts               511
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2163
;  :mk-clause               279
;  :num-allocs              4846043
;  :num-checks              736
;  :propagations            144
;  :quant-instantiations    64
;  :rlimit-count            242085)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          99
;  :arith-assert-diseq      66
;  :arith-assert-lower      264
;  :arith-assert-upper      316
;  :arith-conflicts         142
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         187
;  :arith-pivots            210
;  :binary-propagations     16
;  :conflicts               511
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2163
;  :mk-clause               279
;  :num-allocs              4846043
;  :num-checks              737
;  :propagations            144
;  :quant-instantiations    64
;  :rlimit-count            242096)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          99
;  :arith-assert-diseq      66
;  :arith-assert-lower      264
;  :arith-assert-upper      316
;  :arith-conflicts         142
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         187
;  :arith-pivots            210
;  :binary-propagations     16
;  :conflicts               511
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   143
;  :datatype-splits         774
;  :decisions               1011
;  :del-clause              259
;  :final-checks            56
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.64
;  :memory                  4.64
;  :mk-bool-var             2163
;  :mk-clause               279
;  :num-allocs              4846043
;  :num-checks              738
;  :propagations            144
;  :quant-instantiations    64
;  :rlimit-count            242125)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4722
;  :arith-add-rows          100
;  :arith-assert-diseq      66
;  :arith-assert-lower      268
;  :arith-assert-upper      320
;  :arith-conflicts         142
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         191
;  :arith-pivots            218
;  :binary-propagations     16
;  :conflicts               512
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1157
;  :datatype-occurs-check   155
;  :datatype-splits         847
;  :decisions               1098
;  :del-clause              264
;  :final-checks            60
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2253
;  :mk-clause               284
;  :num-allocs              5062694
;  :num-checks              739
;  :propagations            147
;  :quant-instantiations    64
;  :rlimit-count            244336
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 7
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5108
;  :arith-add-rows          102
;  :arith-assert-diseq      66
;  :arith-assert-lower      272
;  :arith-assert-upper      324
;  :arith-conflicts         142
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         195
;  :arith-pivots            226
;  :binary-propagations     16
;  :conflicts               512
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2342
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              742
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            247220)
(declare-const $t@89@03 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5108
;  :arith-add-rows          102
;  :arith-assert-diseq      66
;  :arith-assert-lower      272
;  :arith-assert-upper      324
;  :arith-conflicts         142
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         195
;  :arith-pivots            226
;  :binary-propagations     16
;  :conflicts               513
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2342
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              743
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            247296)
(declare-const $t@90@03 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5108
;  :arith-add-rows          102
;  :arith-assert-diseq      66
;  :arith-assert-lower      272
;  :arith-assert-upper      324
;  :arith-conflicts         142
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         195
;  :arith-pivots            226
;  :binary-propagations     16
;  :conflicts               514
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2342
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              744
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            247368)
(declare-const $t@91@03 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5108
;  :arith-add-rows          102
;  :arith-assert-diseq      66
;  :arith-assert-lower      272
;  :arith-assert-upper      324
;  :arith-conflicts         142
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         195
;  :arith-pivots            226
;  :binary-propagations     16
;  :conflicts               515
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2343
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              745
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            247448)
(declare-const $t@92@03 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@85@03))
    (= $t@89@03 $t@84@03))
  (implies
    (< $Perm.No $k@68@03)
    (=
      $t@89@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@88@03))
    (= $t@90@03 $t@52@03))
  (implies
    (< $Perm.No $k@66@03)
    (=
      $t@90@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@87@03))
    (= $t@91@03 $t@58@03))
  (implies
    (< $Perm.No $k@65@03)
    (=
      $t@91@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@67@03)
    (=
      $t@92@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))
    (= $t@92@03 $t@54@03))))
(assert (<=
  $Perm.No
  (+
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@85@03)
    $k@68@03)))
(assert (<=
  (+
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@85@03)
    $k@68@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@85@03)
      $k@68@03))
  (not (= diz@6@03 $Ref.null))))
(assert (<=
  $Perm.No
  (+ (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@88@03) $k@66@03)))
(assert (<=
  (+ (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@88@03) $k@66@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+ (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@88@03) $k@66@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (<=
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@87@03)
    $k@65@03)))
(assert (<=
  (+
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@87@03)
    $k@65@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@87@03)
      $k@65@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (<= $Perm.No (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(assert (<= (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          113
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      328
;  :arith-conflicts         142
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         195
;  :arith-pivots            226
;  :binary-propagations     16
;  :conflicts               516
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2359
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              746
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            249105)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          115
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      329
;  :arith-conflicts         143
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         196
;  :arith-pivots            229
;  :binary-propagations     16
;  :conflicts               517
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2360
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              747
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            249318)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          115
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      329
;  :arith-conflicts         143
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         196
;  :arith-pivots            229
;  :binary-propagations     16
;  :conflicts               517
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2360
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              748
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            249329)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          115
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      329
;  :arith-conflicts         143
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         196
;  :arith-pivots            229
;  :binary-propagations     16
;  :conflicts               517
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2360
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              749
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            249358)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          115
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      329
;  :arith-conflicts         143
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         196
;  :arith-pivots            229
;  :binary-propagations     16
;  :conflicts               518
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2361
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              750
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            249618)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          117
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      330
;  :arith-conflicts         144
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         197
;  :arith-pivots            230
;  :binary-propagations     16
;  :conflicts               519
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2362
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              751
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            249824)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          117
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      330
;  :arith-conflicts         144
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         197
;  :arith-pivots            230
;  :binary-propagations     16
;  :conflicts               519
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2362
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              752
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            249835)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          117
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      330
;  :arith-conflicts         144
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         197
;  :arith-pivots            230
;  :binary-propagations     16
;  :conflicts               519
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2362
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              753
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            249864)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          117
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      330
;  :arith-conflicts         144
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         197
;  :arith-pivots            230
;  :binary-propagations     16
;  :conflicts               520
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2363
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              754
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            250124)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          119
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      331
;  :arith-conflicts         145
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         198
;  :arith-pivots            233
;  :binary-propagations     16
;  :conflicts               521
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2364
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              755
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            250337)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          119
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      331
;  :arith-conflicts         145
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         198
;  :arith-pivots            233
;  :binary-propagations     16
;  :conflicts               521
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2364
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              756
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            250348)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          119
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      331
;  :arith-conflicts         145
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         198
;  :arith-pivots            233
;  :binary-propagations     16
;  :conflicts               521
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2364
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              757
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            250377)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          119
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      331
;  :arith-conflicts         145
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         198
;  :arith-pivots            233
;  :binary-propagations     16
;  :conflicts               522
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2365
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              758
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            250637)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          121
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      332
;  :arith-conflicts         146
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         199
;  :arith-pivots            234
;  :binary-propagations     16
;  :conflicts               523
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2366
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              759
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            250843)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          121
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      332
;  :arith-conflicts         146
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         199
;  :arith-pivots            234
;  :binary-propagations     16
;  :conflicts               523
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2366
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              760
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            250854)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          121
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      332
;  :arith-conflicts         146
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         199
;  :arith-pivots            234
;  :binary-propagations     16
;  :conflicts               523
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2366
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              761
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            250883)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          121
;  :arith-assert-diseq      66
;  :arith-assert-lower      276
;  :arith-assert-upper      332
;  :arith-conflicts         146
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         199
;  :arith-pivots            234
;  :binary-propagations     16
;  :conflicts               524
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2367
;  :mk-clause               291
;  :num-allocs              5279738
;  :num-checks              762
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            251143)
(declare-const $k@93@03 $Perm)
(assert ($Perm.isReadVar $k@93@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          123
;  :arith-assert-diseq      67
;  :arith-assert-lower      278
;  :arith-assert-upper      334
;  :arith-conflicts         147
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         200
;  :arith-pivots            237
;  :binary-propagations     16
;  :conflicts               525
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2372
;  :mk-clause               293
;  :num-allocs              5279738
;  :num-checks              763
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            251505)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@93@03 $Perm.No) (< $Perm.No $k@93@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          123
;  :arith-assert-diseq      67
;  :arith-assert-lower      278
;  :arith-assert-upper      334
;  :arith-conflicts         147
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         200
;  :arith-pivots            237
;  :binary-propagations     16
;  :conflicts               526
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2372
;  :mk-clause               293
;  :num-allocs              5279738
;  :num-checks              764
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            251555)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5120
;  :arith-add-rows          123
;  :arith-assert-diseq      67
;  :arith-assert-lower      278
;  :arith-assert-upper      334
;  :arith-conflicts         147
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         200
;  :arith-pivots            237
;  :binary-propagations     16
;  :conflicts               527
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              277
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2373
;  :mk-clause               293
;  :num-allocs              5279738
;  :num-checks              765
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            251640)
(push) ; 7
(assert (not (not (= (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          126
;  :arith-assert-diseq      67
;  :arith-assert-lower      278
;  :arith-assert-upper      335
;  :arith-conflicts         148
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         200
;  :arith-pivots            240
;  :binary-propagations     16
;  :conflicts               528
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2375
;  :mk-clause               295
;  :num-allocs              5279738
;  :num-checks              766
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            251816)
(assert (< $k@93@03 (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(assert (<=
  $Perm.No
  (- (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $k@93@03)))
(assert (<=
  (- (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $k@93@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $k@93@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          129
;  :arith-assert-diseq      67
;  :arith-assert-lower      280
;  :arith-assert-upper      337
;  :arith-conflicts         149
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         201
;  :arith-pivots            241
;  :binary-propagations     16
;  :conflicts               529
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2379
;  :mk-clause               295
;  :num-allocs              5279738
;  :num-checks              767
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            252231)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          129
;  :arith-assert-diseq      67
;  :arith-assert-lower      280
;  :arith-assert-upper      337
;  :arith-conflicts         149
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         201
;  :arith-pivots            241
;  :binary-propagations     16
;  :conflicts               529
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2379
;  :mk-clause               295
;  :num-allocs              5279738
;  :num-checks              768
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            252242)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          129
;  :arith-assert-diseq      67
;  :arith-assert-lower      280
;  :arith-assert-upper      337
;  :arith-conflicts         149
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         201
;  :arith-pivots            241
;  :binary-propagations     16
;  :conflicts               529
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2379
;  :mk-clause               295
;  :num-allocs              5279738
;  :num-checks              769
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            252271)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          129
;  :arith-assert-diseq      67
;  :arith-assert-lower      280
;  :arith-assert-upper      337
;  :arith-conflicts         149
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         201
;  :arith-pivots            241
;  :binary-propagations     16
;  :conflicts               529
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2379
;  :mk-clause               295
;  :num-allocs              5279738
;  :num-checks              770
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            252284)
(set-option :timeout 10)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          131
;  :arith-assert-diseq      67
;  :arith-assert-lower      280
;  :arith-assert-upper      338
;  :arith-conflicts         150
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         202
;  :arith-pivots            244
;  :binary-propagations     16
;  :conflicts               530
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2380
;  :mk-clause               295
;  :num-allocs              5279738
;  :num-checks              771
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            252497)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          131
;  :arith-assert-diseq      67
;  :arith-assert-lower      280
;  :arith-assert-upper      338
;  :arith-conflicts         150
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         202
;  :arith-pivots            244
;  :binary-propagations     16
;  :conflicts               530
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2380
;  :mk-clause               295
;  :num-allocs              5279738
;  :num-checks              772
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            252508)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          131
;  :arith-assert-diseq      67
;  :arith-assert-lower      280
;  :arith-assert-upper      338
;  :arith-conflicts         150
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         202
;  :arith-pivots            244
;  :binary-propagations     16
;  :conflicts               530
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2380
;  :mk-clause               295
;  :num-allocs              5279738
;  :num-checks              773
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            252537)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
  $t@54@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          131
;  :arith-assert-diseq      67
;  :arith-assert-lower      280
;  :arith-assert-upper      338
;  :arith-conflicts         150
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         202
;  :arith-pivots            244
;  :binary-propagations     16
;  :conflicts               531
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2381
;  :mk-clause               295
;  :num-allocs              5279738
;  :num-checks              774
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            252867)
(declare-const $k@94@03 $Perm)
(assert ($Perm.isReadVar $k@94@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          133
;  :arith-assert-diseq      68
;  :arith-assert-lower      282
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         203
;  :arith-pivots            245
;  :binary-propagations     16
;  :conflicts               532
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2386
;  :mk-clause               297
;  :num-allocs              5279738
;  :num-checks              775
;  :propagations            158
;  :quant-instantiations    64
;  :rlimit-count            253222)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          133
;  :arith-assert-diseq      68
;  :arith-assert-lower      282
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         203
;  :arith-pivots            245
;  :binary-propagations     16
;  :conflicts               532
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2386
;  :mk-clause               297
;  :num-allocs              5279738
;  :num-checks              776
;  :propagations            158
;  :quant-instantiations    64
;  :rlimit-count            253233)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          133
;  :arith-assert-diseq      68
;  :arith-assert-lower      282
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         203
;  :arith-pivots            245
;  :binary-propagations     16
;  :conflicts               532
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2386
;  :mk-clause               297
;  :num-allocs              5279738
;  :num-checks              777
;  :propagations            158
;  :quant-instantiations    64
;  :rlimit-count            253274)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@94@03 $Perm.No) (< $Perm.No $k@94@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          133
;  :arith-assert-diseq      68
;  :arith-assert-lower      282
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         203
;  :arith-pivots            245
;  :binary-propagations     16
;  :conflicts               533
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2386
;  :mk-clause               297
;  :num-allocs              5279738
;  :num-checks              778
;  :propagations            158
;  :quant-instantiations    64
;  :rlimit-count            253324)
(set-option :timeout 10)
(push) ; 7
(assert (not (= diz@6@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5121
;  :arith-add-rows          133
;  :arith-assert-diseq      68
;  :arith-assert-lower      282
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         203
;  :arith-pivots            245
;  :binary-propagations     16
;  :conflicts               533
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              279
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2386
;  :mk-clause               297
;  :num-allocs              5279738
;  :num-checks              779
;  :propagations            158
;  :quant-instantiations    64
;  :rlimit-count            253335)
(push) ; 7
(assert (not (not
  (=
    (+
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@85@03)
      $k@68@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5122
;  :arith-add-rows          138
;  :arith-assert-diseq      68
;  :arith-assert-lower      282
;  :arith-assert-upper      341
;  :arith-conflicts         152
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         203
;  :arith-pivots            247
;  :binary-propagations     16
;  :conflicts               534
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              281
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2388
;  :mk-clause               299
;  :num-allocs              5279738
;  :num-checks              780
;  :propagations            159
;  :quant-instantiations    64
;  :rlimit-count            253624)
(assert (<
  $k@94@03
  (+
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@85@03)
    $k@68@03)))
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@85@03)
      $k@68@03)
    $k@94@03)))
(assert (<=
  (-
    (+
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@85@03)
      $k@68@03)
    $k@94@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
            (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
          $k@85@03)
        $k@68@03)
      $k@94@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5122
;  :arith-add-rows          147
;  :arith-assert-diseq      68
;  :arith-assert-lower      284
;  :arith-assert-upper      343
;  :arith-conflicts         153
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         204
;  :arith-pivots            251
;  :binary-propagations     16
;  :conflicts               535
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              281
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2392
;  :mk-clause               299
;  :num-allocs              5279738
;  :num-checks              781
;  :propagations            159
;  :quant-instantiations    64
;  :rlimit-count            254192)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5122
;  :arith-add-rows          147
;  :arith-assert-diseq      68
;  :arith-assert-lower      284
;  :arith-assert-upper      343
;  :arith-conflicts         153
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         204
;  :arith-pivots            251
;  :binary-propagations     16
;  :conflicts               535
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              281
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2392
;  :mk-clause               299
;  :num-allocs              5279738
;  :num-checks              782
;  :propagations            159
;  :quant-instantiations    64
;  :rlimit-count            254203)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5122
;  :arith-add-rows          147
;  :arith-assert-diseq      68
;  :arith-assert-lower      284
;  :arith-assert-upper      343
;  :arith-conflicts         153
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         204
;  :arith-pivots            251
;  :binary-propagations     16
;  :conflicts               535
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              281
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2392
;  :mk-clause               299
;  :num-allocs              5279738
;  :num-checks              783
;  :propagations            159
;  :quant-instantiations    64
;  :rlimit-count            254244)
(push) ; 7
(assert (not (= diz@6@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5122
;  :arith-add-rows          147
;  :arith-assert-diseq      68
;  :arith-assert-lower      284
;  :arith-assert-upper      343
;  :arith-conflicts         153
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         204
;  :arith-pivots            251
;  :binary-propagations     16
;  :conflicts               535
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              281
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2392
;  :mk-clause               299
;  :num-allocs              5279738
;  :num-checks              784
;  :propagations            159
;  :quant-instantiations    64
;  :rlimit-count            254255)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5122
;  :arith-add-rows          149
;  :arith-assert-diseq      68
;  :arith-assert-lower      284
;  :arith-assert-upper      344
;  :arith-conflicts         154
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         205
;  :arith-pivots            252
;  :binary-propagations     16
;  :conflicts               536
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              281
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2393
;  :mk-clause               299
;  :num-allocs              5279738
;  :num-checks              785
;  :propagations            159
;  :quant-instantiations    64
;  :rlimit-count            254460)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5122
;  :arith-add-rows          151
;  :arith-assert-diseq      68
;  :arith-assert-lower      284
;  :arith-assert-upper      345
;  :arith-conflicts         155
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         206
;  :arith-pivots            255
;  :binary-propagations     16
;  :conflicts               537
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              281
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2394
;  :mk-clause               299
;  :num-allocs              5279738
;  :num-checks              786
;  :propagations            159
;  :quant-instantiations    64
;  :rlimit-count            254672)
(declare-const $k@95@03 $Perm)
(assert ($Perm.isReadVar $k@95@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5122
;  :arith-add-rows          153
;  :arith-assert-diseq      69
;  :arith-assert-lower      286
;  :arith-assert-upper      347
;  :arith-conflicts         156
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         207
;  :arith-pivots            256
;  :binary-propagations     16
;  :conflicts               538
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              281
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2399
;  :mk-clause               301
;  :num-allocs              5279738
;  :num-checks              787
;  :propagations            160
;  :quant-instantiations    64
;  :rlimit-count            255025)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@95@03 $Perm.No) (< $Perm.No $k@95@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5122
;  :arith-add-rows          153
;  :arith-assert-diseq      69
;  :arith-assert-lower      286
;  :arith-assert-upper      347
;  :arith-conflicts         156
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         207
;  :arith-pivots            256
;  :binary-propagations     16
;  :conflicts               539
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              281
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2399
;  :mk-clause               301
;  :num-allocs              5279738
;  :num-checks              788
;  :propagations            160
;  :quant-instantiations    64
;  :rlimit-count            255075)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5122
;  :arith-add-rows          153
;  :arith-assert-diseq      69
;  :arith-assert-lower      286
;  :arith-assert-upper      347
;  :arith-conflicts         156
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         207
;  :arith-pivots            256
;  :binary-propagations     16
;  :conflicts               539
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              281
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2399
;  :mk-clause               301
;  :num-allocs              5279738
;  :num-checks              789
;  :propagations            160
;  :quant-instantiations    64
;  :rlimit-count            255086)
(push) ; 7
(assert (not (not
  (=
    (+
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@87@03)
      $k@65@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5123
;  :arith-add-rows          153
;  :arith-assert-diseq      69
;  :arith-assert-lower      286
;  :arith-assert-upper      348
;  :arith-conflicts         157
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         207
;  :arith-pivots            257
;  :binary-propagations     16
;  :conflicts               540
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              283
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2401
;  :mk-clause               303
;  :num-allocs              5279738
;  :num-checks              790
;  :propagations            161
;  :quant-instantiations    64
;  :rlimit-count            255236)
(assert (<
  $k@95@03
  (+
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@87@03)
    $k@65@03)))
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@87@03)
      $k@65@03)
    $k@95@03)))
(assert (<=
  (-
    (+
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@87@03)
      $k@65@03)
    $k@95@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (-
            (+
              (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
              $k@57@03)
            $k@71@03)
          $k@87@03)
        $k@65@03)
      $k@95@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5123
;  :arith-add-rows          160
;  :arith-assert-diseq      69
;  :arith-assert-lower      288
;  :arith-assert-upper      350
;  :arith-conflicts         158
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         208
;  :arith-pivots            261
;  :binary-propagations     16
;  :conflicts               541
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              283
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2405
;  :mk-clause               303
;  :num-allocs              5279738
;  :num-checks              791
;  :propagations            161
;  :quant-instantiations    64
;  :rlimit-count            255711)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5123
;  :arith-add-rows          160
;  :arith-assert-diseq      69
;  :arith-assert-lower      288
;  :arith-assert-upper      350
;  :arith-conflicts         158
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         208
;  :arith-pivots            261
;  :binary-propagations     16
;  :conflicts               541
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              283
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2405
;  :mk-clause               303
;  :num-allocs              5279738
;  :num-checks              792
;  :propagations            161
;  :quant-instantiations    64
;  :rlimit-count            255722)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5123
;  :arith-add-rows          160
;  :arith-assert-diseq      69
;  :arith-assert-lower      288
;  :arith-assert-upper      350
;  :arith-conflicts         158
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         208
;  :arith-pivots            261
;  :binary-propagations     16
;  :conflicts               541
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              283
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2405
;  :mk-clause               303
;  :num-allocs              5279738
;  :num-checks              793
;  :propagations            161
;  :quant-instantiations    64
;  :rlimit-count            255763)
; [exec]
; label __return_set_bit
; [exec]
; sys__result := sys__local__result__12
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__22: Int :: { diz.ALU_m.Main_process_state[i__22] } 0 <= i__22 && i__22 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__22] == -1 || 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && 0 <= diz.ALU_m.Main_alu.ALU_RESULT && diz.ALU_m.Main_alu.ALU_RESULT <= 16 && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_init, 1 / 2) && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_mon.Monitor_init, 1 / 2) && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu == diz
(declare-const $k@96@03 $Perm)
(assert ($Perm.isReadVar $k@96@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@96@03 $Perm.No) (< $Perm.No $k@96@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5123
;  :arith-add-rows          160
;  :arith-assert-diseq      70
;  :arith-assert-lower      290
;  :arith-assert-upper      351
;  :arith-conflicts         158
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         208
;  :arith-pivots            261
;  :binary-propagations     16
;  :conflicts               542
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              283
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2409
;  :mk-clause               305
;  :num-allocs              5279738
;  :num-checks              794
;  :propagations            162
;  :quant-instantiations    64
;  :rlimit-count            255962)
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          162
;  :arith-assert-diseq      70
;  :arith-assert-lower      290
;  :arith-assert-upper      352
;  :arith-conflicts         159
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         208
;  :arith-pivots            262
;  :binary-propagations     16
;  :conflicts               543
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2411
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              795
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            256167)
(assert (<
  $k@96@03
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))))
(assert (<=
  $Perm.No
  (-
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $k@96@03)))
(assert (<=
  (-
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $k@96@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@96@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          167
;  :arith-assert-diseq      70
;  :arith-assert-lower      292
;  :arith-assert-upper      354
;  :arith-conflicts         160
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         209
;  :arith-pivots            265
;  :binary-propagations     16
;  :conflicts               544
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2415
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              796
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            256633)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          169
;  :arith-assert-diseq      70
;  :arith-assert-lower      292
;  :arith-assert-upper      355
;  :arith-conflicts         161
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         210
;  :arith-pivots            266
;  :binary-propagations     16
;  :conflicts               545
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2416
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              797
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            256839)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          169
;  :arith-assert-diseq      70
;  :arith-assert-lower      292
;  :arith-assert-upper      355
;  :arith-conflicts         161
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         210
;  :arith-pivots            266
;  :binary-propagations     16
;  :conflicts               546
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2417
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              798
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            256924)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          171
;  :arith-assert-diseq      70
;  :arith-assert-lower      292
;  :arith-assert-upper      356
;  :arith-conflicts         162
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         211
;  :arith-pivots            269
;  :binary-propagations     16
;  :conflicts               547
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2418
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              799
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            257137)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          171
;  :arith-assert-diseq      70
;  :arith-assert-lower      292
;  :arith-assert-upper      356
;  :arith-conflicts         162
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         211
;  :arith-pivots            269
;  :binary-propagations     16
;  :conflicts               548
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2419
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              800
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            257222)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          173
;  :arith-assert-diseq      70
;  :arith-assert-lower      292
;  :arith-assert-upper      357
;  :arith-conflicts         163
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         212
;  :arith-pivots            270
;  :binary-propagations     16
;  :conflicts               549
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2420
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              801
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            257428)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          173
;  :arith-assert-diseq      70
;  :arith-assert-lower      292
;  :arith-assert-upper      357
;  :arith-conflicts         163
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         212
;  :arith-pivots            270
;  :binary-propagations     16
;  :conflicts               550
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2421
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              802
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            257513)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          175
;  :arith-assert-diseq      70
;  :arith-assert-lower      292
;  :arith-assert-upper      358
;  :arith-conflicts         164
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         213
;  :arith-pivots            273
;  :binary-propagations     16
;  :conflicts               551
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2422
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              803
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            257726)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          175
;  :arith-assert-diseq      70
;  :arith-assert-lower      292
;  :arith-assert-upper      358
;  :arith-conflicts         164
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         213
;  :arith-pivots            273
;  :binary-propagations     16
;  :conflicts               552
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2423
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              804
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            257811)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          177
;  :arith-assert-diseq      70
;  :arith-assert-lower      292
;  :arith-assert-upper      359
;  :arith-conflicts         165
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         214
;  :arith-pivots            274
;  :binary-propagations     16
;  :conflicts               553
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2424
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              805
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            258017)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          177
;  :arith-assert-diseq      70
;  :arith-assert-lower      292
;  :arith-assert-upper      359
;  :arith-conflicts         165
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         214
;  :arith-pivots            274
;  :binary-propagations     16
;  :conflicts               554
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2425
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              806
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            258102)
; [eval] (forall i__22: Int :: { diz.ALU_m.Main_process_state[i__22] } 0 <= i__22 && i__22 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__22] == -1 || 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|)
(declare-const i__22@97@03 Int)
(push) ; 7
; [eval] 0 <= i__22 && i__22 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__22] == -1 || 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__22 && i__22 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__22
(push) ; 8
; [then-branch: 35 | 0 <= i__22@97@03 | live]
; [else-branch: 35 | !(0 <= i__22@97@03) | live]
(push) ; 9
; [then-branch: 35 | 0 <= i__22@97@03]
(assert (<= 0 i__22@97@03))
; [eval] i__22 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          179
;  :arith-assert-diseq      70
;  :arith-assert-lower      293
;  :arith-assert-upper      360
;  :arith-conflicts         166
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         215
;  :arith-pivots            277
;  :binary-propagations     16
;  :conflicts               555
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2427
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              807
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            258367)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          179
;  :arith-assert-diseq      70
;  :arith-assert-lower      293
;  :arith-assert-upper      360
;  :arith-conflicts         166
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         215
;  :arith-pivots            277
;  :binary-propagations     16
;  :conflicts               556
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2428
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              808
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            258452)
(pop) ; 9
(push) ; 9
; [else-branch: 35 | !(0 <= i__22@97@03)]
(assert (not (<= 0 i__22@97@03)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 36 | i__22@97@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__22@97@03 | live]
; [else-branch: 36 | !(i__22@97@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__22@97@03) | live]
(push) ; 9
; [then-branch: 36 | i__22@97@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__22@97@03]
(assert (and
  (<
    i__22@97@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
  (<= 0 i__22@97@03)))
; [eval] diz.ALU_m.Main_process_state[i__22] == -1 || 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__22] == -1
; [eval] diz.ALU_m.Main_process_state[i__22]
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5125
;  :arith-add-rows          181
;  :arith-assert-diseq      70
;  :arith-assert-lower      294
;  :arith-assert-upper      362
;  :arith-conflicts         167
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         217
;  :arith-pivots            278
;  :binary-propagations     16
;  :conflicts               557
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2431
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              809
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            258771)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5125
;  :arith-add-rows          181
;  :arith-assert-diseq      70
;  :arith-assert-lower      294
;  :arith-assert-upper      362
;  :arith-conflicts         167
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         217
;  :arith-pivots            278
;  :binary-propagations     16
;  :conflicts               558
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2432
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              810
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            258856)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__22@97@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5125
;  :arith-add-rows          181
;  :arith-assert-diseq      70
;  :arith-assert-lower      294
;  :arith-assert-upper      362
;  :arith-conflicts         167
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         217
;  :arith-pivots            278
;  :binary-propagations     16
;  :conflicts               558
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2432
;  :mk-clause               307
;  :num-allocs              5279738
;  :num-checks              811
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            258865)
; [eval] -1
(push) ; 10
; [then-branch: 37 | First:(Second:(Second:(Second:($t@62@03))))[i__22@97@03] == -1 | live]
; [else-branch: 37 | First:(Second:(Second:(Second:($t@62@03))))[i__22@97@03] != -1 | live]
(push) ; 11
; [then-branch: 37 | First:(Second:(Second:(Second:($t@62@03))))[i__22@97@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__22@97@03)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 37 | First:(Second:(Second:(Second:($t@62@03))))[i__22@97@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__22@97@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__22]
; [eval] diz.ALU_m.Main_process_state[i__22]
(set-option :timeout 10)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5127
;  :arith-add-rows          183
;  :arith-assert-diseq      72
;  :arith-assert-lower      297
;  :arith-assert-upper      364
;  :arith-conflicts         168
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         218
;  :arith-pivots            281
;  :binary-propagations     16
;  :conflicts               559
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2440
;  :mk-clause               320
;  :num-allocs              5279738
;  :num-checks              812
;  :propagations            168
;  :quant-instantiations    66
;  :rlimit-count            259310)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5127
;  :arith-add-rows          183
;  :arith-assert-diseq      72
;  :arith-assert-lower      297
;  :arith-assert-upper      364
;  :arith-conflicts         168
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         218
;  :arith-pivots            281
;  :binary-propagations     16
;  :conflicts               560
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2441
;  :mk-clause               320
;  :num-allocs              5279738
;  :num-checks              813
;  :propagations            168
;  :quant-instantiations    66
;  :rlimit-count            259395)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__22@97@03 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5127
;  :arith-add-rows          183
;  :arith-assert-diseq      72
;  :arith-assert-lower      297
;  :arith-assert-upper      364
;  :arith-conflicts         168
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         218
;  :arith-pivots            281
;  :binary-propagations     16
;  :conflicts               560
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2441
;  :mk-clause               320
;  :num-allocs              5279738
;  :num-checks              814
;  :propagations            168
;  :quant-instantiations    66
;  :rlimit-count            259404)
(push) ; 12
; [then-branch: 38 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__22@97@03] | live]
; [else-branch: 38 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__22@97@03]) | live]
(push) ; 13
; [then-branch: 38 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__22@97@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__22@97@03)))
; [eval] diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__22]
(set-option :timeout 10)
(push) ; 14
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          185
;  :arith-assert-diseq      72
;  :arith-assert-lower      299
;  :arith-assert-upper      366
;  :arith-conflicts         169
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         220
;  :arith-pivots            283
;  :binary-propagations     16
;  :conflicts               561
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2446
;  :mk-clause               320
;  :num-allocs              5279738
;  :num-checks              815
;  :propagations            168
;  :quant-instantiations    66
;  :rlimit-count            259738)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          185
;  :arith-assert-diseq      72
;  :arith-assert-lower      299
;  :arith-assert-upper      366
;  :arith-conflicts         169
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         220
;  :arith-pivots            283
;  :binary-propagations     16
;  :conflicts               562
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2447
;  :mk-clause               320
;  :num-allocs              5279738
;  :num-checks              816
;  :propagations            168
;  :quant-instantiations    66
;  :rlimit-count            259823)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__22@97@03 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          185
;  :arith-assert-diseq      72
;  :arith-assert-lower      299
;  :arith-assert-upper      366
;  :arith-conflicts         169
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         220
;  :arith-pivots            283
;  :binary-propagations     16
;  :conflicts               562
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2447
;  :mk-clause               320
;  :num-allocs              5279738
;  :num-checks              817
;  :propagations            168
;  :quant-instantiations    66
;  :rlimit-count            259832)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          187
;  :arith-assert-diseq      72
;  :arith-assert-lower      299
;  :arith-assert-upper      367
;  :arith-conflicts         170
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         221
;  :arith-pivots            286
;  :binary-propagations     16
;  :conflicts               563
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2448
;  :mk-clause               320
;  :num-allocs              5279738
;  :num-checks              818
;  :propagations            168
;  :quant-instantiations    66
;  :rlimit-count            260045)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          187
;  :arith-assert-diseq      72
;  :arith-assert-lower      299
;  :arith-assert-upper      367
;  :arith-conflicts         170
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         221
;  :arith-pivots            286
;  :binary-propagations     16
;  :conflicts               564
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              285
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2449
;  :mk-clause               320
;  :num-allocs              5279738
;  :num-checks              819
;  :propagations            168
;  :quant-instantiations    66
;  :rlimit-count            260130)
(pop) ; 13
(push) ; 13
; [else-branch: 38 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__22@97@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__22@97@03))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 36 | !(i__22@97@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__22@97@03)]
(assert (not
  (and
    (<
      i__22@97@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
    (<= 0 i__22@97@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__22@97@03 Int)) (!
  (implies
    (and
      (<
        i__22@97@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__22@97@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__22@97@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__22@97@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__22@97@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__22@97@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          187
;  :arith-assert-diseq      74
;  :arith-assert-lower      300
;  :arith-assert-upper      368
;  :arith-conflicts         170
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         222
;  :arith-pivots            287
;  :binary-propagations     16
;  :conflicts               565
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2457
;  :mk-clause               334
;  :num-allocs              5279738
;  :num-checks              820
;  :propagations            170
;  :quant-instantiations    68
;  :rlimit-count            260604)
(assert (forall ((i__22@97@03 Int)) (!
  (implies
    (and
      (<
        i__22@97@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__22@97@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__22@97@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__22@97@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__22@97@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__22@97@03))
  :qid |prog.l<no position>|)))
(declare-const $k@98@03 $Perm)
(assert ($Perm.isReadVar $k@98@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          189
;  :arith-assert-diseq      75
;  :arith-assert-lower      302
;  :arith-assert-upper      370
;  :arith-conflicts         171
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         223
;  :arith-pivots            288
;  :binary-propagations     16
;  :conflicts               566
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2463
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              821
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            261321)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@98@03 $Perm.No) (< $Perm.No $k@98@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          189
;  :arith-assert-diseq      75
;  :arith-assert-lower      302
;  :arith-assert-upper      370
;  :arith-conflicts         171
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         223
;  :arith-pivots            288
;  :binary-propagations     16
;  :conflicts               567
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2463
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              822
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            261371)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          189
;  :arith-assert-diseq      75
;  :arith-assert-lower      302
;  :arith-assert-upper      370
;  :arith-conflicts         171
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         223
;  :arith-pivots            288
;  :binary-propagations     16
;  :conflicts               567
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2463
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              823
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            261382)
(push) ; 7
(assert (not (not
  (=
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          189
;  :arith-assert-diseq      75
;  :arith-assert-lower      302
;  :arith-assert-upper      370
;  :arith-conflicts         171
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         223
;  :arith-pivots            288
;  :binary-propagations     16
;  :conflicts               568
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2464
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              824
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            261500)
(assert (<
  $k@98@03
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03)))
(assert (<=
  $Perm.No
  (-
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $k@98@03)))
(assert (<=
  (-
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $k@98@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@98@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          195
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      372
;  :arith-conflicts         172
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         224
;  :arith-pivots            291
;  :binary-propagations     16
;  :conflicts               569
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2468
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              825
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            261947)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          195
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      372
;  :arith-conflicts         172
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         224
;  :arith-pivots            291
;  :binary-propagations     16
;  :conflicts               569
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2468
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              826
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            261958)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          195
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      372
;  :arith-conflicts         172
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         224
;  :arith-pivots            291
;  :binary-propagations     16
;  :conflicts               569
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2468
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              827
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            261999)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          197
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      373
;  :arith-conflicts         173
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         225
;  :arith-pivots            292
;  :binary-propagations     16
;  :conflicts               570
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2469
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              828
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            262205)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          197
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      373
;  :arith-conflicts         173
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         225
;  :arith-pivots            292
;  :binary-propagations     16
;  :conflicts               570
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2469
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              829
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            262216)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          197
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      373
;  :arith-conflicts         173
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         225
;  :arith-pivots            292
;  :binary-propagations     16
;  :conflicts               570
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2469
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              830
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            262257)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          197
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      373
;  :arith-conflicts         173
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         225
;  :arith-pivots            292
;  :binary-propagations     16
;  :conflicts               570
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2469
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              831
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            262268)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          199
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      374
;  :arith-conflicts         174
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         226
;  :arith-pivots            295
;  :binary-propagations     16
;  :conflicts               571
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2470
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              832
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            262481)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          199
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      374
;  :arith-conflicts         174
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         226
;  :arith-pivots            295
;  :binary-propagations     16
;  :conflicts               571
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2470
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              833
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            262492)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          199
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      374
;  :arith-conflicts         174
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         226
;  :arith-pivots            295
;  :binary-propagations     16
;  :conflicts               571
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2470
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              834
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            262533)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          199
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      374
;  :arith-conflicts         174
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         226
;  :arith-pivots            295
;  :binary-propagations     16
;  :conflicts               571
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2470
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              835
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            262544)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          201
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      375
;  :arith-conflicts         175
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         227
;  :arith-pivots            296
;  :binary-propagations     16
;  :conflicts               572
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2471
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              836
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            262750)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          201
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      375
;  :arith-conflicts         175
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         227
;  :arith-pivots            296
;  :binary-propagations     16
;  :conflicts               572
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2471
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              837
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            262761)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          201
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      375
;  :arith-conflicts         175
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         227
;  :arith-pivots            296
;  :binary-propagations     16
;  :conflicts               572
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2471
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              838
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            262802)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          201
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      375
;  :arith-conflicts         175
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         227
;  :arith-pivots            296
;  :binary-propagations     16
;  :conflicts               572
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2471
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              839
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            262813)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          203
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      376
;  :arith-conflicts         176
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         228
;  :arith-pivots            299
;  :binary-propagations     16
;  :conflicts               573
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2472
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              840
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263026)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          203
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      376
;  :arith-conflicts         176
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         228
;  :arith-pivots            299
;  :binary-propagations     16
;  :conflicts               573
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2472
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              841
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263037)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          203
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      376
;  :arith-conflicts         176
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         228
;  :arith-pivots            299
;  :binary-propagations     16
;  :conflicts               573
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2472
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              842
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263078)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          203
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      376
;  :arith-conflicts         176
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         228
;  :arith-pivots            299
;  :binary-propagations     16
;  :conflicts               573
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2472
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              843
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263089)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          205
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      377
;  :arith-conflicts         177
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         229
;  :arith-pivots            300
;  :binary-propagations     16
;  :conflicts               574
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2473
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              844
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263295)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          205
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      377
;  :arith-conflicts         177
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         229
;  :arith-pivots            300
;  :binary-propagations     16
;  :conflicts               574
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2473
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              845
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263306)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          205
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      377
;  :arith-conflicts         177
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         229
;  :arith-pivots            300
;  :binary-propagations     16
;  :conflicts               574
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2473
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              846
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263347)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          205
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      377
;  :arith-conflicts         177
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         229
;  :arith-pivots            300
;  :binary-propagations     16
;  :conflicts               574
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2473
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              847
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263358)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          207
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      378
;  :arith-conflicts         178
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         230
;  :arith-pivots            303
;  :binary-propagations     16
;  :conflicts               575
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2474
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              848
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263571)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          207
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      378
;  :arith-conflicts         178
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         230
;  :arith-pivots            303
;  :binary-propagations     16
;  :conflicts               575
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2474
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              849
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263582)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          207
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      378
;  :arith-conflicts         178
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         230
;  :arith-pivots            303
;  :binary-propagations     16
;  :conflicts               575
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2474
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              850
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263623)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          207
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      378
;  :arith-conflicts         178
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         230
;  :arith-pivots            303
;  :binary-propagations     16
;  :conflicts               575
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2474
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              851
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263634)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          209
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      379
;  :arith-conflicts         179
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         231
;  :arith-pivots            304
;  :binary-propagations     16
;  :conflicts               576
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2475
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              852
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263840)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          209
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      379
;  :arith-conflicts         179
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         231
;  :arith-pivots            304
;  :binary-propagations     16
;  :conflicts               576
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2475
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              853
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263851)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          209
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      379
;  :arith-conflicts         179
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         231
;  :arith-pivots            304
;  :binary-propagations     16
;  :conflicts               576
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2475
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              854
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263892)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          209
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      379
;  :arith-conflicts         179
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         231
;  :arith-pivots            304
;  :binary-propagations     16
;  :conflicts               576
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2475
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              855
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            263903)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          211
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      380
;  :arith-conflicts         180
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         232
;  :arith-pivots            307
;  :binary-propagations     16
;  :conflicts               577
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2476
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              856
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            264116)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          211
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      380
;  :arith-conflicts         180
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         232
;  :arith-pivots            307
;  :binary-propagations     16
;  :conflicts               577
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2476
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              857
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            264127)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          211
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      380
;  :arith-conflicts         180
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         232
;  :arith-pivots            307
;  :binary-propagations     16
;  :conflicts               577
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2476
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              858
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            264168)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          211
;  :arith-assert-diseq      75
;  :arith-assert-lower      304
;  :arith-assert-upper      380
;  :arith-conflicts         180
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         232
;  :arith-pivots            307
;  :binary-propagations     16
;  :conflicts               577
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2476
;  :mk-clause               336
;  :num-allocs              5279738
;  :num-checks              859
;  :propagations            171
;  :quant-instantiations    68
;  :rlimit-count            264179)
(declare-const $k@99@03 $Perm)
(assert ($Perm.isReadVar $k@99@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          213
;  :arith-assert-diseq      76
;  :arith-assert-lower      306
;  :arith-assert-upper      382
;  :arith-conflicts         181
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         233
;  :arith-pivots            308
;  :binary-propagations     16
;  :conflicts               578
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2481
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              860
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            264533)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@99@03 $Perm.No) (< $Perm.No $k@99@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          213
;  :arith-assert-diseq      76
;  :arith-assert-lower      306
;  :arith-assert-upper      382
;  :arith-conflicts         181
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         233
;  :arith-pivots            308
;  :binary-propagations     16
;  :conflicts               579
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2481
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              861
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            264583)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          213
;  :arith-assert-diseq      76
;  :arith-assert-lower      306
;  :arith-assert-upper      382
;  :arith-conflicts         181
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         233
;  :arith-pivots            308
;  :binary-propagations     16
;  :conflicts               579
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2481
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              862
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            264594)
(push) ; 7
(assert (not (not (= (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          213
;  :arith-assert-diseq      76
;  :arith-assert-lower      306
;  :arith-assert-upper      382
;  :arith-conflicts         181
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         233
;  :arith-pivots            308
;  :binary-propagations     16
;  :conflicts               580
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2482
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              863
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            264686)
(assert (< $k@99@03 (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03)))
(assert (<= $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@99@03)))
(assert (<= (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@99@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@99@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          218
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      384
;  :arith-conflicts         182
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         234
;  :arith-pivots            312
;  :binary-propagations     16
;  :conflicts               581
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2486
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              864
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            265113)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          218
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      384
;  :arith-conflicts         182
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         234
;  :arith-pivots            312
;  :binary-propagations     16
;  :conflicts               581
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2486
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              865
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            265124)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          218
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      384
;  :arith-conflicts         182
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         234
;  :arith-pivots            312
;  :binary-propagations     16
;  :conflicts               581
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2486
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              866
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            265153)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          218
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      384
;  :arith-conflicts         182
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         234
;  :arith-pivots            312
;  :binary-propagations     16
;  :conflicts               581
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2486
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              867
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            265166)
(set-option :timeout 10)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          220
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      385
;  :arith-conflicts         183
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         235
;  :arith-pivots            313
;  :binary-propagations     16
;  :conflicts               582
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2487
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              868
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            265372)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          220
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      385
;  :arith-conflicts         183
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         235
;  :arith-pivots            313
;  :binary-propagations     16
;  :conflicts               582
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2487
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              869
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            265383)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          220
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      385
;  :arith-conflicts         183
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         235
;  :arith-pivots            313
;  :binary-propagations     16
;  :conflicts               582
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2487
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              870
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            265412)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          220
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      385
;  :arith-conflicts         183
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         235
;  :arith-pivots            313
;  :binary-propagations     16
;  :conflicts               583
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2488
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              871
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            265672)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          222
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      386
;  :arith-conflicts         184
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         236
;  :arith-pivots            316
;  :binary-propagations     16
;  :conflicts               584
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2489
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              872
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            265885)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          222
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      386
;  :arith-conflicts         184
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         236
;  :arith-pivots            316
;  :binary-propagations     16
;  :conflicts               584
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2489
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              873
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            265896)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          222
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      386
;  :arith-conflicts         184
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         236
;  :arith-pivots            316
;  :binary-propagations     16
;  :conflicts               584
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2489
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              874
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            265925)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          222
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      386
;  :arith-conflicts         184
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         236
;  :arith-pivots            316
;  :binary-propagations     16
;  :conflicts               585
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2490
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              875
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            266185)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          224
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      387
;  :arith-conflicts         185
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         237
;  :arith-pivots            317
;  :binary-propagations     16
;  :conflicts               586
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2491
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              876
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            266391)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          224
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      387
;  :arith-conflicts         185
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         237
;  :arith-pivots            317
;  :binary-propagations     16
;  :conflicts               586
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2491
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              877
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            266402)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          224
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      387
;  :arith-conflicts         185
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         237
;  :arith-pivots            317
;  :binary-propagations     16
;  :conflicts               586
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2491
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              878
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            266431)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          224
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      387
;  :arith-conflicts         185
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         237
;  :arith-pivots            317
;  :binary-propagations     16
;  :conflicts               587
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2492
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              879
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            266691)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          226
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      388
;  :arith-conflicts         186
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         238
;  :arith-pivots            320
;  :binary-propagations     16
;  :conflicts               588
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2493
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              880
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            266904)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          226
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      388
;  :arith-conflicts         186
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         238
;  :arith-pivots            320
;  :binary-propagations     16
;  :conflicts               588
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2493
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              881
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            266915)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          226
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      388
;  :arith-conflicts         186
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         238
;  :arith-pivots            320
;  :binary-propagations     16
;  :conflicts               588
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2493
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              882
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            266944)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          226
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      388
;  :arith-conflicts         186
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         238
;  :arith-pivots            320
;  :binary-propagations     16
;  :conflicts               589
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2494
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              883
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            267204)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          228
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      389
;  :arith-conflicts         187
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         239
;  :arith-pivots            321
;  :binary-propagations     16
;  :conflicts               590
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2495
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              884
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            267410)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          228
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      389
;  :arith-conflicts         187
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         239
;  :arith-pivots            321
;  :binary-propagations     16
;  :conflicts               590
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2495
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              885
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            267421)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          228
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      389
;  :arith-conflicts         187
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         239
;  :arith-pivots            321
;  :binary-propagations     16
;  :conflicts               590
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2495
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              886
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            267450)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          228
;  :arith-assert-diseq      76
;  :arith-assert-lower      308
;  :arith-assert-upper      389
;  :arith-conflicts         187
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         239
;  :arith-pivots            321
;  :binary-propagations     16
;  :conflicts               591
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2496
;  :mk-clause               338
;  :num-allocs              5279738
;  :num-checks              887
;  :propagations            172
;  :quant-instantiations    68
;  :rlimit-count            267710)
(declare-const $k@100@03 $Perm)
(assert ($Perm.isReadVar $k@100@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          230
;  :arith-assert-diseq      77
;  :arith-assert-lower      310
;  :arith-assert-upper      391
;  :arith-conflicts         188
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         240
;  :arith-pivots            324
;  :binary-propagations     16
;  :conflicts               592
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2501
;  :mk-clause               340
;  :num-allocs              5279738
;  :num-checks              888
;  :propagations            173
;  :quant-instantiations    68
;  :rlimit-count            268071)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@100@03 $Perm.No) (< $Perm.No $k@100@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          230
;  :arith-assert-diseq      77
;  :arith-assert-lower      310
;  :arith-assert-upper      391
;  :arith-conflicts         188
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         240
;  :arith-pivots            324
;  :binary-propagations     16
;  :conflicts               593
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2501
;  :mk-clause               340
;  :num-allocs              5279738
;  :num-checks              889
;  :propagations            173
;  :quant-instantiations    68
;  :rlimit-count            268121)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          230
;  :arith-assert-diseq      77
;  :arith-assert-lower      310
;  :arith-assert-upper      391
;  :arith-conflicts         188
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         240
;  :arith-pivots            324
;  :binary-propagations     16
;  :conflicts               593
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2501
;  :mk-clause               340
;  :num-allocs              5279738
;  :num-checks              890
;  :propagations            173
;  :quant-instantiations    68
;  :rlimit-count            268132)
(push) ; 7
(assert (not (not (= (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          230
;  :arith-assert-diseq      77
;  :arith-assert-lower      310
;  :arith-assert-upper      391
;  :arith-conflicts         188
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         240
;  :arith-pivots            324
;  :binary-propagations     16
;  :conflicts               594
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2502
;  :mk-clause               340
;  :num-allocs              5279738
;  :num-checks              891
;  :propagations            173
;  :quant-instantiations    68
;  :rlimit-count            268224)
(assert (< $k@100@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)))
(assert (<= $Perm.No (- (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03) $k@100@03)))
(assert (<= (- (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03) $k@100@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03) $k@100@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          233
;  :arith-assert-diseq      77
;  :arith-assert-lower      312
;  :arith-assert-upper      393
;  :arith-conflicts         189
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         241
;  :arith-pivots            326
;  :binary-propagations     16
;  :conflicts               595
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2506
;  :mk-clause               340
;  :num-allocs              5279738
;  :num-checks              892
;  :propagations            173
;  :quant-instantiations    68
;  :rlimit-count            268642)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          233
;  :arith-assert-diseq      77
;  :arith-assert-lower      312
;  :arith-assert-upper      393
;  :arith-conflicts         189
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         241
;  :arith-pivots            326
;  :binary-propagations     16
;  :conflicts               595
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2506
;  :mk-clause               340
;  :num-allocs              5279738
;  :num-checks              893
;  :propagations            173
;  :quant-instantiations    68
;  :rlimit-count            268653)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          233
;  :arith-assert-diseq      77
;  :arith-assert-lower      312
;  :arith-assert-upper      393
;  :arith-conflicts         189
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         241
;  :arith-pivots            326
;  :binary-propagations     16
;  :conflicts               595
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2506
;  :mk-clause               340
;  :num-allocs              5279738
;  :num-checks              894
;  :propagations            173
;  :quant-instantiations    68
;  :rlimit-count            268682)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          233
;  :arith-assert-diseq      77
;  :arith-assert-lower      312
;  :arith-assert-upper      393
;  :arith-conflicts         189
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         241
;  :arith-pivots            326
;  :binary-propagations     16
;  :conflicts               595
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2506
;  :mk-clause               340
;  :num-allocs              5279738
;  :num-checks              895
;  :propagations            173
;  :quant-instantiations    68
;  :rlimit-count            268695)
(set-option :timeout 10)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          235
;  :arith-assert-diseq      77
;  :arith-assert-lower      312
;  :arith-assert-upper      394
;  :arith-conflicts         190
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         242
;  :arith-pivots            329
;  :binary-propagations     16
;  :conflicts               596
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2507
;  :mk-clause               340
;  :num-allocs              5279738
;  :num-checks              896
;  :propagations            173
;  :quant-instantiations    68
;  :rlimit-count            268908)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          235
;  :arith-assert-diseq      77
;  :arith-assert-lower      312
;  :arith-assert-upper      394
;  :arith-conflicts         190
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         242
;  :arith-pivots            329
;  :binary-propagations     16
;  :conflicts               596
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2507
;  :mk-clause               340
;  :num-allocs              5279738
;  :num-checks              897
;  :propagations            173
;  :quant-instantiations    68
;  :rlimit-count            268919)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          235
;  :arith-assert-diseq      77
;  :arith-assert-lower      312
;  :arith-assert-upper      394
;  :arith-conflicts         190
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         242
;  :arith-pivots            329
;  :binary-propagations     16
;  :conflicts               596
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2507
;  :mk-clause               340
;  :num-allocs              5279738
;  :num-checks              898
;  :propagations            173
;  :quant-instantiations    68
;  :rlimit-count            268948)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
  $t@54@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          235
;  :arith-assert-diseq      77
;  :arith-assert-lower      312
;  :arith-assert-upper      394
;  :arith-conflicts         190
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         242
;  :arith-pivots            329
;  :binary-propagations     16
;  :conflicts               597
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2508
;  :mk-clause               340
;  :num-allocs              5279738
;  :num-checks              899
;  :propagations            173
;  :quant-instantiations    68
;  :rlimit-count            269278)
(declare-const $k@101@03 $Perm)
(assert ($Perm.isReadVar $k@101@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          237
;  :arith-assert-diseq      78
;  :arith-assert-lower      314
;  :arith-assert-upper      396
;  :arith-conflicts         191
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         243
;  :arith-pivots            330
;  :binary-propagations     16
;  :conflicts               598
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2513
;  :mk-clause               342
;  :num-allocs              5279738
;  :num-checks              900
;  :propagations            174
;  :quant-instantiations    68
;  :rlimit-count            269632)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          237
;  :arith-assert-diseq      78
;  :arith-assert-lower      314
;  :arith-assert-upper      396
;  :arith-conflicts         191
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         243
;  :arith-pivots            330
;  :binary-propagations     16
;  :conflicts               598
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2513
;  :mk-clause               342
;  :num-allocs              5279738
;  :num-checks              901
;  :propagations            174
;  :quant-instantiations    68
;  :rlimit-count            269643)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          237
;  :arith-assert-diseq      78
;  :arith-assert-lower      314
;  :arith-assert-upper      396
;  :arith-conflicts         191
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         243
;  :arith-pivots            330
;  :binary-propagations     16
;  :conflicts               598
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2513
;  :mk-clause               342
;  :num-allocs              5279738
;  :num-checks              902
;  :propagations            174
;  :quant-instantiations    68
;  :rlimit-count            269684)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@101@03 $Perm.No) (< $Perm.No $k@101@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          237
;  :arith-assert-diseq      78
;  :arith-assert-lower      314
;  :arith-assert-upper      396
;  :arith-conflicts         191
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         243
;  :arith-pivots            330
;  :binary-propagations     16
;  :conflicts               599
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2513
;  :mk-clause               342
;  :num-allocs              5279738
;  :num-checks              903
;  :propagations            174
;  :quant-instantiations    68
;  :rlimit-count            269734)
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          237
;  :arith-assert-diseq      78
;  :arith-assert-lower      314
;  :arith-assert-upper      396
;  :arith-conflicts         191
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         243
;  :arith-pivots            330
;  :binary-propagations     16
;  :conflicts               599
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2513
;  :mk-clause               342
;  :num-allocs              5279738
;  :num-checks              904
;  :propagations            174
;  :quant-instantiations    68
;  :rlimit-count            269745)
(push) ; 7
(assert (not (not (= $k@68@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          237
;  :arith-assert-diseq      78
;  :arith-assert-lower      314
;  :arith-assert-upper      396
;  :arith-conflicts         191
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         243
;  :arith-pivots            330
;  :binary-propagations     16
;  :conflicts               599
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2513
;  :mk-clause               342
;  :num-allocs              5279738
;  :num-checks              905
;  :propagations            174
;  :quant-instantiations    68
;  :rlimit-count            269756)
(assert (< $k@101@03 $k@68@03))
(assert (<= $Perm.No (- $k@68@03 $k@101@03)))
(assert (<= (- $k@68@03 $k@101@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@68@03 $k@101@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          239
;  :arith-assert-diseq      78
;  :arith-assert-lower      316
;  :arith-assert-upper      398
;  :arith-conflicts         192
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         244
;  :arith-pivots            334
;  :binary-propagations     16
;  :conflicts               600
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2517
;  :mk-clause               342
;  :num-allocs              5279738
;  :num-checks              906
;  :propagations            174
;  :quant-instantiations    68
;  :rlimit-count            270158)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          239
;  :arith-assert-diseq      78
;  :arith-assert-lower      316
;  :arith-assert-upper      398
;  :arith-conflicts         192
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         244
;  :arith-pivots            334
;  :binary-propagations     16
;  :conflicts               600
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2517
;  :mk-clause               342
;  :num-allocs              5279738
;  :num-checks              907
;  :propagations            174
;  :quant-instantiations    68
;  :rlimit-count            270169)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          239
;  :arith-assert-diseq      78
;  :arith-assert-lower      316
;  :arith-assert-upper      398
;  :arith-conflicts         192
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         244
;  :arith-pivots            334
;  :binary-propagations     16
;  :conflicts               600
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2517
;  :mk-clause               342
;  :num-allocs              5279738
;  :num-checks              908
;  :propagations            174
;  :quant-instantiations    68
;  :rlimit-count            270210)
(push) ; 7
(assert (not (= diz@6@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          239
;  :arith-assert-diseq      78
;  :arith-assert-lower      316
;  :arith-assert-upper      398
;  :arith-conflicts         192
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         244
;  :arith-pivots            334
;  :binary-propagations     16
;  :conflicts               600
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2517
;  :mk-clause               342
;  :num-allocs              5279738
;  :num-checks              909
;  :propagations            174
;  :quant-instantiations    68
;  :rlimit-count            270221)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          241
;  :arith-assert-diseq      78
;  :arith-assert-lower      316
;  :arith-assert-upper      399
;  :arith-conflicts         193
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         245
;  :arith-pivots            335
;  :binary-propagations     16
;  :conflicts               601
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2518
;  :mk-clause               342
;  :num-allocs              5279738
;  :num-checks              910
;  :propagations            174
;  :quant-instantiations    68
;  :rlimit-count            270427)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          243
;  :arith-assert-diseq      78
;  :arith-assert-lower      316
;  :arith-assert-upper      400
;  :arith-conflicts         194
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         246
;  :arith-pivots            338
;  :binary-propagations     16
;  :conflicts               602
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2519
;  :mk-clause               342
;  :num-allocs              5279738
;  :num-checks              911
;  :propagations            174
;  :quant-instantiations    68
;  :rlimit-count            270640)
(declare-const $k@102@03 $Perm)
(assert ($Perm.isReadVar $k@102@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          245
;  :arith-assert-diseq      79
;  :arith-assert-lower      318
;  :arith-assert-upper      402
;  :arith-conflicts         195
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         247
;  :arith-pivots            339
;  :binary-propagations     16
;  :conflicts               603
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2524
;  :mk-clause               344
;  :num-allocs              5279738
;  :num-checks              912
;  :propagations            175
;  :quant-instantiations    68
;  :rlimit-count            270994)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@102@03 $Perm.No) (< $Perm.No $k@102@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          245
;  :arith-assert-diseq      79
;  :arith-assert-lower      318
;  :arith-assert-upper      402
;  :arith-conflicts         195
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         247
;  :arith-pivots            339
;  :binary-propagations     16
;  :conflicts               604
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2524
;  :mk-clause               344
;  :num-allocs              5279738
;  :num-checks              913
;  :propagations            175
;  :quant-instantiations    68
;  :rlimit-count            271044)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          245
;  :arith-assert-diseq      79
;  :arith-assert-lower      318
;  :arith-assert-upper      402
;  :arith-conflicts         195
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         247
;  :arith-pivots            339
;  :binary-propagations     16
;  :conflicts               605
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2525
;  :mk-clause               344
;  :num-allocs              5279738
;  :num-checks              914
;  :propagations            175
;  :quant-instantiations    68
;  :rlimit-count            271129)
(push) ; 7
(assert (not (not (= $k@65@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          245
;  :arith-assert-diseq      79
;  :arith-assert-lower      318
;  :arith-assert-upper      402
;  :arith-conflicts         195
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         247
;  :arith-pivots            339
;  :binary-propagations     16
;  :conflicts               605
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2525
;  :mk-clause               344
;  :num-allocs              5279738
;  :num-checks              915
;  :propagations            175
;  :quant-instantiations    68
;  :rlimit-count            271140)
(assert (< $k@102@03 $k@65@03))
(assert (<= $Perm.No (- $k@65@03 $k@102@03)))
(assert (<= (- $k@65@03 $k@102@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@65@03 $k@102@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          248
;  :arith-assert-diseq      79
;  :arith-assert-lower      320
;  :arith-assert-upper      404
;  :arith-conflicts         196
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         248
;  :arith-pivots            343
;  :binary-propagations     16
;  :conflicts               606
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2529
;  :mk-clause               344
;  :num-allocs              5279738
;  :num-checks              916
;  :propagations            175
;  :quant-instantiations    68
;  :rlimit-count            271521)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          248
;  :arith-assert-diseq      79
;  :arith-assert-lower      320
;  :arith-assert-upper      404
;  :arith-conflicts         196
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         248
;  :arith-pivots            343
;  :binary-propagations     16
;  :conflicts               606
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2529
;  :mk-clause               344
;  :num-allocs              5279738
;  :num-checks              917
;  :propagations            175
;  :quant-instantiations    68
;  :rlimit-count            271532)
(push) ; 7
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          248
;  :arith-assert-diseq      79
;  :arith-assert-lower      320
;  :arith-assert-upper      404
;  :arith-conflicts         196
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         248
;  :arith-pivots            343
;  :binary-propagations     16
;  :conflicts               606
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   173
;  :datatype-splits         922
;  :decisions               1206
;  :del-clause              312
;  :final-checks            67
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.66
;  :mk-bool-var             2529
;  :mk-clause               344
;  :num-allocs              5279738
;  :num-checks              918
;  :propagations            175
;  :quant-instantiations    68
;  :rlimit-count            271573)
; [exec]
; inhale false
(pop) ; 6
(push) ; 6
; [else-branch: 30 | sys__result@44@03 != bit@10@03]
(assert (not (= sys__result@44@03 bit@10@03)))
(pop) ; 6
; [eval] !(current_bit__15 == bit)
; [eval] current_bit__15 == bit
(push) ; 6
(assert (not (= sys__result@44@03 bit@10@03)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5323
;  :arith-add-rows          255
;  :arith-assert-diseq      79
;  :arith-assert-lower      322
;  :arith-assert-upper      406
;  :arith-conflicts         196
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         250
;  :arith-pivots            357
;  :binary-propagations     16
;  :conflicts               606
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 1327
;  :datatype-occurs-check   182
;  :datatype-splits         960
;  :decisions               1260
;  :del-clause              332
;  :final-checks            70
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2575
;  :mk-clause               346
;  :num-allocs              5515453
;  :num-checks              919
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            273180
;  :time                    0.00)
(push) ; 6
(assert (not (not (= sys__result@44@03 bit@10@03))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5519
;  :arith-add-rows          256
;  :arith-assert-diseq      79
;  :arith-assert-lower      324
;  :arith-assert-upper      409
;  :arith-conflicts         196
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         251
;  :arith-offset-eqs        1
;  :arith-pivots            361
;  :binary-propagations     16
;  :conflicts               606
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1384
;  :datatype-occurs-check   191
;  :datatype-splits         998
;  :decisions               1315
;  :del-clause              336
;  :final-checks            74
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2623
;  :mk-clause               350
;  :num-allocs              5515453
;  :num-checks              920
;  :propagations            182
;  :quant-instantiations    68
;  :rlimit-count            274654
;  :time                    0.00)
; [then-branch: 39 | sys__result@44@03 != bit@10@03 | live]
; [else-branch: 39 | sys__result@44@03 == bit@10@03 | live]
(push) ; 6
; [then-branch: 39 | sys__result@44@03 != bit@10@03]
(assert (not (= sys__result@44@03 bit@10@03)))
; [eval] bit == 1
(push) ; 7
(assert (not (not (= bit@10@03 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5715
;  :arith-add-rows          256
;  :arith-assert-diseq      81
;  :arith-assert-lower      328
;  :arith-assert-upper      411
;  :arith-conflicts         196
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         253
;  :arith-offset-eqs        1
;  :arith-pivots            365
;  :binary-propagations     16
;  :conflicts               606
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 1441
;  :datatype-occurs-check   200
;  :datatype-splits         1036
;  :decisions               1370
;  :del-clause              342
;  :final-checks            77
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2673
;  :mk-clause               356
;  :num-allocs              5515453
;  :num-checks              921
;  :propagations            186
;  :quant-instantiations    68
;  :rlimit-count            276197
;  :time                    0.00)
(push) ; 7
(assert (not (= bit@10@03 1)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5909
;  :arith-add-rows          257
;  :arith-assert-diseq      81
;  :arith-assert-lower      330
;  :arith-assert-upper      413
;  :arith-conflicts         196
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         255
;  :arith-offset-eqs        1
;  :arith-pivots            369
;  :binary-propagations     16
;  :conflicts               606
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              344
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2719
;  :mk-clause               358
;  :num-allocs              5515453
;  :num-checks              922
;  :propagations            189
;  :quant-instantiations    68
;  :rlimit-count            277672
;  :time                    0.00)
; [then-branch: 40 | bit@10@03 == 1 | live]
; [else-branch: 40 | bit@10@03 != 1 | live]
(push) ; 7
; [then-branch: 40 | bit@10@03 == 1]
(assert (= bit@10@03 1))
; [exec]
; sys__local__result__12 := value + divisor__14
; [eval] value + divisor__14
(declare-const sys__local__result__12@103@03 Int)
(assert (= sys__local__result__12@103@03 (+ value@8@03 divisor__14@59@03)))
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && (true && (true && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__20: Int :: { diz.ALU_m.Main_process_state[i__20] } 0 <= i__20 && i__20 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__20] == -1 || 0 <= diz.ALU_m.Main_process_state[i__20] && diz.ALU_m.Main_process_state[i__20] < |diz.ALU_m.Main_event_state|)) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && 0 <= diz.ALU_m.Main_alu.ALU_RESULT && diz.ALU_m.Main_alu.ALU_RESULT <= 16 && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_init, 1 / 2) && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_mon.Monitor_init, 1 / 2) && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu == diz
(declare-const $k@104@03 $Perm)
(assert ($Perm.isReadVar $k@104@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@104@03 $Perm.No) (< $Perm.No $k@104@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5912
;  :arith-add-rows          257
;  :arith-assert-diseq      84
;  :arith-assert-lower      333
;  :arith-assert-upper      415
;  :arith-conflicts         196
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         255
;  :arith-offset-eqs        1
;  :arith-pivots            370
;  :binary-propagations     16
;  :conflicts               607
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              344
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2730
;  :mk-clause               367
;  :num-allocs              5515453
;  :num-checks              923
;  :propagations            192
;  :quant-instantiations    68
;  :rlimit-count            277990)
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (=
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          259
;  :arith-assert-diseq      84
;  :arith-assert-lower      333
;  :arith-assert-upper      416
;  :arith-conflicts         197
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         255
;  :arith-offset-eqs        1
;  :arith-pivots            371
;  :binary-propagations     16
;  :conflicts               608
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2732
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              924
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            278194)
(assert (<
  $k@104@03
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))))
(assert (<=
  $Perm.No
  (-
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $k@104@03)))
(assert (<=
  (-
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $k@104@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@104@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          264
;  :arith-assert-diseq      84
;  :arith-assert-lower      335
;  :arith-assert-upper      418
;  :arith-conflicts         198
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         256
;  :arith-offset-eqs        1
;  :arith-pivots            374
;  :binary-propagations     16
;  :conflicts               609
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2736
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              925
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            278659)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= $t@84@03 $Ref.null))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          264
;  :arith-assert-diseq      84
;  :arith-assert-lower      335
;  :arith-assert-upper      418
;  :arith-conflicts         198
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         256
;  :arith-offset-eqs        1
;  :arith-pivots            374
;  :binary-propagations     16
;  :conflicts               609
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2736
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              926
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            278677)
(assert (not (= $t@84@03 $Ref.null)))
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          266
;  :arith-assert-diseq      84
;  :arith-assert-lower      335
;  :arith-assert-upper      419
;  :arith-conflicts         199
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         257
;  :arith-offset-eqs        1
;  :arith-pivots            375
;  :binary-propagations     16
;  :conflicts               610
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2737
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              927
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            278902)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          266
;  :arith-assert-diseq      84
;  :arith-assert-lower      335
;  :arith-assert-upper      419
;  :arith-conflicts         199
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         257
;  :arith-offset-eqs        1
;  :arith-pivots            375
;  :binary-propagations     16
;  :conflicts               611
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2738
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              928
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            278982)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          268
;  :arith-assert-diseq      84
;  :arith-assert-lower      335
;  :arith-assert-upper      420
;  :arith-conflicts         200
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         258
;  :arith-offset-eqs        1
;  :arith-pivots            378
;  :binary-propagations     16
;  :conflicts               612
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2739
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              929
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            279194)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          268
;  :arith-assert-diseq      84
;  :arith-assert-lower      335
;  :arith-assert-upper      420
;  :arith-conflicts         200
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         258
;  :arith-offset-eqs        1
;  :arith-pivots            378
;  :binary-propagations     16
;  :conflicts               613
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2740
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              930
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            279274)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          270
;  :arith-assert-diseq      84
;  :arith-assert-lower      335
;  :arith-assert-upper      421
;  :arith-conflicts         201
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        1
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               614
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2741
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              931
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            279479)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          270
;  :arith-assert-diseq      84
;  :arith-assert-lower      335
;  :arith-assert-upper      421
;  :arith-conflicts         201
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        1
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               615
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2742
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              932
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            279559)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          272
;  :arith-assert-diseq      84
;  :arith-assert-lower      335
;  :arith-assert-upper      422
;  :arith-conflicts         202
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         260
;  :arith-offset-eqs        1
;  :arith-pivots            382
;  :binary-propagations     16
;  :conflicts               616
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2743
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              933
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            279771)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          272
;  :arith-assert-diseq      84
;  :arith-assert-lower      335
;  :arith-assert-upper      422
;  :arith-conflicts         202
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         260
;  :arith-offset-eqs        1
;  :arith-pivots            382
;  :binary-propagations     16
;  :conflicts               617
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2744
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              934
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            279851)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          274
;  :arith-assert-diseq      84
;  :arith-assert-lower      335
;  :arith-assert-upper      423
;  :arith-conflicts         203
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         261
;  :arith-offset-eqs        1
;  :arith-pivots            383
;  :binary-propagations     16
;  :conflicts               618
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2745
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              935
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            280056)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          274
;  :arith-assert-diseq      84
;  :arith-assert-lower      335
;  :arith-assert-upper      423
;  :arith-conflicts         203
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         261
;  :arith-offset-eqs        1
;  :arith-pivots            383
;  :binary-propagations     16
;  :conflicts               619
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2746
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              936
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            280136)
; [eval] (forall i__20: Int :: { diz.ALU_m.Main_process_state[i__20] } 0 <= i__20 && i__20 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__20] == -1 || 0 <= diz.ALU_m.Main_process_state[i__20] && diz.ALU_m.Main_process_state[i__20] < |diz.ALU_m.Main_event_state|)
(declare-const i__20@105@03 Int)
(push) ; 8
; [eval] 0 <= i__20 && i__20 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__20] == -1 || 0 <= diz.ALU_m.Main_process_state[i__20] && diz.ALU_m.Main_process_state[i__20] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__20 && i__20 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__20
(push) ; 9
; [then-branch: 41 | 0 <= i__20@105@03 | live]
; [else-branch: 41 | !(0 <= i__20@105@03) | live]
(push) ; 10
; [then-branch: 41 | 0 <= i__20@105@03]
(assert (<= 0 i__20@105@03))
; [eval] i__20 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          276
;  :arith-assert-diseq      84
;  :arith-assert-lower      336
;  :arith-assert-upper      424
;  :arith-conflicts         204
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        1
;  :arith-pivots            386
;  :binary-propagations     16
;  :conflicts               620
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2748
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              937
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            280400)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5913
;  :arith-add-rows          276
;  :arith-assert-diseq      84
;  :arith-assert-lower      336
;  :arith-assert-upper      424
;  :arith-conflicts         204
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        1
;  :arith-pivots            386
;  :binary-propagations     16
;  :conflicts               621
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2749
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              938
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            280480)
(pop) ; 10
(push) ; 10
; [else-branch: 41 | !(0 <= i__20@105@03)]
(assert (not (<= 0 i__20@105@03)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 42 | i__20@105@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__20@105@03 | live]
; [else-branch: 42 | !(i__20@105@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__20@105@03) | live]
(push) ; 10
; [then-branch: 42 | i__20@105@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__20@105@03]
(assert (and
  (<
    i__20@105@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
  (<= 0 i__20@105@03)))
; [eval] diz.ALU_m.Main_process_state[i__20] == -1 || 0 <= diz.ALU_m.Main_process_state[i__20] && diz.ALU_m.Main_process_state[i__20] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__20] == -1
; [eval] diz.ALU_m.Main_process_state[i__20]
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5914
;  :arith-add-rows          278
;  :arith-assert-diseq      84
;  :arith-assert-lower      337
;  :arith-assert-upper      426
;  :arith-conflicts         205
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        1
;  :arith-pivots            387
;  :binary-propagations     16
;  :conflicts               622
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2752
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              939
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            280798)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5914
;  :arith-add-rows          278
;  :arith-assert-diseq      84
;  :arith-assert-lower      337
;  :arith-assert-upper      426
;  :arith-conflicts         205
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        1
;  :arith-pivots            387
;  :binary-propagations     16
;  :conflicts               623
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2753
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              940
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            280878)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__20@105@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5914
;  :arith-add-rows          278
;  :arith-assert-diseq      84
;  :arith-assert-lower      337
;  :arith-assert-upper      426
;  :arith-conflicts         205
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        1
;  :arith-pivots            387
;  :binary-propagations     16
;  :conflicts               623
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2753
;  :mk-clause               369
;  :num-allocs              5515453
;  :num-checks              941
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            280887)
; [eval] -1
(push) ; 11
; [then-branch: 43 | First:(Second:(Second:(Second:($t@62@03))))[i__20@105@03] == -1 | live]
; [else-branch: 43 | First:(Second:(Second:(Second:($t@62@03))))[i__20@105@03] != -1 | live]
(push) ; 12
; [then-branch: 43 | First:(Second:(Second:(Second:($t@62@03))))[i__20@105@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__20@105@03)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 43 | First:(Second:(Second:(Second:($t@62@03))))[i__20@105@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__20@105@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__20] && diz.ALU_m.Main_process_state[i__20] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__20]
; [eval] diz.ALU_m.Main_process_state[i__20]
(set-option :timeout 10)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5916
;  :arith-add-rows          280
;  :arith-assert-diseq      86
;  :arith-assert-lower      340
;  :arith-assert-upper      428
;  :arith-conflicts         206
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        1
;  :arith-pivots            390
;  :binary-propagations     16
;  :conflicts               624
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2761
;  :mk-clause               381
;  :num-allocs              5515453
;  :num-checks              942
;  :propagations            198
;  :quant-instantiations    69
;  :rlimit-count            281306)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5916
;  :arith-add-rows          280
;  :arith-assert-diseq      86
;  :arith-assert-lower      340
;  :arith-assert-upper      428
;  :arith-conflicts         206
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        1
;  :arith-pivots            390
;  :binary-propagations     16
;  :conflicts               625
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2762
;  :mk-clause               381
;  :num-allocs              5515453
;  :num-checks              943
;  :propagations            198
;  :quant-instantiations    69
;  :rlimit-count            281386)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__20@105@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5916
;  :arith-add-rows          280
;  :arith-assert-diseq      86
;  :arith-assert-lower      340
;  :arith-assert-upper      428
;  :arith-conflicts         206
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        1
;  :arith-pivots            390
;  :binary-propagations     16
;  :conflicts               625
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2762
;  :mk-clause               381
;  :num-allocs              5515453
;  :num-checks              944
;  :propagations            198
;  :quant-instantiations    69
;  :rlimit-count            281395)
(push) ; 13
; [then-branch: 44 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__20@105@03] | live]
; [else-branch: 44 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__20@105@03]) | live]
(push) ; 14
; [then-branch: 44 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__20@105@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__20@105@03)))
; [eval] diz.ALU_m.Main_process_state[i__20] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__20]
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          282
;  :arith-assert-diseq      86
;  :arith-assert-lower      342
;  :arith-assert-upper      430
;  :arith-conflicts         207
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        1
;  :arith-pivots            392
;  :binary-propagations     16
;  :conflicts               626
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2767
;  :mk-clause               381
;  :num-allocs              5515453
;  :num-checks              945
;  :propagations            198
;  :quant-instantiations    69
;  :rlimit-count            281728)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          282
;  :arith-assert-diseq      86
;  :arith-assert-lower      342
;  :arith-assert-upper      430
;  :arith-conflicts         207
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        1
;  :arith-pivots            392
;  :binary-propagations     16
;  :conflicts               627
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2768
;  :mk-clause               381
;  :num-allocs              5515453
;  :num-checks              946
;  :propagations            198
;  :quant-instantiations    69
;  :rlimit-count            281808)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i__20@105@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          282
;  :arith-assert-diseq      86
;  :arith-assert-lower      342
;  :arith-assert-upper      430
;  :arith-conflicts         207
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        1
;  :arith-pivots            392
;  :binary-propagations     16
;  :conflicts               627
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2768
;  :mk-clause               381
;  :num-allocs              5515453
;  :num-checks              947
;  :propagations            198
;  :quant-instantiations    69
;  :rlimit-count            281817)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          284
;  :arith-assert-diseq      86
;  :arith-assert-lower      342
;  :arith-assert-upper      431
;  :arith-conflicts         208
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        1
;  :arith-pivots            395
;  :binary-propagations     16
;  :conflicts               628
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2769
;  :mk-clause               381
;  :num-allocs              5515453
;  :num-checks              948
;  :propagations            198
;  :quant-instantiations    69
;  :rlimit-count            282029)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          284
;  :arith-assert-diseq      86
;  :arith-assert-lower      342
;  :arith-assert-upper      431
;  :arith-conflicts         208
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        1
;  :arith-pivots            395
;  :binary-propagations     16
;  :conflicts               629
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              346
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2770
;  :mk-clause               381
;  :num-allocs              5515453
;  :num-checks              949
;  :propagations            198
;  :quant-instantiations    69
;  :rlimit-count            282109)
(pop) ; 14
(push) ; 14
; [else-branch: 44 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__20@105@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__20@105@03))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 42 | !(i__20@105@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__20@105@03)]
(assert (not
  (and
    (<
      i__20@105@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
    (<= 0 i__20@105@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 8
(assert (not (forall ((i__20@105@03 Int)) (!
  (implies
    (and
      (<
        i__20@105@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__20@105@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__20@105@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__20@105@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__20@105@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__20@105@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          284
;  :arith-assert-diseq      87
;  :arith-assert-lower      343
;  :arith-assert-upper      432
;  :arith-conflicts         208
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         269
;  :arith-offset-eqs        1
;  :arith-pivots            396
;  :binary-propagations     16
;  :conflicts               630
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2778
;  :mk-clause               393
;  :num-allocs              5515453
;  :num-checks              950
;  :propagations            200
;  :quant-instantiations    70
;  :rlimit-count            282558)
(assert (forall ((i__20@105@03 Int)) (!
  (implies
    (and
      (<
        i__20@105@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__20@105@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__20@105@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__20@105@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__20@105@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__20@105@03))
  :qid |prog.l<no position>|)))
(declare-const $k@106@03 $Perm)
(assert ($Perm.isReadVar $k@106@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          286
;  :arith-assert-diseq      88
;  :arith-assert-lower      345
;  :arith-assert-upper      434
;  :arith-conflicts         209
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         270
;  :arith-offset-eqs        1
;  :arith-pivots            397
;  :binary-propagations     16
;  :conflicts               631
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2784
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              951
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            283273)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@106@03 $Perm.No) (< $Perm.No $k@106@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          286
;  :arith-assert-diseq      88
;  :arith-assert-lower      345
;  :arith-assert-upper      434
;  :arith-conflicts         209
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         270
;  :arith-offset-eqs        1
;  :arith-pivots            397
;  :binary-propagations     16
;  :conflicts               632
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2784
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              952
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            283323)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          286
;  :arith-assert-diseq      88
;  :arith-assert-lower      345
;  :arith-assert-upper      434
;  :arith-conflicts         209
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         270
;  :arith-offset-eqs        1
;  :arith-pivots            397
;  :binary-propagations     16
;  :conflicts               632
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2784
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              953
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            283334)
(push) ; 8
(assert (not (not
  (=
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          286
;  :arith-assert-diseq      88
;  :arith-assert-lower      345
;  :arith-assert-upper      434
;  :arith-conflicts         209
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         270
;  :arith-offset-eqs        1
;  :arith-pivots            397
;  :binary-propagations     16
;  :conflicts               633
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2785
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              954
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            283452)
(assert (<
  $k@106@03
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03)))
(assert (<=
  $Perm.No
  (-
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $k@106@03)))
(assert (<=
  (-
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $k@106@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@106@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          291
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      436
;  :arith-conflicts         210
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        1
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               634
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2789
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              955
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            283904)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          291
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      436
;  :arith-conflicts         210
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        1
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               634
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2789
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              956
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            283915)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          291
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      436
;  :arith-conflicts         210
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        1
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               634
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2789
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              957
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            283956)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          293
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      437
;  :arith-conflicts         211
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         272
;  :arith-offset-eqs        1
;  :arith-pivots            402
;  :binary-propagations     16
;  :conflicts               635
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2790
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              958
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284161)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          293
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      437
;  :arith-conflicts         211
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         272
;  :arith-offset-eqs        1
;  :arith-pivots            402
;  :binary-propagations     16
;  :conflicts               635
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2790
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              959
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284172)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          293
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      437
;  :arith-conflicts         211
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         272
;  :arith-offset-eqs        1
;  :arith-pivots            402
;  :binary-propagations     16
;  :conflicts               635
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2790
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              960
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284213)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          293
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      437
;  :arith-conflicts         211
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         272
;  :arith-offset-eqs        1
;  :arith-pivots            402
;  :binary-propagations     16
;  :conflicts               635
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2790
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              961
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284224)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          295
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      438
;  :arith-conflicts         212
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        1
;  :arith-pivots            405
;  :binary-propagations     16
;  :conflicts               636
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2791
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              962
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284436)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          295
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      438
;  :arith-conflicts         212
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        1
;  :arith-pivots            405
;  :binary-propagations     16
;  :conflicts               636
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2791
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              963
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284447)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          295
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      438
;  :arith-conflicts         212
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        1
;  :arith-pivots            405
;  :binary-propagations     16
;  :conflicts               636
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2791
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              964
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284488)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          295
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      438
;  :arith-conflicts         212
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        1
;  :arith-pivots            405
;  :binary-propagations     16
;  :conflicts               636
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2791
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              965
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284499)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          297
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      439
;  :arith-conflicts         213
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         274
;  :arith-offset-eqs        1
;  :arith-pivots            406
;  :binary-propagations     16
;  :conflicts               637
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2792
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              966
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284704)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          297
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      439
;  :arith-conflicts         213
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         274
;  :arith-offset-eqs        1
;  :arith-pivots            406
;  :binary-propagations     16
;  :conflicts               637
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2792
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              967
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284715)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          297
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      439
;  :arith-conflicts         213
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         274
;  :arith-offset-eqs        1
;  :arith-pivots            406
;  :binary-propagations     16
;  :conflicts               637
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2792
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              968
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284756)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          297
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      439
;  :arith-conflicts         213
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         274
;  :arith-offset-eqs        1
;  :arith-pivots            406
;  :binary-propagations     16
;  :conflicts               637
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2792
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              969
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284767)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          299
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      440
;  :arith-conflicts         214
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        1
;  :arith-pivots            409
;  :binary-propagations     16
;  :conflicts               638
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2793
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              970
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284979)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          299
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      440
;  :arith-conflicts         214
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        1
;  :arith-pivots            409
;  :binary-propagations     16
;  :conflicts               638
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2793
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              971
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            284990)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          299
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      440
;  :arith-conflicts         214
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        1
;  :arith-pivots            409
;  :binary-propagations     16
;  :conflicts               638
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2793
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              972
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285031)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          299
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      440
;  :arith-conflicts         214
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        1
;  :arith-pivots            409
;  :binary-propagations     16
;  :conflicts               638
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2793
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              973
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285042)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          301
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      441
;  :arith-conflicts         215
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         276
;  :arith-offset-eqs        1
;  :arith-pivots            410
;  :binary-propagations     16
;  :conflicts               639
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2794
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              974
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285247)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          301
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      441
;  :arith-conflicts         215
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         276
;  :arith-offset-eqs        1
;  :arith-pivots            410
;  :binary-propagations     16
;  :conflicts               639
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2794
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              975
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285258)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          301
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      441
;  :arith-conflicts         215
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         276
;  :arith-offset-eqs        1
;  :arith-pivots            410
;  :binary-propagations     16
;  :conflicts               639
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2794
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              976
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285299)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          301
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      441
;  :arith-conflicts         215
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         276
;  :arith-offset-eqs        1
;  :arith-pivots            410
;  :binary-propagations     16
;  :conflicts               639
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2794
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              977
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285310)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          303
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      442
;  :arith-conflicts         216
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        1
;  :arith-pivots            413
;  :binary-propagations     16
;  :conflicts               640
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2795
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              978
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285522)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          303
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      442
;  :arith-conflicts         216
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        1
;  :arith-pivots            413
;  :binary-propagations     16
;  :conflicts               640
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2795
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              979
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285533)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          303
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      442
;  :arith-conflicts         216
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        1
;  :arith-pivots            413
;  :binary-propagations     16
;  :conflicts               640
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2795
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              980
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285574)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          303
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      442
;  :arith-conflicts         216
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        1
;  :arith-pivots            413
;  :binary-propagations     16
;  :conflicts               640
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2795
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              981
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285585)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          305
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      443
;  :arith-conflicts         217
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         278
;  :arith-offset-eqs        1
;  :arith-pivots            414
;  :binary-propagations     16
;  :conflicts               641
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2796
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              982
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285790)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          305
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      443
;  :arith-conflicts         217
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         278
;  :arith-offset-eqs        1
;  :arith-pivots            414
;  :binary-propagations     16
;  :conflicts               641
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2796
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              983
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285801)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          305
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      443
;  :arith-conflicts         217
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         278
;  :arith-offset-eqs        1
;  :arith-pivots            414
;  :binary-propagations     16
;  :conflicts               641
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2796
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              984
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285842)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          305
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      443
;  :arith-conflicts         217
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         278
;  :arith-offset-eqs        1
;  :arith-pivots            414
;  :binary-propagations     16
;  :conflicts               641
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2796
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              985
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            285853)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          307
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      444
;  :arith-conflicts         218
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         279
;  :arith-offset-eqs        1
;  :arith-pivots            417
;  :binary-propagations     16
;  :conflicts               642
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2797
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              986
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            286065)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          307
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      444
;  :arith-conflicts         218
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         279
;  :arith-offset-eqs        1
;  :arith-pivots            417
;  :binary-propagations     16
;  :conflicts               642
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2797
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              987
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            286076)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          307
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      444
;  :arith-conflicts         218
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         279
;  :arith-offset-eqs        1
;  :arith-pivots            417
;  :binary-propagations     16
;  :conflicts               642
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2797
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              988
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            286117)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          307
;  :arith-assert-diseq      88
;  :arith-assert-lower      347
;  :arith-assert-upper      444
;  :arith-conflicts         218
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         279
;  :arith-offset-eqs        1
;  :arith-pivots            417
;  :binary-propagations     16
;  :conflicts               642
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2797
;  :mk-clause               395
;  :num-allocs              5515453
;  :num-checks              989
;  :propagations            201
;  :quant-instantiations    70
;  :rlimit-count            286128)
(declare-const $k@107@03 $Perm)
(assert ($Perm.isReadVar $k@107@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          309
;  :arith-assert-diseq      89
;  :arith-assert-lower      349
;  :arith-assert-upper      446
;  :arith-conflicts         219
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        1
;  :arith-pivots            418
;  :binary-propagations     16
;  :conflicts               643
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2802
;  :mk-clause               397
;  :num-allocs              5515453
;  :num-checks              990
;  :propagations            202
;  :quant-instantiations    70
;  :rlimit-count            286482)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@107@03 $Perm.No) (< $Perm.No $k@107@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          309
;  :arith-assert-diseq      89
;  :arith-assert-lower      349
;  :arith-assert-upper      446
;  :arith-conflicts         219
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        1
;  :arith-pivots            418
;  :binary-propagations     16
;  :conflicts               644
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2802
;  :mk-clause               397
;  :num-allocs              5515453
;  :num-checks              991
;  :propagations            202
;  :quant-instantiations    70
;  :rlimit-count            286532)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          309
;  :arith-assert-diseq      89
;  :arith-assert-lower      349
;  :arith-assert-upper      446
;  :arith-conflicts         219
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        1
;  :arith-pivots            418
;  :binary-propagations     16
;  :conflicts               644
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2802
;  :mk-clause               397
;  :num-allocs              5515453
;  :num-checks              992
;  :propagations            202
;  :quant-instantiations    70
;  :rlimit-count            286543)
(push) ; 8
(assert (not (not (= (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          309
;  :arith-assert-diseq      89
;  :arith-assert-lower      349
;  :arith-assert-upper      446
;  :arith-conflicts         219
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        1
;  :arith-pivots            418
;  :binary-propagations     16
;  :conflicts               645
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2803
;  :mk-clause               397
;  :num-allocs              5515453
;  :num-checks              993
;  :propagations            202
;  :quant-instantiations    70
;  :rlimit-count            286635)
(assert (< $k@107@03 (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03)))
(assert (<= $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@107@03)))
(assert (<= (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@107@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@107@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          313
;  :arith-assert-diseq      89
;  :arith-assert-lower      351
;  :arith-assert-upper      448
;  :arith-conflicts         220
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         281
;  :arith-offset-eqs        1
;  :arith-pivots            421
;  :binary-propagations     16
;  :conflicts               646
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2807
;  :mk-clause               397
;  :num-allocs              5515453
;  :num-checks              994
;  :propagations            202
;  :quant-instantiations    70
;  :rlimit-count            287053)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          313
;  :arith-assert-diseq      89
;  :arith-assert-lower      351
;  :arith-assert-upper      448
;  :arith-conflicts         220
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         281
;  :arith-offset-eqs        1
;  :arith-pivots            421
;  :binary-propagations     16
;  :conflicts               646
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2807
;  :mk-clause               397
;  :num-allocs              5515453
;  :num-checks              995
;  :propagations            202
;  :quant-instantiations    70
;  :rlimit-count            287064)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          313
;  :arith-assert-diseq      89
;  :arith-assert-lower      351
;  :arith-assert-upper      448
;  :arith-conflicts         220
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         281
;  :arith-offset-eqs        1
;  :arith-pivots            421
;  :binary-propagations     16
;  :conflicts               646
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2807
;  :mk-clause               397
;  :num-allocs              5515453
;  :num-checks              996
;  :propagations            202
;  :quant-instantiations    70
;  :rlimit-count            287093)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          313
;  :arith-assert-diseq      89
;  :arith-assert-lower      351
;  :arith-assert-upper      448
;  :arith-conflicts         220
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         281
;  :arith-offset-eqs        1
;  :arith-pivots            421
;  :binary-propagations     16
;  :conflicts               646
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2807
;  :mk-clause               397
;  :num-allocs              5515453
;  :num-checks              997
;  :propagations            202
;  :quant-instantiations    70
;  :rlimit-count            287106)
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          315
;  :arith-assert-diseq      89
;  :arith-assert-lower      351
;  :arith-assert-upper      449
;  :arith-conflicts         221
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         282
;  :arith-offset-eqs        1
;  :arith-pivots            422
;  :binary-propagations     16
;  :conflicts               647
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2808
;  :mk-clause               397
;  :num-allocs              5515453
;  :num-checks              998
;  :propagations            202
;  :quant-instantiations    70
;  :rlimit-count            287311)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          315
;  :arith-assert-diseq      89
;  :arith-assert-lower      351
;  :arith-assert-upper      449
;  :arith-conflicts         221
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         282
;  :arith-offset-eqs        1
;  :arith-pivots            422
;  :binary-propagations     16
;  :conflicts               647
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2808
;  :mk-clause               397
;  :num-allocs              5515453
;  :num-checks              999
;  :propagations            202
;  :quant-instantiations    70
;  :rlimit-count            287322)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5918
;  :arith-add-rows          315
;  :arith-assert-diseq      89
;  :arith-assert-lower      351
;  :arith-assert-upper      449
;  :arith-conflicts         221
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         282
;  :arith-offset-eqs        1
;  :arith-pivots            422
;  :binary-propagations     16
;  :conflicts               647
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1498
;  :datatype-occurs-check   209
;  :datatype-splits         1074
;  :decisions               1424
;  :del-clause              370
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2808
;  :mk-clause               397
;  :num-allocs              5515453
;  :num-checks              1000
;  :propagations            202
;  :quant-instantiations    70
;  :rlimit-count            287351)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6218
;  :arith-add-rows          316
;  :arith-assert-diseq      89
;  :arith-assert-lower      359
;  :arith-assert-upper      453
;  :arith-conflicts         221
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         286
;  :arith-offset-eqs        1
;  :arith-pivots            428
;  :binary-propagations     16
;  :conflicts               648
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1590
;  :datatype-occurs-check   221
;  :datatype-splits         1146
;  :decisions               1513
;  :del-clause              378
;  :final-checks            85
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2897
;  :mk-clause               405
;  :num-allocs              5515453
;  :num-checks              1001
;  :propagations            209
;  :quant-instantiations    70
;  :rlimit-count            289579
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 8
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6606
;  :arith-add-rows          318
;  :arith-assert-diseq      89
;  :arith-assert-lower      367
;  :arith-assert-upper      457
;  :arith-conflicts         221
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         290
;  :arith-offset-eqs        1
;  :arith-pivots            436
;  :binary-propagations     16
;  :conflicts               648
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2987
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1004
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            292486)
(declare-const $t@108@03 $Ref)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6606
;  :arith-add-rows          318
;  :arith-assert-diseq      89
;  :arith-assert-lower      367
;  :arith-assert-upper      457
;  :arith-conflicts         221
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         290
;  :arith-offset-eqs        1
;  :arith-pivots            436
;  :binary-propagations     16
;  :conflicts               649
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2987
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1005
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            292558)
(declare-const $t@109@03 $Ref)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6606
;  :arith-add-rows          318
;  :arith-assert-diseq      89
;  :arith-assert-lower      367
;  :arith-assert-upper      457
;  :arith-conflicts         221
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         290
;  :arith-offset-eqs        1
;  :arith-pivots            436
;  :binary-propagations     16
;  :conflicts               650
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2987
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1006
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            292630)
(declare-const $t@110@03 $Ref)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6606
;  :arith-add-rows          318
;  :arith-assert-diseq      89
;  :arith-assert-lower      367
;  :arith-assert-upper      457
;  :arith-conflicts         221
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         290
;  :arith-offset-eqs        1
;  :arith-pivots            436
;  :binary-propagations     16
;  :conflicts               651
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             2988
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1007
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            292710)
(declare-const $t@111@03 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@104@03))
    (= $t@108@03 $t@84@03))
  (implies
    (< $Perm.No $k@68@03)
    (=
      $t@108@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@107@03))
    (= $t@109@03 $t@52@03))
  (implies
    (< $Perm.No $k@66@03)
    (=
      $t@109@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@106@03))
    (= $t@110@03 $t@58@03))
  (implies
    (< $Perm.No $k@65@03)
    (=
      $t@110@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@67@03)
    (=
      $t@111@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))
    (= $t@111@03 $t@54@03))))
(assert (<=
  $Perm.No
  (+
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@104@03)
    $k@68@03)))
(assert (<=
  (+
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@104@03)
    $k@68@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@104@03)
      $k@68@03))
  (not (= diz@6@03 $Ref.null))))
(assert (<=
  $Perm.No
  (+ (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@107@03) $k@66@03)))
(assert (<=
  (+ (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@107@03) $k@66@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+ (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@107@03) $k@66@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (<=
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@106@03)
    $k@65@03)))
(assert (<=
  (+
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@106@03)
    $k@65@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@106@03)
      $k@65@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (<= $Perm.No (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(assert (<= (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          328
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      461
;  :arith-conflicts         221
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         290
;  :arith-offset-eqs        1
;  :arith-pivots            437
;  :binary-propagations     16
;  :conflicts               652
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3003
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1008
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            294340)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          330
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      462
;  :arith-conflicts         222
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         291
;  :arith-offset-eqs        1
;  :arith-pivots            440
;  :binary-propagations     16
;  :conflicts               653
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3004
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1009
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            294553)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          330
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      462
;  :arith-conflicts         222
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         291
;  :arith-offset-eqs        1
;  :arith-pivots            440
;  :binary-propagations     16
;  :conflicts               653
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3004
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1010
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            294564)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          330
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      462
;  :arith-conflicts         222
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         291
;  :arith-offset-eqs        1
;  :arith-pivots            440
;  :binary-propagations     16
;  :conflicts               653
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3004
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1011
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            294593)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          330
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      462
;  :arith-conflicts         222
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         291
;  :arith-offset-eqs        1
;  :arith-pivots            440
;  :binary-propagations     16
;  :conflicts               654
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3005
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1012
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            294853)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          332
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      463
;  :arith-conflicts         223
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        1
;  :arith-pivots            441
;  :binary-propagations     16
;  :conflicts               655
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3006
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1013
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            295059)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          332
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      463
;  :arith-conflicts         223
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        1
;  :arith-pivots            441
;  :binary-propagations     16
;  :conflicts               655
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3006
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1014
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            295070)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          332
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      463
;  :arith-conflicts         223
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        1
;  :arith-pivots            441
;  :binary-propagations     16
;  :conflicts               655
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3006
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1015
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            295099)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          332
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      463
;  :arith-conflicts         223
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        1
;  :arith-pivots            441
;  :binary-propagations     16
;  :conflicts               656
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3007
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1016
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            295359)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          334
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      464
;  :arith-conflicts         224
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         293
;  :arith-offset-eqs        1
;  :arith-pivots            444
;  :binary-propagations     16
;  :conflicts               657
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3008
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1017
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            295572)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          334
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      464
;  :arith-conflicts         224
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         293
;  :arith-offset-eqs        1
;  :arith-pivots            444
;  :binary-propagations     16
;  :conflicts               657
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3008
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1018
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            295583)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          334
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      464
;  :arith-conflicts         224
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         293
;  :arith-offset-eqs        1
;  :arith-pivots            444
;  :binary-propagations     16
;  :conflicts               657
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3008
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1019
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            295612)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          334
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      464
;  :arith-conflicts         224
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         293
;  :arith-offset-eqs        1
;  :arith-pivots            444
;  :binary-propagations     16
;  :conflicts               658
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3009
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1020
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            295872)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          336
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      465
;  :arith-conflicts         225
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         294
;  :arith-offset-eqs        1
;  :arith-pivots            445
;  :binary-propagations     16
;  :conflicts               659
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3010
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1021
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            296078)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          336
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      465
;  :arith-conflicts         225
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         294
;  :arith-offset-eqs        1
;  :arith-pivots            445
;  :binary-propagations     16
;  :conflicts               659
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3010
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1022
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            296089)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          336
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      465
;  :arith-conflicts         225
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         294
;  :arith-offset-eqs        1
;  :arith-pivots            445
;  :binary-propagations     16
;  :conflicts               659
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3010
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1023
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            296118)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          336
;  :arith-assert-diseq      89
;  :arith-assert-lower      371
;  :arith-assert-upper      465
;  :arith-conflicts         225
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         294
;  :arith-offset-eqs        1
;  :arith-pivots            445
;  :binary-propagations     16
;  :conflicts               660
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3011
;  :mk-clause               409
;  :num-allocs              5515453
;  :num-checks              1024
;  :propagations            217
;  :quant-instantiations    70
;  :rlimit-count            296378)
(declare-const $k@112@03 $Perm)
(assert ($Perm.isReadVar $k@112@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          338
;  :arith-assert-diseq      90
;  :arith-assert-lower      373
;  :arith-assert-upper      467
;  :arith-conflicts         226
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        1
;  :arith-pivots            448
;  :binary-propagations     16
;  :conflicts               661
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3016
;  :mk-clause               411
;  :num-allocs              5515453
;  :num-checks              1025
;  :propagations            218
;  :quant-instantiations    70
;  :rlimit-count            296739)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@112@03 $Perm.No) (< $Perm.No $k@112@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          338
;  :arith-assert-diseq      90
;  :arith-assert-lower      373
;  :arith-assert-upper      467
;  :arith-conflicts         226
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        1
;  :arith-pivots            448
;  :binary-propagations     16
;  :conflicts               662
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3016
;  :mk-clause               411
;  :num-allocs              5515453
;  :num-checks              1026
;  :propagations            218
;  :quant-instantiations    70
;  :rlimit-count            296789)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6616
;  :arith-add-rows          338
;  :arith-assert-diseq      90
;  :arith-assert-lower      373
;  :arith-assert-upper      467
;  :arith-conflicts         226
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        1
;  :arith-pivots            448
;  :binary-propagations     16
;  :conflicts               663
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              393
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3017
;  :mk-clause               411
;  :num-allocs              5515453
;  :num-checks              1027
;  :propagations            218
;  :quant-instantiations    70
;  :rlimit-count            296869)
(push) ; 8
(assert (not (not (= (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          341
;  :arith-assert-diseq      90
;  :arith-assert-lower      373
;  :arith-assert-upper      468
;  :arith-conflicts         227
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        1
;  :arith-pivots            451
;  :binary-propagations     16
;  :conflicts               664
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3019
;  :mk-clause               413
;  :num-allocs              5515453
;  :num-checks              1028
;  :propagations            219
;  :quant-instantiations    70
;  :rlimit-count            297045)
(assert (< $k@112@03 (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(assert (<=
  $Perm.No
  (- (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $k@112@03)))
(assert (<=
  (- (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $k@112@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $k@112@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          344
;  :arith-assert-diseq      90
;  :arith-assert-lower      375
;  :arith-assert-upper      470
;  :arith-conflicts         228
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         296
;  :arith-offset-eqs        1
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               665
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3023
;  :mk-clause               413
;  :num-allocs              5515453
;  :num-checks              1029
;  :propagations            219
;  :quant-instantiations    70
;  :rlimit-count            297460)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          344
;  :arith-assert-diseq      90
;  :arith-assert-lower      375
;  :arith-assert-upper      470
;  :arith-conflicts         228
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         296
;  :arith-offset-eqs        1
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               665
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3023
;  :mk-clause               413
;  :num-allocs              5515453
;  :num-checks              1030
;  :propagations            219
;  :quant-instantiations    70
;  :rlimit-count            297471)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          344
;  :arith-assert-diseq      90
;  :arith-assert-lower      375
;  :arith-assert-upper      470
;  :arith-conflicts         228
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         296
;  :arith-offset-eqs        1
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               665
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3023
;  :mk-clause               413
;  :num-allocs              5515453
;  :num-checks              1031
;  :propagations            219
;  :quant-instantiations    70
;  :rlimit-count            297500)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          344
;  :arith-assert-diseq      90
;  :arith-assert-lower      375
;  :arith-assert-upper      470
;  :arith-conflicts         228
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         296
;  :arith-offset-eqs        1
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               665
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3023
;  :mk-clause               413
;  :num-allocs              5515453
;  :num-checks              1032
;  :propagations            219
;  :quant-instantiations    70
;  :rlimit-count            297513)
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          346
;  :arith-assert-diseq      90
;  :arith-assert-lower      375
;  :arith-assert-upper      471
;  :arith-conflicts         229
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         297
;  :arith-offset-eqs        1
;  :arith-pivots            455
;  :binary-propagations     16
;  :conflicts               666
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3024
;  :mk-clause               413
;  :num-allocs              5515453
;  :num-checks              1033
;  :propagations            219
;  :quant-instantiations    70
;  :rlimit-count            297726)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          346
;  :arith-assert-diseq      90
;  :arith-assert-lower      375
;  :arith-assert-upper      471
;  :arith-conflicts         229
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         297
;  :arith-offset-eqs        1
;  :arith-pivots            455
;  :binary-propagations     16
;  :conflicts               666
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3024
;  :mk-clause               413
;  :num-allocs              5515453
;  :num-checks              1034
;  :propagations            219
;  :quant-instantiations    70
;  :rlimit-count            297737)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          346
;  :arith-assert-diseq      90
;  :arith-assert-lower      375
;  :arith-assert-upper      471
;  :arith-conflicts         229
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         297
;  :arith-offset-eqs        1
;  :arith-pivots            455
;  :binary-propagations     16
;  :conflicts               666
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3024
;  :mk-clause               413
;  :num-allocs              5515453
;  :num-checks              1035
;  :propagations            219
;  :quant-instantiations    70
;  :rlimit-count            297766)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
  $t@54@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          346
;  :arith-assert-diseq      90
;  :arith-assert-lower      375
;  :arith-assert-upper      471
;  :arith-conflicts         229
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         297
;  :arith-offset-eqs        1
;  :arith-pivots            455
;  :binary-propagations     16
;  :conflicts               667
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3025
;  :mk-clause               413
;  :num-allocs              5515453
;  :num-checks              1036
;  :propagations            219
;  :quant-instantiations    70
;  :rlimit-count            298096)
(declare-const $k@113@03 $Perm)
(assert ($Perm.isReadVar $k@113@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          348
;  :arith-assert-diseq      91
;  :arith-assert-lower      377
;  :arith-assert-upper      473
;  :arith-conflicts         230
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         298
;  :arith-offset-eqs        1
;  :arith-pivots            456
;  :binary-propagations     16
;  :conflicts               668
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3030
;  :mk-clause               415
;  :num-allocs              5515453
;  :num-checks              1037
;  :propagations            220
;  :quant-instantiations    70
;  :rlimit-count            298450)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          348
;  :arith-assert-diseq      91
;  :arith-assert-lower      377
;  :arith-assert-upper      473
;  :arith-conflicts         230
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         298
;  :arith-offset-eqs        1
;  :arith-pivots            456
;  :binary-propagations     16
;  :conflicts               668
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3030
;  :mk-clause               415
;  :num-allocs              5515453
;  :num-checks              1038
;  :propagations            220
;  :quant-instantiations    70
;  :rlimit-count            298461)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          348
;  :arith-assert-diseq      91
;  :arith-assert-lower      377
;  :arith-assert-upper      473
;  :arith-conflicts         230
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         298
;  :arith-offset-eqs        1
;  :arith-pivots            456
;  :binary-propagations     16
;  :conflicts               668
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3030
;  :mk-clause               415
;  :num-allocs              5515453
;  :num-checks              1039
;  :propagations            220
;  :quant-instantiations    70
;  :rlimit-count            298502)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@113@03 $Perm.No) (< $Perm.No $k@113@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          348
;  :arith-assert-diseq      91
;  :arith-assert-lower      377
;  :arith-assert-upper      473
;  :arith-conflicts         230
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         298
;  :arith-offset-eqs        1
;  :arith-pivots            456
;  :binary-propagations     16
;  :conflicts               669
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3030
;  :mk-clause               415
;  :num-allocs              5515453
;  :num-checks              1040
;  :propagations            220
;  :quant-instantiations    70
;  :rlimit-count            298552)
(set-option :timeout 10)
(push) ; 8
(assert (not (= diz@6@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6617
;  :arith-add-rows          348
;  :arith-assert-diseq      91
;  :arith-assert-lower      377
;  :arith-assert-upper      473
;  :arith-conflicts         230
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         298
;  :arith-offset-eqs        1
;  :arith-pivots            456
;  :binary-propagations     16
;  :conflicts               669
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              395
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3030
;  :mk-clause               415
;  :num-allocs              5515453
;  :num-checks              1041
;  :propagations            220
;  :quant-instantiations    70
;  :rlimit-count            298563)
(push) ; 8
(assert (not (not
  (=
    (+
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@104@03)
      $k@68@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6618
;  :arith-add-rows          353
;  :arith-assert-diseq      91
;  :arith-assert-lower      377
;  :arith-assert-upper      474
;  :arith-conflicts         231
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         298
;  :arith-offset-eqs        1
;  :arith-pivots            458
;  :binary-propagations     16
;  :conflicts               670
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              397
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3032
;  :mk-clause               417
;  :num-allocs              5515453
;  :num-checks              1042
;  :propagations            221
;  :quant-instantiations    70
;  :rlimit-count            298854)
(assert (<
  $k@113@03
  (+
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@104@03)
    $k@68@03)))
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@104@03)
      $k@68@03)
    $k@113@03)))
(assert (<=
  (-
    (+
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@104@03)
      $k@68@03)
    $k@113@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
            (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
          $k@104@03)
        $k@68@03)
      $k@113@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6618
;  :arith-add-rows          363
;  :arith-assert-diseq      91
;  :arith-assert-lower      379
;  :arith-assert-upper      476
;  :arith-conflicts         232
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         299
;  :arith-offset-eqs        1
;  :arith-pivots            462
;  :binary-propagations     16
;  :conflicts               671
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              397
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3036
;  :mk-clause               417
;  :num-allocs              5515453
;  :num-checks              1043
;  :propagations            221
;  :quant-instantiations    70
;  :rlimit-count            299437)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6618
;  :arith-add-rows          363
;  :arith-assert-diseq      91
;  :arith-assert-lower      379
;  :arith-assert-upper      476
;  :arith-conflicts         232
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         299
;  :arith-offset-eqs        1
;  :arith-pivots            462
;  :binary-propagations     16
;  :conflicts               671
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              397
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3036
;  :mk-clause               417
;  :num-allocs              5515453
;  :num-checks              1044
;  :propagations            221
;  :quant-instantiations    70
;  :rlimit-count            299448)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6618
;  :arith-add-rows          363
;  :arith-assert-diseq      91
;  :arith-assert-lower      379
;  :arith-assert-upper      476
;  :arith-conflicts         232
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         299
;  :arith-offset-eqs        1
;  :arith-pivots            462
;  :binary-propagations     16
;  :conflicts               671
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              397
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3036
;  :mk-clause               417
;  :num-allocs              5515453
;  :num-checks              1045
;  :propagations            221
;  :quant-instantiations    70
;  :rlimit-count            299489)
(push) ; 8
(assert (not (= diz@6@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6618
;  :arith-add-rows          363
;  :arith-assert-diseq      91
;  :arith-assert-lower      379
;  :arith-assert-upper      476
;  :arith-conflicts         232
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         299
;  :arith-offset-eqs        1
;  :arith-pivots            462
;  :binary-propagations     16
;  :conflicts               671
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              397
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3036
;  :mk-clause               417
;  :num-allocs              5515453
;  :num-checks              1046
;  :propagations            221
;  :quant-instantiations    70
;  :rlimit-count            299500)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6618
;  :arith-add-rows          365
;  :arith-assert-diseq      91
;  :arith-assert-lower      379
;  :arith-assert-upper      477
;  :arith-conflicts         233
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         300
;  :arith-offset-eqs        1
;  :arith-pivots            463
;  :binary-propagations     16
;  :conflicts               672
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              397
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3037
;  :mk-clause               417
;  :num-allocs              5515453
;  :num-checks              1047
;  :propagations            221
;  :quant-instantiations    70
;  :rlimit-count            299706)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6618
;  :arith-add-rows          367
;  :arith-assert-diseq      91
;  :arith-assert-lower      379
;  :arith-assert-upper      478
;  :arith-conflicts         234
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         301
;  :arith-offset-eqs        1
;  :arith-pivots            466
;  :binary-propagations     16
;  :conflicts               673
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              397
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3038
;  :mk-clause               417
;  :num-allocs              5515453
;  :num-checks              1048
;  :propagations            221
;  :quant-instantiations    70
;  :rlimit-count            299919)
(declare-const $k@114@03 $Perm)
(assert ($Perm.isReadVar $k@114@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6618
;  :arith-add-rows          369
;  :arith-assert-diseq      92
;  :arith-assert-lower      381
;  :arith-assert-upper      480
;  :arith-conflicts         235
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         302
;  :arith-offset-eqs        1
;  :arith-pivots            467
;  :binary-propagations     16
;  :conflicts               674
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              397
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3043
;  :mk-clause               419
;  :num-allocs              5515453
;  :num-checks              1049
;  :propagations            222
;  :quant-instantiations    70
;  :rlimit-count            300273)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@114@03 $Perm.No) (< $Perm.No $k@114@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6618
;  :arith-add-rows          369
;  :arith-assert-diseq      92
;  :arith-assert-lower      381
;  :arith-assert-upper      480
;  :arith-conflicts         235
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         302
;  :arith-offset-eqs        1
;  :arith-pivots            467
;  :binary-propagations     16
;  :conflicts               675
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              397
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3043
;  :mk-clause               419
;  :num-allocs              5515453
;  :num-checks              1050
;  :propagations            222
;  :quant-instantiations    70
;  :rlimit-count            300323)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6618
;  :arith-add-rows          369
;  :arith-assert-diseq      92
;  :arith-assert-lower      381
;  :arith-assert-upper      480
;  :arith-conflicts         235
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         302
;  :arith-offset-eqs        1
;  :arith-pivots            467
;  :binary-propagations     16
;  :conflicts               675
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              397
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3043
;  :mk-clause               419
;  :num-allocs              5515453
;  :num-checks              1051
;  :propagations            222
;  :quant-instantiations    70
;  :rlimit-count            300334)
(push) ; 8
(assert (not (not
  (=
    (+
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@106@03)
      $k@65@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6619
;  :arith-add-rows          369
;  :arith-assert-diseq      92
;  :arith-assert-lower      381
;  :arith-assert-upper      481
;  :arith-conflicts         236
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         302
;  :arith-offset-eqs        1
;  :arith-pivots            468
;  :binary-propagations     16
;  :conflicts               676
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              399
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3045
;  :mk-clause               421
;  :num-allocs              5515453
;  :num-checks              1052
;  :propagations            223
;  :quant-instantiations    70
;  :rlimit-count            300484)
(assert (<
  $k@114@03
  (+
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@106@03)
    $k@65@03)))
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@106@03)
      $k@65@03)
    $k@114@03)))
(assert (<=
  (-
    (+
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@106@03)
      $k@65@03)
    $k@114@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (-
            (+
              (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
              $k@57@03)
            $k@71@03)
          $k@106@03)
        $k@65@03)
      $k@114@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6619
;  :arith-add-rows          376
;  :arith-assert-diseq      92
;  :arith-assert-lower      383
;  :arith-assert-upper      483
;  :arith-conflicts         237
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         303
;  :arith-offset-eqs        1
;  :arith-pivots            472
;  :binary-propagations     16
;  :conflicts               677
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              399
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3049
;  :mk-clause               421
;  :num-allocs              5515453
;  :num-checks              1053
;  :propagations            223
;  :quant-instantiations    70
;  :rlimit-count            300960)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6619
;  :arith-add-rows          376
;  :arith-assert-diseq      92
;  :arith-assert-lower      383
;  :arith-assert-upper      483
;  :arith-conflicts         237
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         303
;  :arith-offset-eqs        1
;  :arith-pivots            472
;  :binary-propagations     16
;  :conflicts               677
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              399
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3049
;  :mk-clause               421
;  :num-allocs              5515453
;  :num-checks              1054
;  :propagations            223
;  :quant-instantiations    70
;  :rlimit-count            300971)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6619
;  :arith-add-rows          376
;  :arith-assert-diseq      92
;  :arith-assert-lower      383
;  :arith-assert-upper      483
;  :arith-conflicts         237
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         303
;  :arith-offset-eqs        1
;  :arith-pivots            472
;  :binary-propagations     16
;  :conflicts               677
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              399
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3049
;  :mk-clause               421
;  :num-allocs              5515453
;  :num-checks              1055
;  :propagations            223
;  :quant-instantiations    70
;  :rlimit-count            301012)
; [exec]
; label __return_set_bit
; [exec]
; sys__result := sys__local__result__12
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__22: Int :: { diz.ALU_m.Main_process_state[i__22] } 0 <= i__22 && i__22 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__22] == -1 || 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && 0 <= diz.ALU_m.Main_alu.ALU_RESULT && diz.ALU_m.Main_alu.ALU_RESULT <= 16 && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_init, 1 / 2) && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_mon.Monitor_init, 1 / 2) && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu == diz
(declare-const $k@115@03 $Perm)
(assert ($Perm.isReadVar $k@115@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@115@03 $Perm.No) (< $Perm.No $k@115@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6619
;  :arith-add-rows          376
;  :arith-assert-diseq      93
;  :arith-assert-lower      385
;  :arith-assert-upper      484
;  :arith-conflicts         237
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         303
;  :arith-offset-eqs        1
;  :arith-pivots            472
;  :binary-propagations     16
;  :conflicts               678
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              399
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3053
;  :mk-clause               423
;  :num-allocs              5515453
;  :num-checks              1056
;  :propagations            224
;  :quant-instantiations    70
;  :rlimit-count            301211)
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (=
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          378
;  :arith-assert-diseq      93
;  :arith-assert-lower      385
;  :arith-assert-upper      485
;  :arith-conflicts         238
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         303
;  :arith-offset-eqs        1
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               679
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3055
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1057
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            301417)
(assert (<
  $k@115@03
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))))
(assert (<=
  $Perm.No
  (-
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $k@115@03)))
(assert (<=
  (-
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $k@115@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@115@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          383
;  :arith-assert-diseq      93
;  :arith-assert-lower      387
;  :arith-assert-upper      487
;  :arith-conflicts         239
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         304
;  :arith-offset-eqs        1
;  :arith-pivots            476
;  :binary-propagations     16
;  :conflicts               680
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3059
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1058
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            301884)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          385
;  :arith-assert-diseq      93
;  :arith-assert-lower      387
;  :arith-assert-upper      488
;  :arith-conflicts         240
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         305
;  :arith-offset-eqs        1
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               681
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3060
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1059
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            302091)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          385
;  :arith-assert-diseq      93
;  :arith-assert-lower      387
;  :arith-assert-upper      488
;  :arith-conflicts         240
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         305
;  :arith-offset-eqs        1
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               682
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3061
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1060
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            302171)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          387
;  :arith-assert-diseq      93
;  :arith-assert-lower      387
;  :arith-assert-upper      489
;  :arith-conflicts         241
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         306
;  :arith-offset-eqs        1
;  :arith-pivots            480
;  :binary-propagations     16
;  :conflicts               683
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3062
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1061
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            302385)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          387
;  :arith-assert-diseq      93
;  :arith-assert-lower      387
;  :arith-assert-upper      489
;  :arith-conflicts         241
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         306
;  :arith-offset-eqs        1
;  :arith-pivots            480
;  :binary-propagations     16
;  :conflicts               684
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3063
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1062
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            302465)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          389
;  :arith-assert-diseq      93
;  :arith-assert-lower      387
;  :arith-assert-upper      490
;  :arith-conflicts         242
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         307
;  :arith-offset-eqs        1
;  :arith-pivots            481
;  :binary-propagations     16
;  :conflicts               685
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3064
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1063
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            302672)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          389
;  :arith-assert-diseq      93
;  :arith-assert-lower      387
;  :arith-assert-upper      490
;  :arith-conflicts         242
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         307
;  :arith-offset-eqs        1
;  :arith-pivots            481
;  :binary-propagations     16
;  :conflicts               686
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3065
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1064
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            302752)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          391
;  :arith-assert-diseq      93
;  :arith-assert-lower      387
;  :arith-assert-upper      491
;  :arith-conflicts         243
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         308
;  :arith-offset-eqs        1
;  :arith-pivots            484
;  :binary-propagations     16
;  :conflicts               687
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3066
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1065
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            302966)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          391
;  :arith-assert-diseq      93
;  :arith-assert-lower      387
;  :arith-assert-upper      491
;  :arith-conflicts         243
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         308
;  :arith-offset-eqs        1
;  :arith-pivots            484
;  :binary-propagations     16
;  :conflicts               688
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3067
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1066
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            303046)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          393
;  :arith-assert-diseq      93
;  :arith-assert-lower      387
;  :arith-assert-upper      492
;  :arith-conflicts         244
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         309
;  :arith-offset-eqs        1
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               689
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3068
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1067
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            303253)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          393
;  :arith-assert-diseq      93
;  :arith-assert-lower      387
;  :arith-assert-upper      492
;  :arith-conflicts         244
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         309
;  :arith-offset-eqs        1
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               690
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3069
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1068
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            303333)
; [eval] (forall i__22: Int :: { diz.ALU_m.Main_process_state[i__22] } 0 <= i__22 && i__22 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__22] == -1 || 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|)
(declare-const i__22@116@03 Int)
(push) ; 8
; [eval] 0 <= i__22 && i__22 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__22] == -1 || 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__22 && i__22 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__22
(push) ; 9
; [then-branch: 45 | 0 <= i__22@116@03 | live]
; [else-branch: 45 | !(0 <= i__22@116@03) | live]
(push) ; 10
; [then-branch: 45 | 0 <= i__22@116@03]
(assert (<= 0 i__22@116@03))
; [eval] i__22 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          395
;  :arith-assert-diseq      93
;  :arith-assert-lower      388
;  :arith-assert-upper      493
;  :arith-conflicts         245
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         310
;  :arith-offset-eqs        1
;  :arith-pivots            488
;  :binary-propagations     16
;  :conflicts               691
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3071
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1069
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            303599)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6620
;  :arith-add-rows          395
;  :arith-assert-diseq      93
;  :arith-assert-lower      388
;  :arith-assert-upper      493
;  :arith-conflicts         245
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         310
;  :arith-offset-eqs        1
;  :arith-pivots            488
;  :binary-propagations     16
;  :conflicts               692
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3072
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1070
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            303679)
(pop) ; 10
(push) ; 10
; [else-branch: 45 | !(0 <= i__22@116@03)]
(assert (not (<= 0 i__22@116@03)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 46 | i__22@116@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__22@116@03 | live]
; [else-branch: 46 | !(i__22@116@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__22@116@03) | live]
(push) ; 10
; [then-branch: 46 | i__22@116@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__22@116@03]
(assert (and
  (<
    i__22@116@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
  (<= 0 i__22@116@03)))
; [eval] diz.ALU_m.Main_process_state[i__22] == -1 || 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__22] == -1
; [eval] diz.ALU_m.Main_process_state[i__22]
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6621
;  :arith-add-rows          397
;  :arith-assert-diseq      93
;  :arith-assert-lower      389
;  :arith-assert-upper      495
;  :arith-conflicts         246
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        1
;  :arith-pivots            489
;  :binary-propagations     16
;  :conflicts               693
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3075
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1071
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            303999)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6621
;  :arith-add-rows          397
;  :arith-assert-diseq      93
;  :arith-assert-lower      389
;  :arith-assert-upper      495
;  :arith-conflicts         246
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        1
;  :arith-pivots            489
;  :binary-propagations     16
;  :conflicts               694
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3076
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1072
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            304079)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__22@116@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6621
;  :arith-add-rows          397
;  :arith-assert-diseq      93
;  :arith-assert-lower      389
;  :arith-assert-upper      495
;  :arith-conflicts         246
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        1
;  :arith-pivots            489
;  :binary-propagations     16
;  :conflicts               694
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3076
;  :mk-clause               425
;  :num-allocs              5515453
;  :num-checks              1073
;  :propagations            225
;  :quant-instantiations    70
;  :rlimit-count            304088)
; [eval] -1
(push) ; 11
; [then-branch: 47 | First:(Second:(Second:(Second:($t@62@03))))[i__22@116@03] == -1 | live]
; [else-branch: 47 | First:(Second:(Second:(Second:($t@62@03))))[i__22@116@03] != -1 | live]
(push) ; 12
; [then-branch: 47 | First:(Second:(Second:(Second:($t@62@03))))[i__22@116@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__22@116@03)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 47 | First:(Second:(Second:(Second:($t@62@03))))[i__22@116@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__22@116@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__22]
; [eval] diz.ALU_m.Main_process_state[i__22]
(set-option :timeout 10)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6623
;  :arith-add-rows          399
;  :arith-assert-diseq      95
;  :arith-assert-lower      392
;  :arith-assert-upper      497
;  :arith-conflicts         247
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         313
;  :arith-offset-eqs        1
;  :arith-pivots            492
;  :binary-propagations     16
;  :conflicts               695
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3084
;  :mk-clause               438
;  :num-allocs              5515453
;  :num-checks              1074
;  :propagations            230
;  :quant-instantiations    72
;  :rlimit-count            304535)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6623
;  :arith-add-rows          399
;  :arith-assert-diseq      95
;  :arith-assert-lower      392
;  :arith-assert-upper      497
;  :arith-conflicts         247
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         313
;  :arith-offset-eqs        1
;  :arith-pivots            492
;  :binary-propagations     16
;  :conflicts               696
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3085
;  :mk-clause               438
;  :num-allocs              5515453
;  :num-checks              1075
;  :propagations            230
;  :quant-instantiations    72
;  :rlimit-count            304615)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__22@116@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6623
;  :arith-add-rows          399
;  :arith-assert-diseq      95
;  :arith-assert-lower      392
;  :arith-assert-upper      497
;  :arith-conflicts         247
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         313
;  :arith-offset-eqs        1
;  :arith-pivots            492
;  :binary-propagations     16
;  :conflicts               696
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3085
;  :mk-clause               438
;  :num-allocs              5515453
;  :num-checks              1076
;  :propagations            230
;  :quant-instantiations    72
;  :rlimit-count            304624)
(push) ; 13
; [then-branch: 48 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__22@116@03] | live]
; [else-branch: 48 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__22@116@03]) | live]
(push) ; 14
; [then-branch: 48 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__22@116@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__22@116@03)))
; [eval] diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__22]
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          401
;  :arith-assert-diseq      95
;  :arith-assert-lower      394
;  :arith-assert-upper      499
;  :arith-conflicts         248
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        1
;  :arith-pivots            495
;  :binary-propagations     16
;  :conflicts               697
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3090
;  :mk-clause               438
;  :num-allocs              5515453
;  :num-checks              1077
;  :propagations            230
;  :quant-instantiations    72
;  :rlimit-count            304963)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          401
;  :arith-assert-diseq      95
;  :arith-assert-lower      394
;  :arith-assert-upper      499
;  :arith-conflicts         248
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        1
;  :arith-pivots            495
;  :binary-propagations     16
;  :conflicts               698
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3091
;  :mk-clause               438
;  :num-allocs              5515453
;  :num-checks              1078
;  :propagations            230
;  :quant-instantiations    72
;  :rlimit-count            305043)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i__22@116@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          401
;  :arith-assert-diseq      95
;  :arith-assert-lower      394
;  :arith-assert-upper      499
;  :arith-conflicts         248
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        1
;  :arith-pivots            495
;  :binary-propagations     16
;  :conflicts               698
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3091
;  :mk-clause               438
;  :num-allocs              5515453
;  :num-checks              1079
;  :propagations            230
;  :quant-instantiations    72
;  :rlimit-count            305052)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          403
;  :arith-assert-diseq      95
;  :arith-assert-lower      394
;  :arith-assert-upper      500
;  :arith-conflicts         249
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         316
;  :arith-offset-eqs        1
;  :arith-pivots            498
;  :binary-propagations     16
;  :conflicts               699
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3092
;  :mk-clause               438
;  :num-allocs              5515453
;  :num-checks              1080
;  :propagations            230
;  :quant-instantiations    72
;  :rlimit-count            305266)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          403
;  :arith-assert-diseq      95
;  :arith-assert-lower      394
;  :arith-assert-upper      500
;  :arith-conflicts         249
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         316
;  :arith-offset-eqs        1
;  :arith-pivots            498
;  :binary-propagations     16
;  :conflicts               700
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              401
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3093
;  :mk-clause               438
;  :num-allocs              5515453
;  :num-checks              1081
;  :propagations            230
;  :quant-instantiations    72
;  :rlimit-count            305346)
(pop) ; 14
(push) ; 14
; [else-branch: 48 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__22@116@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__22@116@03))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 46 | !(i__22@116@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__22@116@03)]
(assert (not
  (and
    (<
      i__22@116@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
    (<= 0 i__22@116@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 8
(assert (not (forall ((i__22@116@03 Int)) (!
  (implies
    (and
      (<
        i__22@116@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__22@116@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__22@116@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__22@116@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__22@116@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__22@116@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          403
;  :arith-assert-diseq      96
;  :arith-assert-lower      395
;  :arith-assert-upper      501
;  :arith-conflicts         249
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         317
;  :arith-offset-eqs        1
;  :arith-pivots            499
;  :binary-propagations     16
;  :conflicts               701
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3101
;  :mk-clause               450
;  :num-allocs              5515453
;  :num-checks              1082
;  :propagations            232
;  :quant-instantiations    74
;  :rlimit-count            305820)
(assert (forall ((i__22@116@03 Int)) (!
  (implies
    (and
      (<
        i__22@116@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__22@116@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__22@116@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__22@116@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__22@116@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__22@116@03))
  :qid |prog.l<no position>|)))
(declare-const $k@117@03 $Perm)
(assert ($Perm.isReadVar $k@117@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          405
;  :arith-assert-diseq      97
;  :arith-assert-lower      397
;  :arith-assert-upper      503
;  :arith-conflicts         250
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         318
;  :arith-offset-eqs        1
;  :arith-pivots            500
;  :binary-propagations     16
;  :conflicts               702
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3107
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1083
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            306537)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@117@03 $Perm.No) (< $Perm.No $k@117@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          405
;  :arith-assert-diseq      97
;  :arith-assert-lower      397
;  :arith-assert-upper      503
;  :arith-conflicts         250
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         318
;  :arith-offset-eqs        1
;  :arith-pivots            500
;  :binary-propagations     16
;  :conflicts               703
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3107
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1084
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            306587)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          405
;  :arith-assert-diseq      97
;  :arith-assert-lower      397
;  :arith-assert-upper      503
;  :arith-conflicts         250
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         318
;  :arith-offset-eqs        1
;  :arith-pivots            500
;  :binary-propagations     16
;  :conflicts               703
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3107
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1085
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            306598)
(push) ; 8
(assert (not (not
  (=
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          405
;  :arith-assert-diseq      97
;  :arith-assert-lower      397
;  :arith-assert-upper      503
;  :arith-conflicts         250
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         318
;  :arith-offset-eqs        1
;  :arith-pivots            500
;  :binary-propagations     16
;  :conflicts               704
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3108
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1086
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            306716)
(assert (<
  $k@117@03
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03)))
(assert (<=
  $Perm.No
  (-
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $k@117@03)))
(assert (<=
  (-
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $k@117@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@117@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          410
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      505
;  :arith-conflicts         251
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         319
;  :arith-offset-eqs        1
;  :arith-pivots            504
;  :binary-propagations     16
;  :conflicts               705
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3112
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1087
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            307170)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          410
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      505
;  :arith-conflicts         251
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         319
;  :arith-offset-eqs        1
;  :arith-pivots            504
;  :binary-propagations     16
;  :conflicts               705
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3112
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1088
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            307181)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          410
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      505
;  :arith-conflicts         251
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         319
;  :arith-offset-eqs        1
;  :arith-pivots            504
;  :binary-propagations     16
;  :conflicts               705
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3112
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1089
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            307222)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          412
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      506
;  :arith-conflicts         252
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        1
;  :arith-pivots            505
;  :binary-propagations     16
;  :conflicts               706
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3113
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1090
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            307429)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          412
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      506
;  :arith-conflicts         252
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        1
;  :arith-pivots            505
;  :binary-propagations     16
;  :conflicts               706
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3113
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1091
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            307440)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          412
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      506
;  :arith-conflicts         252
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        1
;  :arith-pivots            505
;  :binary-propagations     16
;  :conflicts               706
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3113
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1092
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            307481)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          412
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      506
;  :arith-conflicts         252
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        1
;  :arith-pivots            505
;  :binary-propagations     16
;  :conflicts               706
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3113
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1093
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            307492)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          414
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      507
;  :arith-conflicts         253
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        1
;  :arith-pivots            508
;  :binary-propagations     16
;  :conflicts               707
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3114
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1094
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            307706)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          414
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      507
;  :arith-conflicts         253
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        1
;  :arith-pivots            508
;  :binary-propagations     16
;  :conflicts               707
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3114
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1095
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            307717)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          414
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      507
;  :arith-conflicts         253
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        1
;  :arith-pivots            508
;  :binary-propagations     16
;  :conflicts               707
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3114
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1096
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            307758)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          414
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      507
;  :arith-conflicts         253
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        1
;  :arith-pivots            508
;  :binary-propagations     16
;  :conflicts               707
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3114
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1097
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            307769)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          416
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      508
;  :arith-conflicts         254
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         322
;  :arith-offset-eqs        1
;  :arith-pivots            509
;  :binary-propagations     16
;  :conflicts               708
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3115
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1098
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            307976)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          416
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      508
;  :arith-conflicts         254
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         322
;  :arith-offset-eqs        1
;  :arith-pivots            509
;  :binary-propagations     16
;  :conflicts               708
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3115
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1099
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            307987)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          416
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      508
;  :arith-conflicts         254
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         322
;  :arith-offset-eqs        1
;  :arith-pivots            509
;  :binary-propagations     16
;  :conflicts               708
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3115
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1100
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308028)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          416
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      508
;  :arith-conflicts         254
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         322
;  :arith-offset-eqs        1
;  :arith-pivots            509
;  :binary-propagations     16
;  :conflicts               708
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3115
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1101
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308039)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          418
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      509
;  :arith-conflicts         255
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         323
;  :arith-offset-eqs        1
;  :arith-pivots            512
;  :binary-propagations     16
;  :conflicts               709
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3116
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1102
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308253)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          418
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      509
;  :arith-conflicts         255
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         323
;  :arith-offset-eqs        1
;  :arith-pivots            512
;  :binary-propagations     16
;  :conflicts               709
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3116
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1103
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308264)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          418
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      509
;  :arith-conflicts         255
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         323
;  :arith-offset-eqs        1
;  :arith-pivots            512
;  :binary-propagations     16
;  :conflicts               709
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3116
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1104
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308305)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          418
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      509
;  :arith-conflicts         255
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         323
;  :arith-offset-eqs        1
;  :arith-pivots            512
;  :binary-propagations     16
;  :conflicts               709
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3116
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1105
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308316)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          420
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      510
;  :arith-conflicts         256
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        1
;  :arith-pivots            513
;  :binary-propagations     16
;  :conflicts               710
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3117
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1106
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308523)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          420
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      510
;  :arith-conflicts         256
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        1
;  :arith-pivots            513
;  :binary-propagations     16
;  :conflicts               710
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3117
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1107
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308534)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          420
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      510
;  :arith-conflicts         256
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        1
;  :arith-pivots            513
;  :binary-propagations     16
;  :conflicts               710
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3117
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1108
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308575)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          420
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      510
;  :arith-conflicts         256
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        1
;  :arith-pivots            513
;  :binary-propagations     16
;  :conflicts               710
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3117
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1109
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308586)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          422
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      511
;  :arith-conflicts         257
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        1
;  :arith-pivots            516
;  :binary-propagations     16
;  :conflicts               711
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3118
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1110
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308800)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          422
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      511
;  :arith-conflicts         257
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        1
;  :arith-pivots            516
;  :binary-propagations     16
;  :conflicts               711
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3118
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1111
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308811)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          422
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      511
;  :arith-conflicts         257
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        1
;  :arith-pivots            516
;  :binary-propagations     16
;  :conflicts               711
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3118
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1112
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308852)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          422
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      511
;  :arith-conflicts         257
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        1
;  :arith-pivots            516
;  :binary-propagations     16
;  :conflicts               711
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3118
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1113
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            308863)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          424
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      512
;  :arith-conflicts         258
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        1
;  :arith-pivots            517
;  :binary-propagations     16
;  :conflicts               712
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3119
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1114
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            309070)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          424
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      512
;  :arith-conflicts         258
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        1
;  :arith-pivots            517
;  :binary-propagations     16
;  :conflicts               712
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3119
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1115
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            309081)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          424
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      512
;  :arith-conflicts         258
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        1
;  :arith-pivots            517
;  :binary-propagations     16
;  :conflicts               712
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3119
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1116
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            309122)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          424
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      512
;  :arith-conflicts         258
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        1
;  :arith-pivots            517
;  :binary-propagations     16
;  :conflicts               712
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3119
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1117
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            309133)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          426
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      513
;  :arith-conflicts         259
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        1
;  :arith-pivots            520
;  :binary-propagations     16
;  :conflicts               713
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3120
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1118
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            309347)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          426
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      513
;  :arith-conflicts         259
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        1
;  :arith-pivots            520
;  :binary-propagations     16
;  :conflicts               713
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3120
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1119
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            309358)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          426
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      513
;  :arith-conflicts         259
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        1
;  :arith-pivots            520
;  :binary-propagations     16
;  :conflicts               713
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3120
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1120
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            309399)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          426
;  :arith-assert-diseq      97
;  :arith-assert-lower      399
;  :arith-assert-upper      513
;  :arith-conflicts         259
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        1
;  :arith-pivots            520
;  :binary-propagations     16
;  :conflicts               713
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3120
;  :mk-clause               452
;  :num-allocs              5515453
;  :num-checks              1121
;  :propagations            233
;  :quant-instantiations    74
;  :rlimit-count            309410)
(declare-const $k@118@03 $Perm)
(assert ($Perm.isReadVar $k@118@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          428
;  :arith-assert-diseq      98
;  :arith-assert-lower      401
;  :arith-assert-upper      515
;  :arith-conflicts         260
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         328
;  :arith-offset-eqs        1
;  :arith-pivots            521
;  :binary-propagations     16
;  :conflicts               714
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3125
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1122
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            309765)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@118@03 $Perm.No) (< $Perm.No $k@118@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          428
;  :arith-assert-diseq      98
;  :arith-assert-lower      401
;  :arith-assert-upper      515
;  :arith-conflicts         260
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         328
;  :arith-offset-eqs        1
;  :arith-pivots            521
;  :binary-propagations     16
;  :conflicts               715
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3125
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1123
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            309815)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          428
;  :arith-assert-diseq      98
;  :arith-assert-lower      401
;  :arith-assert-upper      515
;  :arith-conflicts         260
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         328
;  :arith-offset-eqs        1
;  :arith-pivots            521
;  :binary-propagations     16
;  :conflicts               715
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3125
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1124
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            309826)
(push) ; 8
(assert (not (not (= (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          428
;  :arith-assert-diseq      98
;  :arith-assert-lower      401
;  :arith-assert-upper      515
;  :arith-conflicts         260
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         328
;  :arith-offset-eqs        1
;  :arith-pivots            521
;  :binary-propagations     16
;  :conflicts               716
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3126
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1125
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            309918)
(assert (< $k@118@03 (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03)))
(assert (<= $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@118@03)))
(assert (<= (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@118@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@118@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          432
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      517
;  :arith-conflicts         261
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         329
;  :arith-offset-eqs        1
;  :arith-pivots            525
;  :binary-propagations     16
;  :conflicts               717
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3130
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1126
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            310345)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          432
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      517
;  :arith-conflicts         261
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         329
;  :arith-offset-eqs        1
;  :arith-pivots            525
;  :binary-propagations     16
;  :conflicts               717
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3130
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1127
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            310356)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          432
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      517
;  :arith-conflicts         261
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         329
;  :arith-offset-eqs        1
;  :arith-pivots            525
;  :binary-propagations     16
;  :conflicts               717
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3130
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1128
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            310385)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          432
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      517
;  :arith-conflicts         261
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         329
;  :arith-offset-eqs        1
;  :arith-pivots            525
;  :binary-propagations     16
;  :conflicts               717
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3130
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1129
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            310398)
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          434
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      518
;  :arith-conflicts         262
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         330
;  :arith-offset-eqs        1
;  :arith-pivots            526
;  :binary-propagations     16
;  :conflicts               718
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3131
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1130
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            310605)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          434
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      518
;  :arith-conflicts         262
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         330
;  :arith-offset-eqs        1
;  :arith-pivots            526
;  :binary-propagations     16
;  :conflicts               718
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3131
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1131
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            310616)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          434
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      518
;  :arith-conflicts         262
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         330
;  :arith-offset-eqs        1
;  :arith-pivots            526
;  :binary-propagations     16
;  :conflicts               718
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3131
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1132
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            310645)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          434
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      518
;  :arith-conflicts         262
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         330
;  :arith-offset-eqs        1
;  :arith-pivots            526
;  :binary-propagations     16
;  :conflicts               719
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3132
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1133
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            310905)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          436
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      519
;  :arith-conflicts         263
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         331
;  :arith-offset-eqs        1
;  :arith-pivots            529
;  :binary-propagations     16
;  :conflicts               720
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3133
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1134
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            311119)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          436
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      519
;  :arith-conflicts         263
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         331
;  :arith-offset-eqs        1
;  :arith-pivots            529
;  :binary-propagations     16
;  :conflicts               720
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3133
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1135
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            311130)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          436
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      519
;  :arith-conflicts         263
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         331
;  :arith-offset-eqs        1
;  :arith-pivots            529
;  :binary-propagations     16
;  :conflicts               720
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3133
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1136
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            311159)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          436
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      519
;  :arith-conflicts         263
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         331
;  :arith-offset-eqs        1
;  :arith-pivots            529
;  :binary-propagations     16
;  :conflicts               721
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3134
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1137
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            311419)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          438
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      520
;  :arith-conflicts         264
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         332
;  :arith-offset-eqs        1
;  :arith-pivots            530
;  :binary-propagations     16
;  :conflicts               722
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3135
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1138
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            311626)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          438
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      520
;  :arith-conflicts         264
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         332
;  :arith-offset-eqs        1
;  :arith-pivots            530
;  :binary-propagations     16
;  :conflicts               722
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3135
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1139
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            311637)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          438
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      520
;  :arith-conflicts         264
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         332
;  :arith-offset-eqs        1
;  :arith-pivots            530
;  :binary-propagations     16
;  :conflicts               722
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3135
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1140
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            311666)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          438
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      520
;  :arith-conflicts         264
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         332
;  :arith-offset-eqs        1
;  :arith-pivots            530
;  :binary-propagations     16
;  :conflicts               723
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3136
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1141
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            311926)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          440
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      521
;  :arith-conflicts         265
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         333
;  :arith-offset-eqs        1
;  :arith-pivots            533
;  :binary-propagations     16
;  :conflicts               724
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3137
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1142
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            312140)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          440
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      521
;  :arith-conflicts         265
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         333
;  :arith-offset-eqs        1
;  :arith-pivots            533
;  :binary-propagations     16
;  :conflicts               724
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3137
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1143
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            312151)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          440
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      521
;  :arith-conflicts         265
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         333
;  :arith-offset-eqs        1
;  :arith-pivots            533
;  :binary-propagations     16
;  :conflicts               724
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3137
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1144
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            312180)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          440
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      521
;  :arith-conflicts         265
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         333
;  :arith-offset-eqs        1
;  :arith-pivots            533
;  :binary-propagations     16
;  :conflicts               725
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3138
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1145
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            312440)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          442
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      522
;  :arith-conflicts         266
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         334
;  :arith-offset-eqs        1
;  :arith-pivots            534
;  :binary-propagations     16
;  :conflicts               726
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3139
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1146
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            312647)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          442
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      522
;  :arith-conflicts         266
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         334
;  :arith-offset-eqs        1
;  :arith-pivots            534
;  :binary-propagations     16
;  :conflicts               726
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3139
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1147
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            312658)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          442
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      522
;  :arith-conflicts         266
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         334
;  :arith-offset-eqs        1
;  :arith-pivots            534
;  :binary-propagations     16
;  :conflicts               726
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3139
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1148
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            312687)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          442
;  :arith-assert-diseq      98
;  :arith-assert-lower      403
;  :arith-assert-upper      522
;  :arith-conflicts         266
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         334
;  :arith-offset-eqs        1
;  :arith-pivots            534
;  :binary-propagations     16
;  :conflicts               727
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3140
;  :mk-clause               454
;  :num-allocs              5515453
;  :num-checks              1149
;  :propagations            234
;  :quant-instantiations    74
;  :rlimit-count            312947)
(declare-const $k@119@03 $Perm)
(assert ($Perm.isReadVar $k@119@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          444
;  :arith-assert-diseq      99
;  :arith-assert-lower      405
;  :arith-assert-upper      524
;  :arith-conflicts         267
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         335
;  :arith-offset-eqs        1
;  :arith-pivots            537
;  :binary-propagations     16
;  :conflicts               728
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3145
;  :mk-clause               456
;  :num-allocs              5515453
;  :num-checks              1150
;  :propagations            235
;  :quant-instantiations    74
;  :rlimit-count            313309)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@119@03 $Perm.No) (< $Perm.No $k@119@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          444
;  :arith-assert-diseq      99
;  :arith-assert-lower      405
;  :arith-assert-upper      524
;  :arith-conflicts         267
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         335
;  :arith-offset-eqs        1
;  :arith-pivots            537
;  :binary-propagations     16
;  :conflicts               729
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3145
;  :mk-clause               456
;  :num-allocs              5515453
;  :num-checks              1151
;  :propagations            235
;  :quant-instantiations    74
;  :rlimit-count            313359)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          444
;  :arith-assert-diseq      99
;  :arith-assert-lower      405
;  :arith-assert-upper      524
;  :arith-conflicts         267
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         335
;  :arith-offset-eqs        1
;  :arith-pivots            537
;  :binary-propagations     16
;  :conflicts               729
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3145
;  :mk-clause               456
;  :num-allocs              5515453
;  :num-checks              1152
;  :propagations            235
;  :quant-instantiations    74
;  :rlimit-count            313370)
(push) ; 8
(assert (not (not (= (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          444
;  :arith-assert-diseq      99
;  :arith-assert-lower      405
;  :arith-assert-upper      524
;  :arith-conflicts         267
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         335
;  :arith-offset-eqs        1
;  :arith-pivots            537
;  :binary-propagations     16
;  :conflicts               730
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3146
;  :mk-clause               456
;  :num-allocs              5515453
;  :num-checks              1153
;  :propagations            235
;  :quant-instantiations    74
;  :rlimit-count            313462)
(assert (< $k@119@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)))
(assert (<= $Perm.No (- (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03) $k@119@03)))
(assert (<= (- (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03) $k@119@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03) $k@119@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          447
;  :arith-assert-diseq      99
;  :arith-assert-lower      407
;  :arith-assert-upper      526
;  :arith-conflicts         268
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         336
;  :arith-offset-eqs        1
;  :arith-pivots            539
;  :binary-propagations     16
;  :conflicts               731
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3150
;  :mk-clause               456
;  :num-allocs              5515453
;  :num-checks              1154
;  :propagations            235
;  :quant-instantiations    74
;  :rlimit-count            313881)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          447
;  :arith-assert-diseq      99
;  :arith-assert-lower      407
;  :arith-assert-upper      526
;  :arith-conflicts         268
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         336
;  :arith-offset-eqs        1
;  :arith-pivots            539
;  :binary-propagations     16
;  :conflicts               731
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3150
;  :mk-clause               456
;  :num-allocs              5515453
;  :num-checks              1155
;  :propagations            235
;  :quant-instantiations    74
;  :rlimit-count            313892)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          447
;  :arith-assert-diseq      99
;  :arith-assert-lower      407
;  :arith-assert-upper      526
;  :arith-conflicts         268
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         336
;  :arith-offset-eqs        1
;  :arith-pivots            539
;  :binary-propagations     16
;  :conflicts               731
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3150
;  :mk-clause               456
;  :num-allocs              5515453
;  :num-checks              1156
;  :propagations            235
;  :quant-instantiations    74
;  :rlimit-count            313921)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          447
;  :arith-assert-diseq      99
;  :arith-assert-lower      407
;  :arith-assert-upper      526
;  :arith-conflicts         268
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         336
;  :arith-offset-eqs        1
;  :arith-pivots            539
;  :binary-propagations     16
;  :conflicts               731
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3150
;  :mk-clause               456
;  :num-allocs              5515453
;  :num-checks              1157
;  :propagations            235
;  :quant-instantiations    74
;  :rlimit-count            313934)
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          449
;  :arith-assert-diseq      99
;  :arith-assert-lower      407
;  :arith-assert-upper      527
;  :arith-conflicts         269
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        1
;  :arith-pivots            542
;  :binary-propagations     16
;  :conflicts               732
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3151
;  :mk-clause               456
;  :num-allocs              5515453
;  :num-checks              1158
;  :propagations            235
;  :quant-instantiations    74
;  :rlimit-count            314148)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          449
;  :arith-assert-diseq      99
;  :arith-assert-lower      407
;  :arith-assert-upper      527
;  :arith-conflicts         269
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        1
;  :arith-pivots            542
;  :binary-propagations     16
;  :conflicts               732
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3151
;  :mk-clause               456
;  :num-allocs              5515453
;  :num-checks              1159
;  :propagations            235
;  :quant-instantiations    74
;  :rlimit-count            314159)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          449
;  :arith-assert-diseq      99
;  :arith-assert-lower      407
;  :arith-assert-upper      527
;  :arith-conflicts         269
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        1
;  :arith-pivots            542
;  :binary-propagations     16
;  :conflicts               732
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3151
;  :mk-clause               456
;  :num-allocs              5515453
;  :num-checks              1160
;  :propagations            235
;  :quant-instantiations    74
;  :rlimit-count            314188)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
  $t@54@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          449
;  :arith-assert-diseq      99
;  :arith-assert-lower      407
;  :arith-assert-upper      527
;  :arith-conflicts         269
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        1
;  :arith-pivots            542
;  :binary-propagations     16
;  :conflicts               733
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3152
;  :mk-clause               456
;  :num-allocs              5515453
;  :num-checks              1161
;  :propagations            235
;  :quant-instantiations    74
;  :rlimit-count            314518)
(declare-const $k@120@03 $Perm)
(assert ($Perm.isReadVar $k@120@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          451
;  :arith-assert-diseq      100
;  :arith-assert-lower      409
;  :arith-assert-upper      529
;  :arith-conflicts         270
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         338
;  :arith-offset-eqs        1
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               734
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3157
;  :mk-clause               458
;  :num-allocs              5515453
;  :num-checks              1162
;  :propagations            236
;  :quant-instantiations    74
;  :rlimit-count            314873)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          451
;  :arith-assert-diseq      100
;  :arith-assert-lower      409
;  :arith-assert-upper      529
;  :arith-conflicts         270
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         338
;  :arith-offset-eqs        1
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               734
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3157
;  :mk-clause               458
;  :num-allocs              5515453
;  :num-checks              1163
;  :propagations            236
;  :quant-instantiations    74
;  :rlimit-count            314884)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          451
;  :arith-assert-diseq      100
;  :arith-assert-lower      409
;  :arith-assert-upper      529
;  :arith-conflicts         270
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         338
;  :arith-offset-eqs        1
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               734
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3157
;  :mk-clause               458
;  :num-allocs              5515453
;  :num-checks              1164
;  :propagations            236
;  :quant-instantiations    74
;  :rlimit-count            314925)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@120@03 $Perm.No) (< $Perm.No $k@120@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          451
;  :arith-assert-diseq      100
;  :arith-assert-lower      409
;  :arith-assert-upper      529
;  :arith-conflicts         270
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         338
;  :arith-offset-eqs        1
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               735
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3157
;  :mk-clause               458
;  :num-allocs              5515453
;  :num-checks              1165
;  :propagations            236
;  :quant-instantiations    74
;  :rlimit-count            314975)
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          451
;  :arith-assert-diseq      100
;  :arith-assert-lower      409
;  :arith-assert-upper      529
;  :arith-conflicts         270
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         338
;  :arith-offset-eqs        1
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               735
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3157
;  :mk-clause               458
;  :num-allocs              5515453
;  :num-checks              1166
;  :propagations            236
;  :quant-instantiations    74
;  :rlimit-count            314986)
(push) ; 8
(assert (not (not (= $k@68@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          451
;  :arith-assert-diseq      100
;  :arith-assert-lower      409
;  :arith-assert-upper      529
;  :arith-conflicts         270
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         338
;  :arith-offset-eqs        1
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               735
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3157
;  :mk-clause               458
;  :num-allocs              5515453
;  :num-checks              1167
;  :propagations            236
;  :quant-instantiations    74
;  :rlimit-count            314997)
(assert (< $k@120@03 $k@68@03))
(assert (<= $Perm.No (- $k@68@03 $k@120@03)))
(assert (<= (- $k@68@03 $k@120@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@68@03 $k@120@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          456
;  :arith-assert-diseq      100
;  :arith-assert-lower      411
;  :arith-assert-upper      531
;  :arith-conflicts         271
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         339
;  :arith-offset-eqs        1
;  :arith-pivots            548
;  :binary-propagations     16
;  :conflicts               736
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3161
;  :mk-clause               458
;  :num-allocs              5515453
;  :num-checks              1168
;  :propagations            236
;  :quant-instantiations    74
;  :rlimit-count            315446)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          456
;  :arith-assert-diseq      100
;  :arith-assert-lower      411
;  :arith-assert-upper      531
;  :arith-conflicts         271
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         339
;  :arith-offset-eqs        1
;  :arith-pivots            548
;  :binary-propagations     16
;  :conflicts               736
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3161
;  :mk-clause               458
;  :num-allocs              5515453
;  :num-checks              1169
;  :propagations            236
;  :quant-instantiations    74
;  :rlimit-count            315457)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          456
;  :arith-assert-diseq      100
;  :arith-assert-lower      411
;  :arith-assert-upper      531
;  :arith-conflicts         271
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         339
;  :arith-offset-eqs        1
;  :arith-pivots            548
;  :binary-propagations     16
;  :conflicts               736
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3161
;  :mk-clause               458
;  :num-allocs              5515453
;  :num-checks              1170
;  :propagations            236
;  :quant-instantiations    74
;  :rlimit-count            315498)
(push) ; 8
(assert (not (= diz@6@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          456
;  :arith-assert-diseq      100
;  :arith-assert-lower      411
;  :arith-assert-upper      531
;  :arith-conflicts         271
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         339
;  :arith-offset-eqs        1
;  :arith-pivots            548
;  :binary-propagations     16
;  :conflicts               736
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3161
;  :mk-clause               458
;  :num-allocs              5515453
;  :num-checks              1171
;  :propagations            236
;  :quant-instantiations    74
;  :rlimit-count            315509)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          458
;  :arith-assert-diseq      100
;  :arith-assert-lower      411
;  :arith-assert-upper      532
;  :arith-conflicts         272
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         340
;  :arith-offset-eqs        1
;  :arith-pivots            549
;  :binary-propagations     16
;  :conflicts               737
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3162
;  :mk-clause               458
;  :num-allocs              5515453
;  :num-checks              1172
;  :propagations            236
;  :quant-instantiations    74
;  :rlimit-count            315715)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          460
;  :arith-assert-diseq      100
;  :arith-assert-lower      411
;  :arith-assert-upper      533
;  :arith-conflicts         273
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         341
;  :arith-offset-eqs        1
;  :arith-pivots            552
;  :binary-propagations     16
;  :conflicts               738
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3163
;  :mk-clause               458
;  :num-allocs              5515453
;  :num-checks              1173
;  :propagations            236
;  :quant-instantiations    74
;  :rlimit-count            315928)
(declare-const $k@121@03 $Perm)
(assert ($Perm.isReadVar $k@121@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          462
;  :arith-assert-diseq      101
;  :arith-assert-lower      413
;  :arith-assert-upper      535
;  :arith-conflicts         274
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         342
;  :arith-offset-eqs        1
;  :arith-pivots            553
;  :binary-propagations     16
;  :conflicts               739
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3168
;  :mk-clause               460
;  :num-allocs              5515453
;  :num-checks              1174
;  :propagations            237
;  :quant-instantiations    74
;  :rlimit-count            316282)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@121@03 $Perm.No) (< $Perm.No $k@121@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          462
;  :arith-assert-diseq      101
;  :arith-assert-lower      413
;  :arith-assert-upper      535
;  :arith-conflicts         274
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         342
;  :arith-offset-eqs        1
;  :arith-pivots            553
;  :binary-propagations     16
;  :conflicts               740
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3168
;  :mk-clause               460
;  :num-allocs              5515453
;  :num-checks              1175
;  :propagations            237
;  :quant-instantiations    74
;  :rlimit-count            316332)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          462
;  :arith-assert-diseq      101
;  :arith-assert-lower      413
;  :arith-assert-upper      535
;  :arith-conflicts         274
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         342
;  :arith-offset-eqs        1
;  :arith-pivots            553
;  :binary-propagations     16
;  :conflicts               741
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3169
;  :mk-clause               460
;  :num-allocs              5515453
;  :num-checks              1176
;  :propagations            237
;  :quant-instantiations    74
;  :rlimit-count            316412)
(push) ; 8
(assert (not (not (= $k@65@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          462
;  :arith-assert-diseq      101
;  :arith-assert-lower      413
;  :arith-assert-upper      535
;  :arith-conflicts         274
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         342
;  :arith-offset-eqs        1
;  :arith-pivots            553
;  :binary-propagations     16
;  :conflicts               741
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3169
;  :mk-clause               460
;  :num-allocs              5515453
;  :num-checks              1177
;  :propagations            237
;  :quant-instantiations    74
;  :rlimit-count            316423)
(assert (< $k@121@03 $k@65@03))
(assert (<= $Perm.No (- $k@65@03 $k@121@03)))
(assert (<= (- $k@65@03 $k@121@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@65@03 $k@121@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          465
;  :arith-assert-diseq      101
;  :arith-assert-lower      415
;  :arith-assert-upper      537
;  :arith-conflicts         275
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         343
;  :arith-offset-eqs        1
;  :arith-pivots            557
;  :binary-propagations     16
;  :conflicts               742
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3173
;  :mk-clause               460
;  :num-allocs              5515453
;  :num-checks              1178
;  :propagations            237
;  :quant-instantiations    74
;  :rlimit-count            316804)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          465
;  :arith-assert-diseq      101
;  :arith-assert-lower      415
;  :arith-assert-upper      537
;  :arith-conflicts         275
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         343
;  :arith-offset-eqs        1
;  :arith-pivots            557
;  :binary-propagations     16
;  :conflicts               742
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3173
;  :mk-clause               460
;  :num-allocs              5515453
;  :num-checks              1179
;  :propagations            237
;  :quant-instantiations    74
;  :rlimit-count            316815)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6625
;  :arith-add-rows          465
;  :arith-assert-diseq      101
;  :arith-assert-lower      415
;  :arith-assert-upper      537
;  :arith-conflicts         275
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         343
;  :arith-offset-eqs        1
;  :arith-pivots            557
;  :binary-propagations     16
;  :conflicts               742
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1704
;  :datatype-occurs-check   239
;  :datatype-splits         1222
;  :decisions               1623
;  :del-clause              426
;  :final-checks            91
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3173
;  :mk-clause               460
;  :num-allocs              5515453
;  :num-checks              1180
;  :propagations            237
;  :quant-instantiations    74
;  :rlimit-count            316856)
; [exec]
; inhale false
(pop) ; 7
(push) ; 7
; [else-branch: 40 | bit@10@03 != 1]
(assert (not (= bit@10@03 1)))
(pop) ; 7
; [eval] !(bit == 1)
; [eval] bit == 1
(push) ; 7
(assert (not (= bit@10@03 1)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6819
;  :arith-add-rows          471
;  :arith-assert-diseq      101
;  :arith-assert-lower      417
;  :arith-assert-upper      539
;  :arith-conflicts         275
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         345
;  :arith-offset-eqs        1
;  :arith-pivots            572
;  :binary-propagations     16
;  :conflicts               742
;  :datatype-accessor-ax    250
;  :datatype-constructor-ax 1761
;  :datatype-occurs-check   248
;  :datatype-splits         1260
;  :decisions               1677
;  :del-clause              448
;  :final-checks            94
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3219
;  :mk-clause               462
;  :num-allocs              5515453
;  :num-checks              1181
;  :propagations            240
;  :quant-instantiations    74
;  :rlimit-count            318462
;  :time                    0.00)
(push) ; 7
(assert (not (not (= bit@10@03 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7015
;  :arith-add-rows          471
;  :arith-assert-diseq      103
;  :arith-assert-lower      421
;  :arith-assert-upper      541
;  :arith-conflicts         275
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         347
;  :arith-offset-eqs        1
;  :arith-pivots            576
;  :binary-propagations     16
;  :conflicts               742
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              454
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3268
;  :mk-clause               468
;  :num-allocs              5515453
;  :num-checks              1182
;  :propagations            244
;  :quant-instantiations    74
;  :rlimit-count            319944
;  :time                    0.00)
; [then-branch: 49 | bit@10@03 != 1 | live]
; [else-branch: 49 | bit@10@03 == 1 | live]
(push) ; 7
; [then-branch: 49 | bit@10@03 != 1]
(assert (not (= bit@10@03 1)))
; [exec]
; sys__local__result__12 := value - divisor__14
; [eval] value - divisor__14
(declare-const sys__local__result__12@122@03 Int)
(assert (= sys__local__result__12@122@03 (- value@8@03 divisor__14@59@03)))
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && (true && (true && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__21: Int :: { diz.ALU_m.Main_process_state[i__21] } 0 <= i__21 && i__21 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__21] == -1 || 0 <= diz.ALU_m.Main_process_state[i__21] && diz.ALU_m.Main_process_state[i__21] < |diz.ALU_m.Main_event_state|)) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && 0 <= diz.ALU_m.Main_alu.ALU_RESULT && diz.ALU_m.Main_alu.ALU_RESULT <= 16 && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_init, 1 / 2) && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_mon.Monitor_init, 1 / 2) && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu == diz
(declare-const $k@123@03 $Perm)
(assert ($Perm.isReadVar $k@123@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@123@03 $Perm.No) (< $Perm.No $k@123@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7016
;  :arith-add-rows          471
;  :arith-assert-diseq      104
;  :arith-assert-lower      424
;  :arith-assert-upper      543
;  :arith-conflicts         275
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         347
;  :arith-offset-eqs        1
;  :arith-pivots            577
;  :binary-propagations     16
;  :conflicts               743
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              454
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3276
;  :mk-clause               473
;  :num-allocs              5515453
;  :num-checks              1183
;  :propagations            247
;  :quant-instantiations    74
;  :rlimit-count            320274)
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (=
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          473
;  :arith-assert-diseq      104
;  :arith-assert-lower      424
;  :arith-assert-upper      544
;  :arith-conflicts         276
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         347
;  :arith-offset-eqs        1
;  :arith-pivots            578
;  :binary-propagations     16
;  :conflicts               744
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3278
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1184
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            320478)
(assert (<
  $k@123@03
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))))
(assert (<=
  $Perm.No
  (-
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $k@123@03)))
(assert (<=
  (-
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $k@123@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@123@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          478
;  :arith-assert-diseq      104
;  :arith-assert-lower      426
;  :arith-assert-upper      546
;  :arith-conflicts         277
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         348
;  :arith-offset-eqs        1
;  :arith-pivots            581
;  :binary-propagations     16
;  :conflicts               745
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3282
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1185
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            320943)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= $t@84@03 $Ref.null))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          478
;  :arith-assert-diseq      104
;  :arith-assert-lower      426
;  :arith-assert-upper      546
;  :arith-conflicts         277
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         348
;  :arith-offset-eqs        1
;  :arith-pivots            581
;  :binary-propagations     16
;  :conflicts               745
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3282
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1186
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            320961)
(assert (not (= $t@84@03 $Ref.null)))
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          480
;  :arith-assert-diseq      104
;  :arith-assert-lower      426
;  :arith-assert-upper      547
;  :arith-conflicts         278
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         349
;  :arith-offset-eqs        1
;  :arith-pivots            582
;  :binary-propagations     16
;  :conflicts               746
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3283
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1187
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            321186)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          480
;  :arith-assert-diseq      104
;  :arith-assert-lower      426
;  :arith-assert-upper      547
;  :arith-conflicts         278
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         349
;  :arith-offset-eqs        1
;  :arith-pivots            582
;  :binary-propagations     16
;  :conflicts               747
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3284
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1188
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            321266)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          482
;  :arith-assert-diseq      104
;  :arith-assert-lower      426
;  :arith-assert-upper      548
;  :arith-conflicts         279
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         350
;  :arith-offset-eqs        1
;  :arith-pivots            585
;  :binary-propagations     16
;  :conflicts               748
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3285
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1189
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            321478)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          482
;  :arith-assert-diseq      104
;  :arith-assert-lower      426
;  :arith-assert-upper      548
;  :arith-conflicts         279
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         350
;  :arith-offset-eqs        1
;  :arith-pivots            585
;  :binary-propagations     16
;  :conflicts               749
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3286
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1190
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            321558)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          484
;  :arith-assert-diseq      104
;  :arith-assert-lower      426
;  :arith-assert-upper      549
;  :arith-conflicts         280
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         351
;  :arith-offset-eqs        1
;  :arith-pivots            586
;  :binary-propagations     16
;  :conflicts               750
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3287
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1191
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            321763)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          484
;  :arith-assert-diseq      104
;  :arith-assert-lower      426
;  :arith-assert-upper      549
;  :arith-conflicts         280
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         351
;  :arith-offset-eqs        1
;  :arith-pivots            586
;  :binary-propagations     16
;  :conflicts               751
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3288
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1192
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            321843)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          486
;  :arith-assert-diseq      104
;  :arith-assert-lower      426
;  :arith-assert-upper      550
;  :arith-conflicts         281
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         352
;  :arith-offset-eqs        1
;  :arith-pivots            589
;  :binary-propagations     16
;  :conflicts               752
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3289
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1193
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            322055)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          486
;  :arith-assert-diseq      104
;  :arith-assert-lower      426
;  :arith-assert-upper      550
;  :arith-conflicts         281
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         352
;  :arith-offset-eqs        1
;  :arith-pivots            589
;  :binary-propagations     16
;  :conflicts               753
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3290
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1194
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            322135)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          488
;  :arith-assert-diseq      104
;  :arith-assert-lower      426
;  :arith-assert-upper      551
;  :arith-conflicts         282
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         353
;  :arith-offset-eqs        1
;  :arith-pivots            590
;  :binary-propagations     16
;  :conflicts               754
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3291
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1195
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            322340)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          488
;  :arith-assert-diseq      104
;  :arith-assert-lower      426
;  :arith-assert-upper      551
;  :arith-conflicts         282
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         353
;  :arith-offset-eqs        1
;  :arith-pivots            590
;  :binary-propagations     16
;  :conflicts               755
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3292
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1196
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            322420)
; [eval] (forall i__21: Int :: { diz.ALU_m.Main_process_state[i__21] } 0 <= i__21 && i__21 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__21] == -1 || 0 <= diz.ALU_m.Main_process_state[i__21] && diz.ALU_m.Main_process_state[i__21] < |diz.ALU_m.Main_event_state|)
(declare-const i__21@124@03 Int)
(push) ; 8
; [eval] 0 <= i__21 && i__21 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__21] == -1 || 0 <= diz.ALU_m.Main_process_state[i__21] && diz.ALU_m.Main_process_state[i__21] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__21 && i__21 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__21
(push) ; 9
; [then-branch: 50 | 0 <= i__21@124@03 | live]
; [else-branch: 50 | !(0 <= i__21@124@03) | live]
(push) ; 10
; [then-branch: 50 | 0 <= i__21@124@03]
(assert (<= 0 i__21@124@03))
; [eval] i__21 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          490
;  :arith-assert-diseq      104
;  :arith-assert-lower      427
;  :arith-assert-upper      552
;  :arith-conflicts         283
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         354
;  :arith-offset-eqs        1
;  :arith-pivots            593
;  :binary-propagations     16
;  :conflicts               756
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3294
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1197
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            322685)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7017
;  :arith-add-rows          490
;  :arith-assert-diseq      104
;  :arith-assert-lower      427
;  :arith-assert-upper      552
;  :arith-conflicts         283
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         354
;  :arith-offset-eqs        1
;  :arith-pivots            593
;  :binary-propagations     16
;  :conflicts               757
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3295
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1198
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            322765)
(pop) ; 10
(push) ; 10
; [else-branch: 50 | !(0 <= i__21@124@03)]
(assert (not (<= 0 i__21@124@03)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 51 | i__21@124@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__21@124@03 | live]
; [else-branch: 51 | !(i__21@124@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__21@124@03) | live]
(push) ; 10
; [then-branch: 51 | i__21@124@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__21@124@03]
(assert (and
  (<
    i__21@124@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
  (<= 0 i__21@124@03)))
; [eval] diz.ALU_m.Main_process_state[i__21] == -1 || 0 <= diz.ALU_m.Main_process_state[i__21] && diz.ALU_m.Main_process_state[i__21] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__21] == -1
; [eval] diz.ALU_m.Main_process_state[i__21]
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7018
;  :arith-add-rows          492
;  :arith-assert-diseq      104
;  :arith-assert-lower      428
;  :arith-assert-upper      554
;  :arith-conflicts         284
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         356
;  :arith-offset-eqs        1
;  :arith-pivots            594
;  :binary-propagations     16
;  :conflicts               758
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3298
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1199
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            323083)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7018
;  :arith-add-rows          492
;  :arith-assert-diseq      104
;  :arith-assert-lower      428
;  :arith-assert-upper      554
;  :arith-conflicts         284
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         356
;  :arith-offset-eqs        1
;  :arith-pivots            594
;  :binary-propagations     16
;  :conflicts               759
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3299
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1200
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            323163)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__21@124@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7018
;  :arith-add-rows          492
;  :arith-assert-diseq      104
;  :arith-assert-lower      428
;  :arith-assert-upper      554
;  :arith-conflicts         284
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         356
;  :arith-offset-eqs        1
;  :arith-pivots            594
;  :binary-propagations     16
;  :conflicts               759
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3299
;  :mk-clause               475
;  :num-allocs              5515453
;  :num-checks              1201
;  :propagations            248
;  :quant-instantiations    74
;  :rlimit-count            323172)
; [eval] -1
(push) ; 11
; [then-branch: 52 | First:(Second:(Second:(Second:($t@62@03))))[i__21@124@03] == -1 | live]
; [else-branch: 52 | First:(Second:(Second:(Second:($t@62@03))))[i__21@124@03] != -1 | live]
(push) ; 12
; [then-branch: 52 | First:(Second:(Second:(Second:($t@62@03))))[i__21@124@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__21@124@03)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 52 | First:(Second:(Second:(Second:($t@62@03))))[i__21@124@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__21@124@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__21] && diz.ALU_m.Main_process_state[i__21] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__21]
; [eval] diz.ALU_m.Main_process_state[i__21]
(set-option :timeout 10)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7020
;  :arith-add-rows          494
;  :arith-assert-diseq      106
;  :arith-assert-lower      431
;  :arith-assert-upper      556
;  :arith-conflicts         285
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         357
;  :arith-offset-eqs        1
;  :arith-pivots            597
;  :binary-propagations     16
;  :conflicts               760
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3307
;  :mk-clause               487
;  :num-allocs              5515453
;  :num-checks              1202
;  :propagations            253
;  :quant-instantiations    75
;  :rlimit-count            323591)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7020
;  :arith-add-rows          494
;  :arith-assert-diseq      106
;  :arith-assert-lower      431
;  :arith-assert-upper      556
;  :arith-conflicts         285
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         357
;  :arith-offset-eqs        1
;  :arith-pivots            597
;  :binary-propagations     16
;  :conflicts               761
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3308
;  :mk-clause               487
;  :num-allocs              5515453
;  :num-checks              1203
;  :propagations            253
;  :quant-instantiations    75
;  :rlimit-count            323671)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__21@124@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7020
;  :arith-add-rows          494
;  :arith-assert-diseq      106
;  :arith-assert-lower      431
;  :arith-assert-upper      556
;  :arith-conflicts         285
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         357
;  :arith-offset-eqs        1
;  :arith-pivots            597
;  :binary-propagations     16
;  :conflicts               761
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3308
;  :mk-clause               487
;  :num-allocs              5515453
;  :num-checks              1204
;  :propagations            253
;  :quant-instantiations    75
;  :rlimit-count            323680)
(push) ; 13
; [then-branch: 53 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__21@124@03] | live]
; [else-branch: 53 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__21@124@03]) | live]
(push) ; 14
; [then-branch: 53 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__21@124@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__21@124@03)))
; [eval] diz.ALU_m.Main_process_state[i__21] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__21]
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          496
;  :arith-assert-diseq      106
;  :arith-assert-lower      433
;  :arith-assert-upper      558
;  :arith-conflicts         286
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         359
;  :arith-offset-eqs        1
;  :arith-pivots            599
;  :binary-propagations     16
;  :conflicts               762
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3313
;  :mk-clause               487
;  :num-allocs              5515453
;  :num-checks              1205
;  :propagations            253
;  :quant-instantiations    75
;  :rlimit-count            324011)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          496
;  :arith-assert-diseq      106
;  :arith-assert-lower      433
;  :arith-assert-upper      558
;  :arith-conflicts         286
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         359
;  :arith-offset-eqs        1
;  :arith-pivots            599
;  :binary-propagations     16
;  :conflicts               763
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3314
;  :mk-clause               487
;  :num-allocs              5515453
;  :num-checks              1206
;  :propagations            253
;  :quant-instantiations    75
;  :rlimit-count            324091)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i__21@124@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          496
;  :arith-assert-diseq      106
;  :arith-assert-lower      433
;  :arith-assert-upper      558
;  :arith-conflicts         286
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         359
;  :arith-offset-eqs        1
;  :arith-pivots            599
;  :binary-propagations     16
;  :conflicts               763
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3314
;  :mk-clause               487
;  :num-allocs              5515453
;  :num-checks              1207
;  :propagations            253
;  :quant-instantiations    75
;  :rlimit-count            324100)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          498
;  :arith-assert-diseq      106
;  :arith-assert-lower      433
;  :arith-assert-upper      559
;  :arith-conflicts         287
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        1
;  :arith-pivots            602
;  :binary-propagations     16
;  :conflicts               764
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3315
;  :mk-clause               487
;  :num-allocs              5515453
;  :num-checks              1208
;  :propagations            253
;  :quant-instantiations    75
;  :rlimit-count            324312)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          498
;  :arith-assert-diseq      106
;  :arith-assert-lower      433
;  :arith-assert-upper      559
;  :arith-conflicts         287
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        1
;  :arith-pivots            602
;  :binary-propagations     16
;  :conflicts               765
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              456
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3316
;  :mk-clause               487
;  :num-allocs              5515453
;  :num-checks              1209
;  :propagations            253
;  :quant-instantiations    75
;  :rlimit-count            324392)
(pop) ; 14
(push) ; 14
; [else-branch: 53 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__21@124@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__21@124@03))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 51 | !(i__21@124@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__21@124@03)]
(assert (not
  (and
    (<
      i__21@124@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
    (<= 0 i__21@124@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 8
(assert (not (forall ((i__21@124@03 Int)) (!
  (implies
    (and
      (<
        i__21@124@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__21@124@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__21@124@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__21@124@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__21@124@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__21@124@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          498
;  :arith-assert-diseq      108
;  :arith-assert-lower      434
;  :arith-assert-upper      560
;  :arith-conflicts         287
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         361
;  :arith-offset-eqs        1
;  :arith-pivots            603
;  :binary-propagations     16
;  :conflicts               766
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3324
;  :mk-clause               501
;  :num-allocs              5515453
;  :num-checks              1210
;  :propagations            255
;  :quant-instantiations    76
;  :rlimit-count            324841)
(assert (forall ((i__21@124@03 Int)) (!
  (implies
    (and
      (<
        i__21@124@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__21@124@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__21@124@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__21@124@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__21@124@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__21@124@03))
  :qid |prog.l<no position>|)))
(declare-const $k@125@03 $Perm)
(assert ($Perm.isReadVar $k@125@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          500
;  :arith-assert-diseq      109
;  :arith-assert-lower      436
;  :arith-assert-upper      562
;  :arith-conflicts         288
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         362
;  :arith-offset-eqs        1
;  :arith-pivots            604
;  :binary-propagations     16
;  :conflicts               767
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3330
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1211
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            325557)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@125@03 $Perm.No) (< $Perm.No $k@125@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          500
;  :arith-assert-diseq      109
;  :arith-assert-lower      436
;  :arith-assert-upper      562
;  :arith-conflicts         288
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         362
;  :arith-offset-eqs        1
;  :arith-pivots            604
;  :binary-propagations     16
;  :conflicts               768
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3330
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1212
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            325607)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          500
;  :arith-assert-diseq      109
;  :arith-assert-lower      436
;  :arith-assert-upper      562
;  :arith-conflicts         288
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         362
;  :arith-offset-eqs        1
;  :arith-pivots            604
;  :binary-propagations     16
;  :conflicts               768
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3330
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1213
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            325618)
(push) ; 8
(assert (not (not
  (=
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          500
;  :arith-assert-diseq      109
;  :arith-assert-lower      436
;  :arith-assert-upper      562
;  :arith-conflicts         288
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         362
;  :arith-offset-eqs        1
;  :arith-pivots            604
;  :binary-propagations     16
;  :conflicts               769
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3331
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1214
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            325736)
(assert (<
  $k@125@03
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03)))
(assert (<=
  $Perm.No
  (-
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $k@125@03)))
(assert (<=
  (-
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $k@125@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@125@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          505
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      564
;  :arith-conflicts         289
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         363
;  :arith-offset-eqs        1
;  :arith-pivots            607
;  :binary-propagations     16
;  :conflicts               770
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3335
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1215
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            326181)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          505
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      564
;  :arith-conflicts         289
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         363
;  :arith-offset-eqs        1
;  :arith-pivots            607
;  :binary-propagations     16
;  :conflicts               770
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3335
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1216
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            326192)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          505
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      564
;  :arith-conflicts         289
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         363
;  :arith-offset-eqs        1
;  :arith-pivots            607
;  :binary-propagations     16
;  :conflicts               770
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3335
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1217
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            326233)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          507
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      565
;  :arith-conflicts         290
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         364
;  :arith-offset-eqs        1
;  :arith-pivots            608
;  :binary-propagations     16
;  :conflicts               771
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3336
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1218
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            326438)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          507
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      565
;  :arith-conflicts         290
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         364
;  :arith-offset-eqs        1
;  :arith-pivots            608
;  :binary-propagations     16
;  :conflicts               771
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3336
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1219
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            326449)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          507
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      565
;  :arith-conflicts         290
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         364
;  :arith-offset-eqs        1
;  :arith-pivots            608
;  :binary-propagations     16
;  :conflicts               771
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3336
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1220
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            326490)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          507
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      565
;  :arith-conflicts         290
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         364
;  :arith-offset-eqs        1
;  :arith-pivots            608
;  :binary-propagations     16
;  :conflicts               771
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3336
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1221
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            326501)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          509
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      566
;  :arith-conflicts         291
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         365
;  :arith-offset-eqs        1
;  :arith-pivots            611
;  :binary-propagations     16
;  :conflicts               772
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3337
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1222
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            326713)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          509
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      566
;  :arith-conflicts         291
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         365
;  :arith-offset-eqs        1
;  :arith-pivots            611
;  :binary-propagations     16
;  :conflicts               772
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3337
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1223
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            326724)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          509
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      566
;  :arith-conflicts         291
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         365
;  :arith-offset-eqs        1
;  :arith-pivots            611
;  :binary-propagations     16
;  :conflicts               772
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3337
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1224
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            326765)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          509
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      566
;  :arith-conflicts         291
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         365
;  :arith-offset-eqs        1
;  :arith-pivots            611
;  :binary-propagations     16
;  :conflicts               772
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3337
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1225
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            326776)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          511
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      567
;  :arith-conflicts         292
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        1
;  :arith-pivots            612
;  :binary-propagations     16
;  :conflicts               773
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3338
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1226
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            326981)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          511
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      567
;  :arith-conflicts         292
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        1
;  :arith-pivots            612
;  :binary-propagations     16
;  :conflicts               773
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3338
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1227
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            326992)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          511
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      567
;  :arith-conflicts         292
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        1
;  :arith-pivots            612
;  :binary-propagations     16
;  :conflicts               773
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3338
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1228
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327033)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          511
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      567
;  :arith-conflicts         292
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        1
;  :arith-pivots            612
;  :binary-propagations     16
;  :conflicts               773
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3338
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1229
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327044)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          513
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      568
;  :arith-conflicts         293
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         367
;  :arith-offset-eqs        1
;  :arith-pivots            615
;  :binary-propagations     16
;  :conflicts               774
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3339
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1230
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327256)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          513
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      568
;  :arith-conflicts         293
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         367
;  :arith-offset-eqs        1
;  :arith-pivots            615
;  :binary-propagations     16
;  :conflicts               774
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3339
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1231
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327267)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          513
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      568
;  :arith-conflicts         293
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         367
;  :arith-offset-eqs        1
;  :arith-pivots            615
;  :binary-propagations     16
;  :conflicts               774
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3339
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1232
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327308)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          513
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      568
;  :arith-conflicts         293
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         367
;  :arith-offset-eqs        1
;  :arith-pivots            615
;  :binary-propagations     16
;  :conflicts               774
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3339
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1233
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327319)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          515
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      569
;  :arith-conflicts         294
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         368
;  :arith-offset-eqs        1
;  :arith-pivots            616
;  :binary-propagations     16
;  :conflicts               775
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3340
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1234
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327524)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          515
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      569
;  :arith-conflicts         294
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         368
;  :arith-offset-eqs        1
;  :arith-pivots            616
;  :binary-propagations     16
;  :conflicts               775
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3340
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1235
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327535)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          515
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      569
;  :arith-conflicts         294
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         368
;  :arith-offset-eqs        1
;  :arith-pivots            616
;  :binary-propagations     16
;  :conflicts               775
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3340
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1236
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327576)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          515
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      569
;  :arith-conflicts         294
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         368
;  :arith-offset-eqs        1
;  :arith-pivots            616
;  :binary-propagations     16
;  :conflicts               775
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3340
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1237
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327587)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          517
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      570
;  :arith-conflicts         295
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         369
;  :arith-offset-eqs        1
;  :arith-pivots            619
;  :binary-propagations     16
;  :conflicts               776
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3341
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1238
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327799)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          517
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      570
;  :arith-conflicts         295
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         369
;  :arith-offset-eqs        1
;  :arith-pivots            619
;  :binary-propagations     16
;  :conflicts               776
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3341
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1239
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327810)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          517
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      570
;  :arith-conflicts         295
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         369
;  :arith-offset-eqs        1
;  :arith-pivots            619
;  :binary-propagations     16
;  :conflicts               776
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3341
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1240
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327851)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          517
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      570
;  :arith-conflicts         295
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         369
;  :arith-offset-eqs        1
;  :arith-pivots            619
;  :binary-propagations     16
;  :conflicts               776
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3341
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1241
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            327862)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          519
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      571
;  :arith-conflicts         296
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         370
;  :arith-offset-eqs        1
;  :arith-pivots            620
;  :binary-propagations     16
;  :conflicts               777
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3342
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1242
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            328067)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          519
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      571
;  :arith-conflicts         296
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         370
;  :arith-offset-eqs        1
;  :arith-pivots            620
;  :binary-propagations     16
;  :conflicts               777
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3342
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1243
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            328078)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          519
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      571
;  :arith-conflicts         296
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         370
;  :arith-offset-eqs        1
;  :arith-pivots            620
;  :binary-propagations     16
;  :conflicts               777
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3342
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1244
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            328119)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          519
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      571
;  :arith-conflicts         296
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         370
;  :arith-offset-eqs        1
;  :arith-pivots            620
;  :binary-propagations     16
;  :conflicts               777
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3342
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1245
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            328130)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          521
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      572
;  :arith-conflicts         297
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         371
;  :arith-offset-eqs        1
;  :arith-pivots            623
;  :binary-propagations     16
;  :conflicts               778
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3343
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1246
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            328342)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          521
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      572
;  :arith-conflicts         297
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         371
;  :arith-offset-eqs        1
;  :arith-pivots            623
;  :binary-propagations     16
;  :conflicts               778
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3343
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1247
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            328353)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          521
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      572
;  :arith-conflicts         297
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         371
;  :arith-offset-eqs        1
;  :arith-pivots            623
;  :binary-propagations     16
;  :conflicts               778
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3343
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1248
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            328394)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          521
;  :arith-assert-diseq      109
;  :arith-assert-lower      438
;  :arith-assert-upper      572
;  :arith-conflicts         297
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         371
;  :arith-offset-eqs        1
;  :arith-pivots            623
;  :binary-propagations     16
;  :conflicts               778
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3343
;  :mk-clause               503
;  :num-allocs              5515453
;  :num-checks              1249
;  :propagations            256
;  :quant-instantiations    76
;  :rlimit-count            328405)
(declare-const $k@126@03 $Perm)
(assert ($Perm.isReadVar $k@126@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          523
;  :arith-assert-diseq      110
;  :arith-assert-lower      440
;  :arith-assert-upper      574
;  :arith-conflicts         298
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         372
;  :arith-offset-eqs        1
;  :arith-pivots            624
;  :binary-propagations     16
;  :conflicts               779
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3348
;  :mk-clause               505
;  :num-allocs              5515453
;  :num-checks              1250
;  :propagations            257
;  :quant-instantiations    76
;  :rlimit-count            328759)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@126@03 $Perm.No) (< $Perm.No $k@126@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          523
;  :arith-assert-diseq      110
;  :arith-assert-lower      440
;  :arith-assert-upper      574
;  :arith-conflicts         298
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         372
;  :arith-offset-eqs        1
;  :arith-pivots            624
;  :binary-propagations     16
;  :conflicts               780
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3348
;  :mk-clause               505
;  :num-allocs              5515453
;  :num-checks              1251
;  :propagations            257
;  :quant-instantiations    76
;  :rlimit-count            328809)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          523
;  :arith-assert-diseq      110
;  :arith-assert-lower      440
;  :arith-assert-upper      574
;  :arith-conflicts         298
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         372
;  :arith-offset-eqs        1
;  :arith-pivots            624
;  :binary-propagations     16
;  :conflicts               780
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3348
;  :mk-clause               505
;  :num-allocs              5515453
;  :num-checks              1252
;  :propagations            257
;  :quant-instantiations    76
;  :rlimit-count            328820)
(push) ; 8
(assert (not (not (= (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          523
;  :arith-assert-diseq      110
;  :arith-assert-lower      440
;  :arith-assert-upper      574
;  :arith-conflicts         298
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         372
;  :arith-offset-eqs        1
;  :arith-pivots            624
;  :binary-propagations     16
;  :conflicts               781
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3349
;  :mk-clause               505
;  :num-allocs              5515453
;  :num-checks              1253
;  :propagations            257
;  :quant-instantiations    76
;  :rlimit-count            328912)
(assert (< $k@126@03 (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03)))
(assert (<= $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@126@03)))
(assert (<= (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@126@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@126@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          527
;  :arith-assert-diseq      110
;  :arith-assert-lower      442
;  :arith-assert-upper      576
;  :arith-conflicts         299
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         373
;  :arith-offset-eqs        1
;  :arith-pivots            627
;  :binary-propagations     16
;  :conflicts               782
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3353
;  :mk-clause               505
;  :num-allocs              5515453
;  :num-checks              1254
;  :propagations            257
;  :quant-instantiations    76
;  :rlimit-count            329330)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          527
;  :arith-assert-diseq      110
;  :arith-assert-lower      442
;  :arith-assert-upper      576
;  :arith-conflicts         299
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         373
;  :arith-offset-eqs        1
;  :arith-pivots            627
;  :binary-propagations     16
;  :conflicts               782
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3353
;  :mk-clause               505
;  :num-allocs              5515453
;  :num-checks              1255
;  :propagations            257
;  :quant-instantiations    76
;  :rlimit-count            329341)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          527
;  :arith-assert-diseq      110
;  :arith-assert-lower      442
;  :arith-assert-upper      576
;  :arith-conflicts         299
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         373
;  :arith-offset-eqs        1
;  :arith-pivots            627
;  :binary-propagations     16
;  :conflicts               782
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3353
;  :mk-clause               505
;  :num-allocs              5515453
;  :num-checks              1256
;  :propagations            257
;  :quant-instantiations    76
;  :rlimit-count            329370)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          527
;  :arith-assert-diseq      110
;  :arith-assert-lower      442
;  :arith-assert-upper      576
;  :arith-conflicts         299
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         373
;  :arith-offset-eqs        1
;  :arith-pivots            627
;  :binary-propagations     16
;  :conflicts               782
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3353
;  :mk-clause               505
;  :num-allocs              5515453
;  :num-checks              1257
;  :propagations            257
;  :quant-instantiations    76
;  :rlimit-count            329383)
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          529
;  :arith-assert-diseq      110
;  :arith-assert-lower      442
;  :arith-assert-upper      577
;  :arith-conflicts         300
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         374
;  :arith-offset-eqs        1
;  :arith-pivots            628
;  :binary-propagations     16
;  :conflicts               783
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3354
;  :mk-clause               505
;  :num-allocs              5515453
;  :num-checks              1258
;  :propagations            257
;  :quant-instantiations    76
;  :rlimit-count            329588)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          529
;  :arith-assert-diseq      110
;  :arith-assert-lower      442
;  :arith-assert-upper      577
;  :arith-conflicts         300
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         374
;  :arith-offset-eqs        1
;  :arith-pivots            628
;  :binary-propagations     16
;  :conflicts               783
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3354
;  :mk-clause               505
;  :num-allocs              5515453
;  :num-checks              1259
;  :propagations            257
;  :quant-instantiations    76
;  :rlimit-count            329599)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7022
;  :arith-add-rows          529
;  :arith-assert-diseq      110
;  :arith-assert-lower      442
;  :arith-assert-upper      577
;  :arith-conflicts         300
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         374
;  :arith-offset-eqs        1
;  :arith-pivots            628
;  :binary-propagations     16
;  :conflicts               783
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1818
;  :datatype-occurs-check   257
;  :datatype-splits         1298
;  :decisions               1732
;  :del-clause              482
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3354
;  :mk-clause               505
;  :num-allocs              5515453
;  :num-checks              1260
;  :propagations            257
;  :quant-instantiations    76
;  :rlimit-count            329628)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7324
;  :arith-add-rows          529
;  :arith-assert-diseq      110
;  :arith-assert-lower      446
;  :arith-assert-upper      581
;  :arith-conflicts         300
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         378
;  :arith-offset-eqs        1
;  :arith-pivots            636
;  :binary-propagations     16
;  :conflicts               784
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 1911
;  :datatype-occurs-check   269
;  :datatype-splits         1371
;  :decisions               1819
;  :del-clause              487
;  :final-checks            101
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3444
;  :mk-clause               510
;  :num-allocs              5515453
;  :num-checks              1261
;  :propagations            260
;  :quant-instantiations    76
;  :rlimit-count            331838
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 8
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7710
;  :arith-add-rows          531
;  :arith-assert-diseq      110
;  :arith-assert-lower      450
;  :arith-assert-upper      585
;  :arith-conflicts         300
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         382
;  :arith-offset-eqs        1
;  :arith-pivots            644
;  :binary-propagations     16
;  :conflicts               784
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3533
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1264
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            334726)
(declare-const $t@127@03 $Ref)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7710
;  :arith-add-rows          531
;  :arith-assert-diseq      110
;  :arith-assert-lower      450
;  :arith-assert-upper      585
;  :arith-conflicts         300
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         382
;  :arith-offset-eqs        1
;  :arith-pivots            644
;  :binary-propagations     16
;  :conflicts               785
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3533
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1265
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            334798)
(declare-const $t@128@03 $Ref)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7710
;  :arith-add-rows          531
;  :arith-assert-diseq      110
;  :arith-assert-lower      450
;  :arith-assert-upper      585
;  :arith-conflicts         300
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         382
;  :arith-offset-eqs        1
;  :arith-pivots            644
;  :binary-propagations     16
;  :conflicts               786
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3533
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1266
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            334870)
(declare-const $t@129@03 $Ref)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7710
;  :arith-add-rows          531
;  :arith-assert-diseq      110
;  :arith-assert-lower      450
;  :arith-assert-upper      585
;  :arith-conflicts         300
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         382
;  :arith-offset-eqs        1
;  :arith-pivots            644
;  :binary-propagations     16
;  :conflicts               787
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3534
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1267
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            334950)
(declare-const $t@130@03 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@123@03))
    (= $t@127@03 $t@84@03))
  (implies
    (< $Perm.No $k@68@03)
    (=
      $t@127@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@126@03))
    (= $t@128@03 $t@52@03))
  (implies
    (< $Perm.No $k@66@03)
    (=
      $t@128@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))))))
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@125@03))
    (= $t@129@03 $t@58@03))
  (implies
    (< $Perm.No $k@65@03)
    (=
      $t@129@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@67@03)
    (=
      $t@130@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))
    (= $t@130@03 $t@54@03))))
(assert (<=
  $Perm.No
  (+
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@123@03)
    $k@68@03)))
(assert (<=
  (+
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@123@03)
    $k@68@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@123@03)
      $k@68@03))
  (not (= diz@6@03 $Ref.null))))
(assert (<=
  $Perm.No
  (+ (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@126@03) $k@66@03)))
(assert (<=
  (+ (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@126@03) $k@66@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+ (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@126@03) $k@66@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (<=
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@125@03)
    $k@65@03)))
(assert (<=
  (+
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@125@03)
    $k@65@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@125@03)
      $k@65@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (<= $Perm.No (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(assert (<= (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          540
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      589
;  :arith-conflicts         300
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         382
;  :arith-offset-eqs        1
;  :arith-pivots            644
;  :binary-propagations     16
;  :conflicts               788
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3550
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1268
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            336585)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          542
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      590
;  :arith-conflicts         301
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         383
;  :arith-offset-eqs        1
;  :arith-pivots            647
;  :binary-propagations     16
;  :conflicts               789
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3551
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1269
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            336798)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          542
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      590
;  :arith-conflicts         301
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         383
;  :arith-offset-eqs        1
;  :arith-pivots            647
;  :binary-propagations     16
;  :conflicts               789
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3551
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1270
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            336809)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          542
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      590
;  :arith-conflicts         301
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         383
;  :arith-offset-eqs        1
;  :arith-pivots            647
;  :binary-propagations     16
;  :conflicts               789
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3551
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1271
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            336838)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          542
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      590
;  :arith-conflicts         301
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         383
;  :arith-offset-eqs        1
;  :arith-pivots            647
;  :binary-propagations     16
;  :conflicts               790
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3552
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1272
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            337098)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          544
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      591
;  :arith-conflicts         302
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         384
;  :arith-offset-eqs        1
;  :arith-pivots            648
;  :binary-propagations     16
;  :conflicts               791
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3553
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1273
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            337304)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          544
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      591
;  :arith-conflicts         302
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         384
;  :arith-offset-eqs        1
;  :arith-pivots            648
;  :binary-propagations     16
;  :conflicts               791
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3553
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1274
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            337315)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          544
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      591
;  :arith-conflicts         302
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         384
;  :arith-offset-eqs        1
;  :arith-pivots            648
;  :binary-propagations     16
;  :conflicts               791
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3553
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1275
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            337344)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          544
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      591
;  :arith-conflicts         302
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         384
;  :arith-offset-eqs        1
;  :arith-pivots            648
;  :binary-propagations     16
;  :conflicts               792
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3554
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1276
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            337604)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          546
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      592
;  :arith-conflicts         303
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         385
;  :arith-offset-eqs        1
;  :arith-pivots            651
;  :binary-propagations     16
;  :conflicts               793
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3555
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1277
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            337817)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          546
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      592
;  :arith-conflicts         303
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         385
;  :arith-offset-eqs        1
;  :arith-pivots            651
;  :binary-propagations     16
;  :conflicts               793
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3555
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1278
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            337828)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          546
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      592
;  :arith-conflicts         303
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         385
;  :arith-offset-eqs        1
;  :arith-pivots            651
;  :binary-propagations     16
;  :conflicts               793
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3555
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1279
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            337857)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          546
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      592
;  :arith-conflicts         303
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         385
;  :arith-offset-eqs        1
;  :arith-pivots            651
;  :binary-propagations     16
;  :conflicts               794
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3556
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1280
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            338117)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          548
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      593
;  :arith-conflicts         304
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         386
;  :arith-offset-eqs        1
;  :arith-pivots            652
;  :binary-propagations     16
;  :conflicts               795
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3557
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1281
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            338323)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          548
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      593
;  :arith-conflicts         304
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         386
;  :arith-offset-eqs        1
;  :arith-pivots            652
;  :binary-propagations     16
;  :conflicts               795
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3557
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1282
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            338334)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          548
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      593
;  :arith-conflicts         304
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         386
;  :arith-offset-eqs        1
;  :arith-pivots            652
;  :binary-propagations     16
;  :conflicts               795
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3557
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1283
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            338363)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          548
;  :arith-assert-diseq      110
;  :arith-assert-lower      454
;  :arith-assert-upper      593
;  :arith-conflicts         304
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         386
;  :arith-offset-eqs        1
;  :arith-pivots            652
;  :binary-propagations     16
;  :conflicts               796
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3558
;  :mk-clause               517
;  :num-allocs              5515453
;  :num-checks              1284
;  :propagations            268
;  :quant-instantiations    76
;  :rlimit-count            338623)
(declare-const $k@131@03 $Perm)
(assert ($Perm.isReadVar $k@131@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          550
;  :arith-assert-diseq      111
;  :arith-assert-lower      456
;  :arith-assert-upper      595
;  :arith-conflicts         305
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         387
;  :arith-offset-eqs        1
;  :arith-pivots            655
;  :binary-propagations     16
;  :conflicts               797
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3563
;  :mk-clause               519
;  :num-allocs              5515453
;  :num-checks              1285
;  :propagations            269
;  :quant-instantiations    76
;  :rlimit-count            338985)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@131@03 $Perm.No) (< $Perm.No $k@131@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          550
;  :arith-assert-diseq      111
;  :arith-assert-lower      456
;  :arith-assert-upper      595
;  :arith-conflicts         305
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         387
;  :arith-offset-eqs        1
;  :arith-pivots            655
;  :binary-propagations     16
;  :conflicts               798
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3563
;  :mk-clause               519
;  :num-allocs              5515453
;  :num-checks              1286
;  :propagations            269
;  :quant-instantiations    76
;  :rlimit-count            339035)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          550
;  :arith-assert-diseq      111
;  :arith-assert-lower      456
;  :arith-assert-upper      595
;  :arith-conflicts         305
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         387
;  :arith-offset-eqs        1
;  :arith-pivots            655
;  :binary-propagations     16
;  :conflicts               799
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              503
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3564
;  :mk-clause               519
;  :num-allocs              5515453
;  :num-checks              1287
;  :propagations            269
;  :quant-instantiations    76
;  :rlimit-count            339120)
(push) ; 8
(assert (not (not (= (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          553
;  :arith-assert-diseq      111
;  :arith-assert-lower      456
;  :arith-assert-upper      596
;  :arith-conflicts         306
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         387
;  :arith-offset-eqs        1
;  :arith-pivots            658
;  :binary-propagations     16
;  :conflicts               800
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3566
;  :mk-clause               521
;  :num-allocs              5515453
;  :num-checks              1288
;  :propagations            270
;  :quant-instantiations    76
;  :rlimit-count            339296)
(assert (< $k@131@03 (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(assert (<=
  $Perm.No
  (- (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $k@131@03)))
(assert (<=
  (- (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $k@131@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ $k@67@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)) $k@131@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          556
;  :arith-assert-diseq      111
;  :arith-assert-lower      458
;  :arith-assert-upper      598
;  :arith-conflicts         307
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        1
;  :arith-pivots            659
;  :binary-propagations     16
;  :conflicts               801
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3570
;  :mk-clause               521
;  :num-allocs              5515453
;  :num-checks              1289
;  :propagations            270
;  :quant-instantiations    76
;  :rlimit-count            339711)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          556
;  :arith-assert-diseq      111
;  :arith-assert-lower      458
;  :arith-assert-upper      598
;  :arith-conflicts         307
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        1
;  :arith-pivots            659
;  :binary-propagations     16
;  :conflicts               801
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3570
;  :mk-clause               521
;  :num-allocs              5515453
;  :num-checks              1290
;  :propagations            270
;  :quant-instantiations    76
;  :rlimit-count            339722)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          556
;  :arith-assert-diseq      111
;  :arith-assert-lower      458
;  :arith-assert-upper      598
;  :arith-conflicts         307
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        1
;  :arith-pivots            659
;  :binary-propagations     16
;  :conflicts               801
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3570
;  :mk-clause               521
;  :num-allocs              5515453
;  :num-checks              1291
;  :propagations            270
;  :quant-instantiations    76
;  :rlimit-count            339751)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          556
;  :arith-assert-diseq      111
;  :arith-assert-lower      458
;  :arith-assert-upper      598
;  :arith-conflicts         307
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        1
;  :arith-pivots            659
;  :binary-propagations     16
;  :conflicts               801
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3570
;  :mk-clause               521
;  :num-allocs              5515453
;  :num-checks              1292
;  :propagations            270
;  :quant-instantiations    76
;  :rlimit-count            339764)
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          558
;  :arith-assert-diseq      111
;  :arith-assert-lower      458
;  :arith-assert-upper      599
;  :arith-conflicts         308
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         389
;  :arith-offset-eqs        1
;  :arith-pivots            662
;  :binary-propagations     16
;  :conflicts               802
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3571
;  :mk-clause               521
;  :num-allocs              5515453
;  :num-checks              1293
;  :propagations            270
;  :quant-instantiations    76
;  :rlimit-count            339977)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          558
;  :arith-assert-diseq      111
;  :arith-assert-lower      458
;  :arith-assert-upper      599
;  :arith-conflicts         308
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         389
;  :arith-offset-eqs        1
;  :arith-pivots            662
;  :binary-propagations     16
;  :conflicts               802
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3571
;  :mk-clause               521
;  :num-allocs              5515453
;  :num-checks              1294
;  :propagations            270
;  :quant-instantiations    76
;  :rlimit-count            339988)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          558
;  :arith-assert-diseq      111
;  :arith-assert-lower      458
;  :arith-assert-upper      599
;  :arith-conflicts         308
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         389
;  :arith-offset-eqs        1
;  :arith-pivots            662
;  :binary-propagations     16
;  :conflicts               802
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3571
;  :mk-clause               521
;  :num-allocs              5515453
;  :num-checks              1295
;  :propagations            270
;  :quant-instantiations    76
;  :rlimit-count            340017)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
  $t@54@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          558
;  :arith-assert-diseq      111
;  :arith-assert-lower      458
;  :arith-assert-upper      599
;  :arith-conflicts         308
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         389
;  :arith-offset-eqs        1
;  :arith-pivots            662
;  :binary-propagations     16
;  :conflicts               803
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3572
;  :mk-clause               521
;  :num-allocs              5515453
;  :num-checks              1296
;  :propagations            270
;  :quant-instantiations    76
;  :rlimit-count            340347)
(declare-const $k@132@03 $Perm)
(assert ($Perm.isReadVar $k@132@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          560
;  :arith-assert-diseq      112
;  :arith-assert-lower      460
;  :arith-assert-upper      601
;  :arith-conflicts         309
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         390
;  :arith-offset-eqs        1
;  :arith-pivots            663
;  :binary-propagations     16
;  :conflicts               804
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3577
;  :mk-clause               523
;  :num-allocs              5515453
;  :num-checks              1297
;  :propagations            271
;  :quant-instantiations    76
;  :rlimit-count            340701)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          560
;  :arith-assert-diseq      112
;  :arith-assert-lower      460
;  :arith-assert-upper      601
;  :arith-conflicts         309
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         390
;  :arith-offset-eqs        1
;  :arith-pivots            663
;  :binary-propagations     16
;  :conflicts               804
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3577
;  :mk-clause               523
;  :num-allocs              5515453
;  :num-checks              1298
;  :propagations            271
;  :quant-instantiations    76
;  :rlimit-count            340712)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          560
;  :arith-assert-diseq      112
;  :arith-assert-lower      460
;  :arith-assert-upper      601
;  :arith-conflicts         309
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         390
;  :arith-offset-eqs        1
;  :arith-pivots            663
;  :binary-propagations     16
;  :conflicts               804
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3577
;  :mk-clause               523
;  :num-allocs              5515453
;  :num-checks              1299
;  :propagations            271
;  :quant-instantiations    76
;  :rlimit-count            340753)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@132@03 $Perm.No) (< $Perm.No $k@132@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          560
;  :arith-assert-diseq      112
;  :arith-assert-lower      460
;  :arith-assert-upper      601
;  :arith-conflicts         309
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         390
;  :arith-offset-eqs        1
;  :arith-pivots            663
;  :binary-propagations     16
;  :conflicts               805
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3577
;  :mk-clause               523
;  :num-allocs              5515453
;  :num-checks              1300
;  :propagations            271
;  :quant-instantiations    76
;  :rlimit-count            340803)
(set-option :timeout 10)
(push) ; 8
(assert (not (= diz@6@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          560
;  :arith-assert-diseq      112
;  :arith-assert-lower      460
;  :arith-assert-upper      601
;  :arith-conflicts         309
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         390
;  :arith-offset-eqs        1
;  :arith-pivots            663
;  :binary-propagations     16
;  :conflicts               805
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              505
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3577
;  :mk-clause               523
;  :num-allocs              5515453
;  :num-checks              1301
;  :propagations            271
;  :quant-instantiations    76
;  :rlimit-count            340814)
(push) ; 8
(assert (not (not
  (=
    (+
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@123@03)
      $k@68@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7724
;  :arith-add-rows          565
;  :arith-assert-diseq      112
;  :arith-assert-lower      460
;  :arith-assert-upper      602
;  :arith-conflicts         310
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         390
;  :arith-offset-eqs        1
;  :arith-pivots            665
;  :binary-propagations     16
;  :conflicts               806
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              507
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3579
;  :mk-clause               525
;  :num-allocs              5515453
;  :num-checks              1302
;  :propagations            272
;  :quant-instantiations    76
;  :rlimit-count            341103)
(assert (<
  $k@132@03
  (+
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@123@03)
    $k@68@03)))
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@123@03)
      $k@68@03)
    $k@132@03)))
(assert (<=
  (-
    (+
      (-
        (+
          (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
          (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
        $k@123@03)
      $k@68@03)
    $k@132@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
            (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
          $k@123@03)
        $k@68@03)
      $k@132@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7724
;  :arith-add-rows          574
;  :arith-assert-diseq      112
;  :arith-assert-lower      462
;  :arith-assert-upper      604
;  :arith-conflicts         311
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         391
;  :arith-offset-eqs        1
;  :arith-pivots            670
;  :binary-propagations     16
;  :conflicts               807
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              507
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3583
;  :mk-clause               525
;  :num-allocs              5515453
;  :num-checks              1303
;  :propagations            272
;  :quant-instantiations    76
;  :rlimit-count            341677)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7724
;  :arith-add-rows          574
;  :arith-assert-diseq      112
;  :arith-assert-lower      462
;  :arith-assert-upper      604
;  :arith-conflicts         311
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         391
;  :arith-offset-eqs        1
;  :arith-pivots            670
;  :binary-propagations     16
;  :conflicts               807
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              507
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3583
;  :mk-clause               525
;  :num-allocs              5515453
;  :num-checks              1304
;  :propagations            272
;  :quant-instantiations    76
;  :rlimit-count            341688)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7724
;  :arith-add-rows          574
;  :arith-assert-diseq      112
;  :arith-assert-lower      462
;  :arith-assert-upper      604
;  :arith-conflicts         311
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         391
;  :arith-offset-eqs        1
;  :arith-pivots            670
;  :binary-propagations     16
;  :conflicts               807
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              507
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3583
;  :mk-clause               525
;  :num-allocs              5515453
;  :num-checks              1305
;  :propagations            272
;  :quant-instantiations    76
;  :rlimit-count            341729)
(push) ; 8
(assert (not (= diz@6@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7724
;  :arith-add-rows          574
;  :arith-assert-diseq      112
;  :arith-assert-lower      462
;  :arith-assert-upper      604
;  :arith-conflicts         311
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         391
;  :arith-offset-eqs        1
;  :arith-pivots            670
;  :binary-propagations     16
;  :conflicts               807
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              507
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3583
;  :mk-clause               525
;  :num-allocs              5515453
;  :num-checks              1306
;  :propagations            272
;  :quant-instantiations    76
;  :rlimit-count            341740)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7724
;  :arith-add-rows          576
;  :arith-assert-diseq      112
;  :arith-assert-lower      462
;  :arith-assert-upper      605
;  :arith-conflicts         312
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         392
;  :arith-offset-eqs        1
;  :arith-pivots            671
;  :binary-propagations     16
;  :conflicts               808
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              507
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3584
;  :mk-clause               525
;  :num-allocs              5515453
;  :num-checks              1307
;  :propagations            272
;  :quant-instantiations    76
;  :rlimit-count            341945)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7724
;  :arith-add-rows          578
;  :arith-assert-diseq      112
;  :arith-assert-lower      462
;  :arith-assert-upper      606
;  :arith-conflicts         313
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         393
;  :arith-offset-eqs        1
;  :arith-pivots            674
;  :binary-propagations     16
;  :conflicts               809
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              507
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3585
;  :mk-clause               525
;  :num-allocs              5515453
;  :num-checks              1308
;  :propagations            272
;  :quant-instantiations    76
;  :rlimit-count            342157)
(declare-const $k@133@03 $Perm)
(assert ($Perm.isReadVar $k@133@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7724
;  :arith-add-rows          580
;  :arith-assert-diseq      113
;  :arith-assert-lower      464
;  :arith-assert-upper      608
;  :arith-conflicts         314
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         394
;  :arith-offset-eqs        1
;  :arith-pivots            675
;  :binary-propagations     16
;  :conflicts               810
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              507
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3590
;  :mk-clause               527
;  :num-allocs              5515453
;  :num-checks              1309
;  :propagations            273
;  :quant-instantiations    76
;  :rlimit-count            342511)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@133@03 $Perm.No) (< $Perm.No $k@133@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7724
;  :arith-add-rows          580
;  :arith-assert-diseq      113
;  :arith-assert-lower      464
;  :arith-assert-upper      608
;  :arith-conflicts         314
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         394
;  :arith-offset-eqs        1
;  :arith-pivots            675
;  :binary-propagations     16
;  :conflicts               811
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              507
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3590
;  :mk-clause               527
;  :num-allocs              5515453
;  :num-checks              1310
;  :propagations            273
;  :quant-instantiations    76
;  :rlimit-count            342561)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7724
;  :arith-add-rows          580
;  :arith-assert-diseq      113
;  :arith-assert-lower      464
;  :arith-assert-upper      608
;  :arith-conflicts         314
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         394
;  :arith-offset-eqs        1
;  :arith-pivots            675
;  :binary-propagations     16
;  :conflicts               811
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              507
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3590
;  :mk-clause               527
;  :num-allocs              5515453
;  :num-checks              1311
;  :propagations            273
;  :quant-instantiations    76
;  :rlimit-count            342572)
(push) ; 8
(assert (not (not
  (=
    (+
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@125@03)
      $k@65@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7725
;  :arith-add-rows          581
;  :arith-assert-diseq      113
;  :arith-assert-lower      464
;  :arith-assert-upper      609
;  :arith-conflicts         315
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         394
;  :arith-offset-eqs        1
;  :arith-pivots            677
;  :binary-propagations     16
;  :conflicts               812
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              509
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3592
;  :mk-clause               529
;  :num-allocs              5515453
;  :num-checks              1312
;  :propagations            274
;  :quant-instantiations    76
;  :rlimit-count            342749)
(assert (<
  $k@133@03
  (+
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@125@03)
    $k@65@03)))
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@125@03)
      $k@65@03)
    $k@133@03)))
(assert (<=
  (-
    (+
      (-
        (-
          (+
            (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
            $k@57@03)
          $k@71@03)
        $k@125@03)
      $k@65@03)
    $k@133@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (-
            (+
              (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03)
              $k@57@03)
            $k@71@03)
          $k@125@03)
        $k@65@03)
      $k@133@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7725
;  :arith-add-rows          587
;  :arith-assert-diseq      113
;  :arith-assert-lower      466
;  :arith-assert-upper      611
;  :arith-conflicts         316
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         395
;  :arith-offset-eqs        1
;  :arith-pivots            680
;  :binary-propagations     16
;  :conflicts               813
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              509
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3596
;  :mk-clause               529
;  :num-allocs              5515453
;  :num-checks              1313
;  :propagations            274
;  :quant-instantiations    76
;  :rlimit-count            343217)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7725
;  :arith-add-rows          587
;  :arith-assert-diseq      113
;  :arith-assert-lower      466
;  :arith-assert-upper      611
;  :arith-conflicts         316
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         395
;  :arith-offset-eqs        1
;  :arith-pivots            680
;  :binary-propagations     16
;  :conflicts               813
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              509
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3596
;  :mk-clause               529
;  :num-allocs              5515453
;  :num-checks              1314
;  :propagations            274
;  :quant-instantiations    76
;  :rlimit-count            343228)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7725
;  :arith-add-rows          587
;  :arith-assert-diseq      113
;  :arith-assert-lower      466
;  :arith-assert-upper      611
;  :arith-conflicts         316
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         395
;  :arith-offset-eqs        1
;  :arith-pivots            680
;  :binary-propagations     16
;  :conflicts               813
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              509
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3596
;  :mk-clause               529
;  :num-allocs              5515453
;  :num-checks              1315
;  :propagations            274
;  :quant-instantiations    76
;  :rlimit-count            343269)
; [exec]
; label __return_set_bit
; [exec]
; sys__result := sys__local__result__12
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__22: Int :: { diz.ALU_m.Main_process_state[i__22] } 0 <= i__22 && i__22 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__22] == -1 || 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && 0 <= diz.ALU_m.Main_alu.ALU_RESULT && diz.ALU_m.Main_alu.ALU_RESULT <= 16 && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_init, 1 / 2) && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_mon.Monitor_init, 1 / 2) && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu == diz
(declare-const $k@134@03 $Perm)
(assert ($Perm.isReadVar $k@134@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@134@03 $Perm.No) (< $Perm.No $k@134@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7725
;  :arith-add-rows          587
;  :arith-assert-diseq      114
;  :arith-assert-lower      468
;  :arith-assert-upper      612
;  :arith-conflicts         316
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         395
;  :arith-offset-eqs        1
;  :arith-pivots            680
;  :binary-propagations     16
;  :conflicts               814
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              509
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3600
;  :mk-clause               531
;  :num-allocs              5515453
;  :num-checks              1316
;  :propagations            275
;  :quant-instantiations    76
;  :rlimit-count            343468)
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (=
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          589
;  :arith-assert-diseq      114
;  :arith-assert-lower      468
;  :arith-assert-upper      613
;  :arith-conflicts         317
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         395
;  :arith-offset-eqs        1
;  :arith-pivots            681
;  :binary-propagations     16
;  :conflicts               815
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3602
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1317
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            343673)
(assert (<
  $k@134@03
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))))
(assert (<=
  $Perm.No
  (-
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $k@134@03)))
(assert (<=
  (-
    (+
      (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
      (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
    $k@134@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
        (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03))
      $k@134@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          594
;  :arith-assert-diseq      114
;  :arith-assert-lower      470
;  :arith-assert-upper      615
;  :arith-conflicts         318
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         396
;  :arith-offset-eqs        1
;  :arith-pivots            684
;  :binary-propagations     16
;  :conflicts               816
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3606
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1318
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            344139)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          596
;  :arith-assert-diseq      114
;  :arith-assert-lower      470
;  :arith-assert-upper      616
;  :arith-conflicts         319
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         397
;  :arith-offset-eqs        1
;  :arith-pivots            685
;  :binary-propagations     16
;  :conflicts               817
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3607
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1319
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            344345)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          596
;  :arith-assert-diseq      114
;  :arith-assert-lower      470
;  :arith-assert-upper      616
;  :arith-conflicts         319
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         397
;  :arith-offset-eqs        1
;  :arith-pivots            685
;  :binary-propagations     16
;  :conflicts               818
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3608
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1320
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            344430)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          598
;  :arith-assert-diseq      114
;  :arith-assert-lower      470
;  :arith-assert-upper      617
;  :arith-conflicts         320
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         398
;  :arith-offset-eqs        1
;  :arith-pivots            688
;  :binary-propagations     16
;  :conflicts               819
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3609
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1321
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            344643)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          598
;  :arith-assert-diseq      114
;  :arith-assert-lower      470
;  :arith-assert-upper      617
;  :arith-conflicts         320
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         398
;  :arith-offset-eqs        1
;  :arith-pivots            688
;  :binary-propagations     16
;  :conflicts               820
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3610
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1322
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            344728)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          600
;  :arith-assert-diseq      114
;  :arith-assert-lower      470
;  :arith-assert-upper      618
;  :arith-conflicts         321
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         399
;  :arith-offset-eqs        1
;  :arith-pivots            689
;  :binary-propagations     16
;  :conflicts               821
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3611
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1323
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            344934)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          600
;  :arith-assert-diseq      114
;  :arith-assert-lower      470
;  :arith-assert-upper      618
;  :arith-conflicts         321
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         399
;  :arith-offset-eqs        1
;  :arith-pivots            689
;  :binary-propagations     16
;  :conflicts               822
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3612
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1324
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            345019)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          602
;  :arith-assert-diseq      114
;  :arith-assert-lower      470
;  :arith-assert-upper      619
;  :arith-conflicts         322
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        1
;  :arith-pivots            692
;  :binary-propagations     16
;  :conflicts               823
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3613
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1325
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            345232)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          602
;  :arith-assert-diseq      114
;  :arith-assert-lower      470
;  :arith-assert-upper      619
;  :arith-conflicts         322
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        1
;  :arith-pivots            692
;  :binary-propagations     16
;  :conflicts               824
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3614
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1326
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            345317)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          604
;  :arith-assert-diseq      114
;  :arith-assert-lower      470
;  :arith-assert-upper      620
;  :arith-conflicts         323
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         401
;  :arith-offset-eqs        1
;  :arith-pivots            693
;  :binary-propagations     16
;  :conflicts               825
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3615
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1327
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            345523)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          604
;  :arith-assert-diseq      114
;  :arith-assert-lower      470
;  :arith-assert-upper      620
;  :arith-conflicts         323
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         401
;  :arith-offset-eqs        1
;  :arith-pivots            693
;  :binary-propagations     16
;  :conflicts               826
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3616
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1328
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            345608)
; [eval] (forall i__22: Int :: { diz.ALU_m.Main_process_state[i__22] } 0 <= i__22 && i__22 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__22] == -1 || 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|)
(declare-const i__22@135@03 Int)
(push) ; 8
; [eval] 0 <= i__22 && i__22 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__22] == -1 || 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__22 && i__22 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__22
(push) ; 9
; [then-branch: 54 | 0 <= i__22@135@03 | live]
; [else-branch: 54 | !(0 <= i__22@135@03) | live]
(push) ; 10
; [then-branch: 54 | 0 <= i__22@135@03]
(assert (<= 0 i__22@135@03))
; [eval] i__22 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          606
;  :arith-assert-diseq      114
;  :arith-assert-lower      471
;  :arith-assert-upper      621
;  :arith-conflicts         324
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         402
;  :arith-offset-eqs        1
;  :arith-pivots            696
;  :binary-propagations     16
;  :conflicts               827
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3618
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1329
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            345873)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7726
;  :arith-add-rows          606
;  :arith-assert-diseq      114
;  :arith-assert-lower      471
;  :arith-assert-upper      621
;  :arith-conflicts         324
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         402
;  :arith-offset-eqs        1
;  :arith-pivots            696
;  :binary-propagations     16
;  :conflicts               828
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3619
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1330
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            345958)
(pop) ; 10
(push) ; 10
; [else-branch: 54 | !(0 <= i__22@135@03)]
(assert (not (<= 0 i__22@135@03)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 55 | i__22@135@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__22@135@03 | live]
; [else-branch: 55 | !(i__22@135@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__22@135@03) | live]
(push) ; 10
; [then-branch: 55 | i__22@135@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__22@135@03]
(assert (and
  (<
    i__22@135@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
  (<= 0 i__22@135@03)))
; [eval] diz.ALU_m.Main_process_state[i__22] == -1 || 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__22] == -1
; [eval] diz.ALU_m.Main_process_state[i__22]
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          608
;  :arith-assert-diseq      114
;  :arith-assert-lower      472
;  :arith-assert-upper      623
;  :arith-conflicts         325
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         404
;  :arith-offset-eqs        1
;  :arith-pivots            697
;  :binary-propagations     16
;  :conflicts               829
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3622
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1331
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            346277)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          608
;  :arith-assert-diseq      114
;  :arith-assert-lower      472
;  :arith-assert-upper      623
;  :arith-conflicts         325
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         404
;  :arith-offset-eqs        1
;  :arith-pivots            697
;  :binary-propagations     16
;  :conflicts               830
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3623
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1332
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            346362)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__22@135@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          608
;  :arith-assert-diseq      114
;  :arith-assert-lower      472
;  :arith-assert-upper      623
;  :arith-conflicts         325
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         404
;  :arith-offset-eqs        1
;  :arith-pivots            697
;  :binary-propagations     16
;  :conflicts               830
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3623
;  :mk-clause               533
;  :num-allocs              5515453
;  :num-checks              1333
;  :propagations            276
;  :quant-instantiations    76
;  :rlimit-count            346371)
; [eval] -1
(push) ; 11
; [then-branch: 56 | First:(Second:(Second:(Second:($t@62@03))))[i__22@135@03] == -1 | live]
; [else-branch: 56 | First:(Second:(Second:(Second:($t@62@03))))[i__22@135@03] != -1 | live]
(push) ; 12
; [then-branch: 56 | First:(Second:(Second:(Second:($t@62@03))))[i__22@135@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__22@135@03)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 56 | First:(Second:(Second:(Second:($t@62@03))))[i__22@135@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__22@135@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__22] && diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__22]
; [eval] diz.ALU_m.Main_process_state[i__22]
(set-option :timeout 10)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7729
;  :arith-add-rows          610
;  :arith-assert-diseq      116
;  :arith-assert-lower      475
;  :arith-assert-upper      625
;  :arith-conflicts         326
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         405
;  :arith-offset-eqs        1
;  :arith-pivots            700
;  :binary-propagations     16
;  :conflicts               831
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3631
;  :mk-clause               546
;  :num-allocs              5515453
;  :num-checks              1334
;  :propagations            281
;  :quant-instantiations    78
;  :rlimit-count            346816)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7729
;  :arith-add-rows          610
;  :arith-assert-diseq      116
;  :arith-assert-lower      475
;  :arith-assert-upper      625
;  :arith-conflicts         326
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         405
;  :arith-offset-eqs        1
;  :arith-pivots            700
;  :binary-propagations     16
;  :conflicts               832
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3632
;  :mk-clause               546
;  :num-allocs              5515453
;  :num-checks              1335
;  :propagations            281
;  :quant-instantiations    78
;  :rlimit-count            346901)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__22@135@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7729
;  :arith-add-rows          610
;  :arith-assert-diseq      116
;  :arith-assert-lower      475
;  :arith-assert-upper      625
;  :arith-conflicts         326
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         405
;  :arith-offset-eqs        1
;  :arith-pivots            700
;  :binary-propagations     16
;  :conflicts               832
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3632
;  :mk-clause               546
;  :num-allocs              5515453
;  :num-checks              1336
;  :propagations            281
;  :quant-instantiations    78
;  :rlimit-count            346910)
(push) ; 13
; [then-branch: 57 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__22@135@03] | live]
; [else-branch: 57 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__22@135@03]) | live]
(push) ; 14
; [then-branch: 57 | 0 <= First:(Second:(Second:(Second:($t@62@03))))[i__22@135@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__22@135@03)))
; [eval] diz.ALU_m.Main_process_state[i__22] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__22]
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          612
;  :arith-assert-diseq      116
;  :arith-assert-lower      477
;  :arith-assert-upper      627
;  :arith-conflicts         327
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         407
;  :arith-offset-eqs        1
;  :arith-pivots            702
;  :binary-propagations     16
;  :conflicts               833
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3637
;  :mk-clause               546
;  :num-allocs              5515453
;  :num-checks              1337
;  :propagations            281
;  :quant-instantiations    78
;  :rlimit-count            347244)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          612
;  :arith-assert-diseq      116
;  :arith-assert-lower      477
;  :arith-assert-upper      627
;  :arith-conflicts         327
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         407
;  :arith-offset-eqs        1
;  :arith-pivots            702
;  :binary-propagations     16
;  :conflicts               834
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3638
;  :mk-clause               546
;  :num-allocs              5515453
;  :num-checks              1338
;  :propagations            281
;  :quant-instantiations    78
;  :rlimit-count            347329)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i__22@135@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          612
;  :arith-assert-diseq      116
;  :arith-assert-lower      477
;  :arith-assert-upper      627
;  :arith-conflicts         327
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         407
;  :arith-offset-eqs        1
;  :arith-pivots            702
;  :binary-propagations     16
;  :conflicts               834
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3638
;  :mk-clause               546
;  :num-allocs              5515453
;  :num-checks              1339
;  :propagations            281
;  :quant-instantiations    78
;  :rlimit-count            347338)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          614
;  :arith-assert-diseq      116
;  :arith-assert-lower      477
;  :arith-assert-upper      628
;  :arith-conflicts         328
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         408
;  :arith-offset-eqs        1
;  :arith-pivots            705
;  :binary-propagations     16
;  :conflicts               835
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3639
;  :mk-clause               546
;  :num-allocs              5515453
;  :num-checks              1340
;  :propagations            281
;  :quant-instantiations    78
;  :rlimit-count            347551)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          614
;  :arith-assert-diseq      116
;  :arith-assert-lower      477
;  :arith-assert-upper      628
;  :arith-conflicts         328
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         408
;  :arith-offset-eqs        1
;  :arith-pivots            705
;  :binary-propagations     16
;  :conflicts               836
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              511
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3640
;  :mk-clause               546
;  :num-allocs              5515453
;  :num-checks              1341
;  :propagations            281
;  :quant-instantiations    78
;  :rlimit-count            347636)
(pop) ; 14
(push) ; 14
; [else-branch: 57 | !(0 <= First:(Second:(Second:(Second:($t@62@03))))[i__22@135@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
      i__22@135@03))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 55 | !(i__22@135@03 < |First:(Second:(Second:(Second:($t@62@03))))| && 0 <= i__22@135@03)]
(assert (not
  (and
    (<
      i__22@135@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
    (<= 0 i__22@135@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 8
(assert (not (forall ((i__22@135@03 Int)) (!
  (implies
    (and
      (<
        i__22@135@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__22@135@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__22@135@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__22@135@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__22@135@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__22@135@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          614
;  :arith-assert-diseq      118
;  :arith-assert-lower      478
;  :arith-assert-upper      629
;  :arith-conflicts         328
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         409
;  :arith-offset-eqs        1
;  :arith-pivots            706
;  :binary-propagations     16
;  :conflicts               837
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3648
;  :mk-clause               560
;  :num-allocs              5515453
;  :num-checks              1342
;  :propagations            283
;  :quant-instantiations    80
;  :rlimit-count            348110)
(assert (forall ((i__22@135@03 Int)) (!
  (implies
    (and
      (<
        i__22@135@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))
      (<= 0 i__22@135@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
          i__22@135@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__22@135@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
            i__22@135@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))
    i__22@135@03))
  :qid |prog.l<no position>|)))
(declare-const $k@136@03 $Perm)
(assert ($Perm.isReadVar $k@136@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          616
;  :arith-assert-diseq      119
;  :arith-assert-lower      480
;  :arith-assert-upper      631
;  :arith-conflicts         329
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         410
;  :arith-offset-eqs        1
;  :arith-pivots            707
;  :binary-propagations     16
;  :conflicts               838
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3654
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1343
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            348826)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@136@03 $Perm.No) (< $Perm.No $k@136@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          616
;  :arith-assert-diseq      119
;  :arith-assert-lower      480
;  :arith-assert-upper      631
;  :arith-conflicts         329
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         410
;  :arith-offset-eqs        1
;  :arith-pivots            707
;  :binary-propagations     16
;  :conflicts               839
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3654
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1344
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            348876)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          616
;  :arith-assert-diseq      119
;  :arith-assert-lower      480
;  :arith-assert-upper      631
;  :arith-conflicts         329
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         410
;  :arith-offset-eqs        1
;  :arith-pivots            707
;  :binary-propagations     16
;  :conflicts               839
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3654
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1345
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            348887)
(push) ; 8
(assert (not (not
  (=
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          616
;  :arith-assert-diseq      119
;  :arith-assert-lower      480
;  :arith-assert-upper      631
;  :arith-conflicts         329
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         410
;  :arith-offset-eqs        1
;  :arith-pivots            707
;  :binary-propagations     16
;  :conflicts               840
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3655
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1346
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            349005)
(assert (<
  $k@136@03
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03)))
(assert (<=
  $Perm.No
  (-
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $k@136@03)))
(assert (<=
  (-
    (-
      (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
      $k@71@03)
    $k@136@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (-
        (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
        $k@71@03)
      $k@136@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          621
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      633
;  :arith-conflicts         330
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         411
;  :arith-offset-eqs        1
;  :arith-pivots            711
;  :binary-propagations     16
;  :conflicts               841
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3659
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1347
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            349458)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          621
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      633
;  :arith-conflicts         330
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         411
;  :arith-offset-eqs        1
;  :arith-pivots            711
;  :binary-propagations     16
;  :conflicts               841
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3659
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1348
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            349469)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          621
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      633
;  :arith-conflicts         330
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         411
;  :arith-offset-eqs        1
;  :arith-pivots            711
;  :binary-propagations     16
;  :conflicts               841
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3659
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1349
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            349510)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          623
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      634
;  :arith-conflicts         331
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         412
;  :arith-offset-eqs        1
;  :arith-pivots            712
;  :binary-propagations     16
;  :conflicts               842
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3660
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1350
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            349716)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          623
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      634
;  :arith-conflicts         331
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         412
;  :arith-offset-eqs        1
;  :arith-pivots            712
;  :binary-propagations     16
;  :conflicts               842
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3660
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1351
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            349727)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          623
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      634
;  :arith-conflicts         331
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         412
;  :arith-offset-eqs        1
;  :arith-pivots            712
;  :binary-propagations     16
;  :conflicts               842
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3660
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1352
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            349768)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          623
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      634
;  :arith-conflicts         331
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         412
;  :arith-offset-eqs        1
;  :arith-pivots            712
;  :binary-propagations     16
;  :conflicts               842
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3660
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1353
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            349779)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          625
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      635
;  :arith-conflicts         332
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         413
;  :arith-offset-eqs        1
;  :arith-pivots            715
;  :binary-propagations     16
;  :conflicts               843
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3661
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1354
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            349992)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          625
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      635
;  :arith-conflicts         332
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         413
;  :arith-offset-eqs        1
;  :arith-pivots            715
;  :binary-propagations     16
;  :conflicts               843
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3661
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1355
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350003)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          625
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      635
;  :arith-conflicts         332
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         413
;  :arith-offset-eqs        1
;  :arith-pivots            715
;  :binary-propagations     16
;  :conflicts               843
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3661
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1356
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350044)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          625
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      635
;  :arith-conflicts         332
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         413
;  :arith-offset-eqs        1
;  :arith-pivots            715
;  :binary-propagations     16
;  :conflicts               843
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3661
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1357
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350055)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          627
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      636
;  :arith-conflicts         333
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         414
;  :arith-offset-eqs        1
;  :arith-pivots            716
;  :binary-propagations     16
;  :conflicts               844
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3662
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1358
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350261)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          627
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      636
;  :arith-conflicts         333
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         414
;  :arith-offset-eqs        1
;  :arith-pivots            716
;  :binary-propagations     16
;  :conflicts               844
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3662
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1359
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350272)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          627
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      636
;  :arith-conflicts         333
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         414
;  :arith-offset-eqs        1
;  :arith-pivots            716
;  :binary-propagations     16
;  :conflicts               844
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3662
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1360
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350313)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          627
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      636
;  :arith-conflicts         333
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         414
;  :arith-offset-eqs        1
;  :arith-pivots            716
;  :binary-propagations     16
;  :conflicts               844
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3662
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1361
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350324)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          629
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      637
;  :arith-conflicts         334
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         415
;  :arith-offset-eqs        1
;  :arith-pivots            719
;  :binary-propagations     16
;  :conflicts               845
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3663
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1362
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350537)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          629
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      637
;  :arith-conflicts         334
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         415
;  :arith-offset-eqs        1
;  :arith-pivots            719
;  :binary-propagations     16
;  :conflicts               845
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3663
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1363
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350548)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          629
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      637
;  :arith-conflicts         334
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         415
;  :arith-offset-eqs        1
;  :arith-pivots            719
;  :binary-propagations     16
;  :conflicts               845
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3663
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1364
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350589)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          629
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      637
;  :arith-conflicts         334
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         415
;  :arith-offset-eqs        1
;  :arith-pivots            719
;  :binary-propagations     16
;  :conflicts               845
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3663
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1365
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350600)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          631
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      638
;  :arith-conflicts         335
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         416
;  :arith-offset-eqs        1
;  :arith-pivots            720
;  :binary-propagations     16
;  :conflicts               846
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3664
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1366
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350806)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          631
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      638
;  :arith-conflicts         335
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         416
;  :arith-offset-eqs        1
;  :arith-pivots            720
;  :binary-propagations     16
;  :conflicts               846
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3664
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1367
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350817)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          631
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      638
;  :arith-conflicts         335
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         416
;  :arith-offset-eqs        1
;  :arith-pivots            720
;  :binary-propagations     16
;  :conflicts               846
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3664
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1368
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350858)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          631
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      638
;  :arith-conflicts         335
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         416
;  :arith-offset-eqs        1
;  :arith-pivots            720
;  :binary-propagations     16
;  :conflicts               846
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3664
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1369
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            350869)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          633
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      639
;  :arith-conflicts         336
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         417
;  :arith-offset-eqs        1
;  :arith-pivots            723
;  :binary-propagations     16
;  :conflicts               847
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3665
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1370
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            351082)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          633
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      639
;  :arith-conflicts         336
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         417
;  :arith-offset-eqs        1
;  :arith-pivots            723
;  :binary-propagations     16
;  :conflicts               847
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3665
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1371
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            351093)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          633
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      639
;  :arith-conflicts         336
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         417
;  :arith-offset-eqs        1
;  :arith-pivots            723
;  :binary-propagations     16
;  :conflicts               847
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3665
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1372
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            351134)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          633
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      639
;  :arith-conflicts         336
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         417
;  :arith-offset-eqs        1
;  :arith-pivots            723
;  :binary-propagations     16
;  :conflicts               847
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3665
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1373
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            351145)
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          635
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      640
;  :arith-conflicts         337
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         418
;  :arith-offset-eqs        1
;  :arith-pivots            724
;  :binary-propagations     16
;  :conflicts               848
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3666
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1374
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            351351)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          635
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      640
;  :arith-conflicts         337
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         418
;  :arith-offset-eqs        1
;  :arith-pivots            724
;  :binary-propagations     16
;  :conflicts               848
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3666
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1375
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            351362)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          635
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      640
;  :arith-conflicts         337
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         418
;  :arith-offset-eqs        1
;  :arith-pivots            724
;  :binary-propagations     16
;  :conflicts               848
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3666
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1376
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            351403)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          635
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      640
;  :arith-conflicts         337
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         418
;  :arith-offset-eqs        1
;  :arith-pivots            724
;  :binary-propagations     16
;  :conflicts               848
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3666
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1377
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            351414)
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          637
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      641
;  :arith-conflicts         338
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         419
;  :arith-offset-eqs        1
;  :arith-pivots            727
;  :binary-propagations     16
;  :conflicts               849
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3667
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1378
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            351627)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          637
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      641
;  :arith-conflicts         338
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         419
;  :arith-offset-eqs        1
;  :arith-pivots            727
;  :binary-propagations     16
;  :conflicts               849
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3667
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1379
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            351638)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          637
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      641
;  :arith-conflicts         338
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         419
;  :arith-offset-eqs        1
;  :arith-pivots            727
;  :binary-propagations     16
;  :conflicts               849
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3667
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1380
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            351679)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          637
;  :arith-assert-diseq      119
;  :arith-assert-lower      482
;  :arith-assert-upper      641
;  :arith-conflicts         338
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         419
;  :arith-offset-eqs        1
;  :arith-pivots            727
;  :binary-propagations     16
;  :conflicts               849
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3667
;  :mk-clause               562
;  :num-allocs              5515453
;  :num-checks              1381
;  :propagations            284
;  :quant-instantiations    80
;  :rlimit-count            351690)
(declare-const $k@137@03 $Perm)
(assert ($Perm.isReadVar $k@137@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          639
;  :arith-assert-diseq      120
;  :arith-assert-lower      484
;  :arith-assert-upper      643
;  :arith-conflicts         339
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         420
;  :arith-offset-eqs        1
;  :arith-pivots            728
;  :binary-propagations     16
;  :conflicts               850
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3672
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1382
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            352045)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@137@03 $Perm.No) (< $Perm.No $k@137@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          639
;  :arith-assert-diseq      120
;  :arith-assert-lower      484
;  :arith-assert-upper      643
;  :arith-conflicts         339
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         420
;  :arith-offset-eqs        1
;  :arith-pivots            728
;  :binary-propagations     16
;  :conflicts               851
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3672
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1383
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            352095)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          639
;  :arith-assert-diseq      120
;  :arith-assert-lower      484
;  :arith-assert-upper      643
;  :arith-conflicts         339
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         420
;  :arith-offset-eqs        1
;  :arith-pivots            728
;  :binary-propagations     16
;  :conflicts               851
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3672
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1384
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            352106)
(push) ; 8
(assert (not (not (= (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          639
;  :arith-assert-diseq      120
;  :arith-assert-lower      484
;  :arith-assert-upper      643
;  :arith-conflicts         339
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         420
;  :arith-offset-eqs        1
;  :arith-pivots            728
;  :binary-propagations     16
;  :conflicts               852
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3673
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1385
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            352198)
(assert (< $k@137@03 (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03)))
(assert (<= $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@137@03)))
(assert (<= (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@137@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03) $k@137@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          643
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      645
;  :arith-conflicts         340
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         421
;  :arith-offset-eqs        1
;  :arith-pivots            731
;  :binary-propagations     16
;  :conflicts               853
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3677
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1386
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            352617)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          643
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      645
;  :arith-conflicts         340
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         421
;  :arith-offset-eqs        1
;  :arith-pivots            731
;  :binary-propagations     16
;  :conflicts               853
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3677
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1387
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            352628)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          643
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      645
;  :arith-conflicts         340
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         421
;  :arith-offset-eqs        1
;  :arith-pivots            731
;  :binary-propagations     16
;  :conflicts               853
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3677
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1388
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            352657)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          643
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      645
;  :arith-conflicts         340
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         421
;  :arith-offset-eqs        1
;  :arith-pivots            731
;  :binary-propagations     16
;  :conflicts               853
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3677
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1389
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            352670)
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          645
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      646
;  :arith-conflicts         341
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         422
;  :arith-offset-eqs        1
;  :arith-pivots            732
;  :binary-propagations     16
;  :conflicts               854
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3678
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1390
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            352876)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          645
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      646
;  :arith-conflicts         341
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         422
;  :arith-offset-eqs        1
;  :arith-pivots            732
;  :binary-propagations     16
;  :conflicts               854
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3678
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1391
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            352887)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          645
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      646
;  :arith-conflicts         341
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         422
;  :arith-offset-eqs        1
;  :arith-pivots            732
;  :binary-propagations     16
;  :conflicts               854
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3678
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1392
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            352916)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          645
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      646
;  :arith-conflicts         341
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         422
;  :arith-offset-eqs        1
;  :arith-pivots            732
;  :binary-propagations     16
;  :conflicts               855
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3679
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1393
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            353176)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          647
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      647
;  :arith-conflicts         342
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         423
;  :arith-offset-eqs        1
;  :arith-pivots            735
;  :binary-propagations     16
;  :conflicts               856
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3680
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1394
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            353389)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          647
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      647
;  :arith-conflicts         342
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         423
;  :arith-offset-eqs        1
;  :arith-pivots            735
;  :binary-propagations     16
;  :conflicts               856
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3680
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1395
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            353400)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          647
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      647
;  :arith-conflicts         342
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         423
;  :arith-offset-eqs        1
;  :arith-pivots            735
;  :binary-propagations     16
;  :conflicts               856
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3680
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1396
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            353429)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          647
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      647
;  :arith-conflicts         342
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         423
;  :arith-offset-eqs        1
;  :arith-pivots            735
;  :binary-propagations     16
;  :conflicts               857
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3681
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1397
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            353689)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          649
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      648
;  :arith-conflicts         343
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         424
;  :arith-offset-eqs        1
;  :arith-pivots            736
;  :binary-propagations     16
;  :conflicts               858
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3682
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1398
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            353895)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          649
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      648
;  :arith-conflicts         343
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         424
;  :arith-offset-eqs        1
;  :arith-pivots            736
;  :binary-propagations     16
;  :conflicts               858
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3682
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1399
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            353906)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          649
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      648
;  :arith-conflicts         343
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         424
;  :arith-offset-eqs        1
;  :arith-pivots            736
;  :binary-propagations     16
;  :conflicts               858
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3682
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1400
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            353935)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          649
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      648
;  :arith-conflicts         343
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         424
;  :arith-offset-eqs        1
;  :arith-pivots            736
;  :binary-propagations     16
;  :conflicts               859
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3683
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1401
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            354195)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          651
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      649
;  :arith-conflicts         344
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         425
;  :arith-offset-eqs        1
;  :arith-pivots            739
;  :binary-propagations     16
;  :conflicts               860
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3684
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1402
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            354408)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          651
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      649
;  :arith-conflicts         344
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         425
;  :arith-offset-eqs        1
;  :arith-pivots            739
;  :binary-propagations     16
;  :conflicts               860
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3684
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1403
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            354419)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          651
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      649
;  :arith-conflicts         344
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         425
;  :arith-offset-eqs        1
;  :arith-pivots            739
;  :binary-propagations     16
;  :conflicts               860
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3684
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1404
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            354448)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          651
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      649
;  :arith-conflicts         344
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         425
;  :arith-offset-eqs        1
;  :arith-pivots            739
;  :binary-propagations     16
;  :conflicts               861
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3685
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1405
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            354708)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          653
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      650
;  :arith-conflicts         345
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         426
;  :arith-offset-eqs        1
;  :arith-pivots            740
;  :binary-propagations     16
;  :conflicts               862
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3686
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1406
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            354914)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          653
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      650
;  :arith-conflicts         345
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         426
;  :arith-offset-eqs        1
;  :arith-pivots            740
;  :binary-propagations     16
;  :conflicts               862
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3686
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1407
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            354925)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@40@03) $k@51@03) $k@72@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          653
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      650
;  :arith-conflicts         345
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         426
;  :arith-offset-eqs        1
;  :arith-pivots            740
;  :binary-propagations     16
;  :conflicts               862
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3686
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1408
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            354954)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))))))))))))
  $t@52@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          653
;  :arith-assert-diseq      120
;  :arith-assert-lower      486
;  :arith-assert-upper      650
;  :arith-conflicts         345
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         426
;  :arith-offset-eqs        1
;  :arith-pivots            740
;  :binary-propagations     16
;  :conflicts               863
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3687
;  :mk-clause               564
;  :num-allocs              5515453
;  :num-checks              1409
;  :propagations            285
;  :quant-instantiations    80
;  :rlimit-count            355214)
(declare-const $k@138@03 $Perm)
(assert ($Perm.isReadVar $k@138@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          655
;  :arith-assert-diseq      121
;  :arith-assert-lower      488
;  :arith-assert-upper      652
;  :arith-conflicts         346
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         427
;  :arith-offset-eqs        1
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               864
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3692
;  :mk-clause               566
;  :num-allocs              5515453
;  :num-checks              1410
;  :propagations            286
;  :quant-instantiations    80
;  :rlimit-count            355576)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@138@03 $Perm.No) (< $Perm.No $k@138@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          655
;  :arith-assert-diseq      121
;  :arith-assert-lower      488
;  :arith-assert-upper      652
;  :arith-conflicts         346
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         427
;  :arith-offset-eqs        1
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               865
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3692
;  :mk-clause               566
;  :num-allocs              5515453
;  :num-checks              1411
;  :propagations            286
;  :quant-instantiations    80
;  :rlimit-count            355626)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          655
;  :arith-assert-diseq      121
;  :arith-assert-lower      488
;  :arith-assert-upper      652
;  :arith-conflicts         346
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         427
;  :arith-offset-eqs        1
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               865
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3692
;  :mk-clause               566
;  :num-allocs              5515453
;  :num-checks              1412
;  :propagations            286
;  :quant-instantiations    80
;  :rlimit-count            355637)
(push) ; 8
(assert (not (not (= (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          655
;  :arith-assert-diseq      121
;  :arith-assert-lower      488
;  :arith-assert-upper      652
;  :arith-conflicts         346
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         427
;  :arith-offset-eqs        1
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               866
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3693
;  :mk-clause               566
;  :num-allocs              5515453
;  :num-checks              1413
;  :propagations            286
;  :quant-instantiations    80
;  :rlimit-count            355729)
(assert (< $k@138@03 (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03)))
(assert (<= $Perm.No (- (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03) $k@138@03)))
(assert (<= (- (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03) $k@138@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03) $k@138@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          658
;  :arith-assert-diseq      121
;  :arith-assert-lower      490
;  :arith-assert-upper      654
;  :arith-conflicts         347
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         428
;  :arith-offset-eqs        1
;  :arith-pivots            744
;  :binary-propagations     16
;  :conflicts               867
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3697
;  :mk-clause               566
;  :num-allocs              5515453
;  :num-checks              1414
;  :propagations            286
;  :quant-instantiations    80
;  :rlimit-count            356140)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          658
;  :arith-assert-diseq      121
;  :arith-assert-lower      490
;  :arith-assert-upper      654
;  :arith-conflicts         347
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         428
;  :arith-offset-eqs        1
;  :arith-pivots            744
;  :binary-propagations     16
;  :conflicts               867
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3697
;  :mk-clause               566
;  :num-allocs              5515453
;  :num-checks              1415
;  :propagations            286
;  :quant-instantiations    80
;  :rlimit-count            356151)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          658
;  :arith-assert-diseq      121
;  :arith-assert-lower      490
;  :arith-assert-upper      654
;  :arith-conflicts         347
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         428
;  :arith-offset-eqs        1
;  :arith-pivots            744
;  :binary-propagations     16
;  :conflicts               867
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3697
;  :mk-clause               566
;  :num-allocs              5515453
;  :num-checks              1416
;  :propagations            286
;  :quant-instantiations    80
;  :rlimit-count            356180)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          658
;  :arith-assert-diseq      121
;  :arith-assert-lower      490
;  :arith-assert-upper      654
;  :arith-conflicts         347
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         428
;  :arith-offset-eqs        1
;  :arith-pivots            744
;  :binary-propagations     16
;  :conflicts               867
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3697
;  :mk-clause               566
;  :num-allocs              5515453
;  :num-checks              1417
;  :propagations            286
;  :quant-instantiations    80
;  :rlimit-count            356193)
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          660
;  :arith-assert-diseq      121
;  :arith-assert-lower      490
;  :arith-assert-upper      655
;  :arith-conflicts         348
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         429
;  :arith-offset-eqs        1
;  :arith-pivots            747
;  :binary-propagations     16
;  :conflicts               868
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3698
;  :mk-clause               566
;  :num-allocs              5515453
;  :num-checks              1418
;  :propagations            286
;  :quant-instantiations    80
;  :rlimit-count            356406)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          660
;  :arith-assert-diseq      121
;  :arith-assert-lower      490
;  :arith-assert-upper      655
;  :arith-conflicts         348
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         429
;  :arith-offset-eqs        1
;  :arith-pivots            747
;  :binary-propagations     16
;  :conflicts               868
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3698
;  :mk-clause               566
;  :num-allocs              5515453
;  :num-checks              1419
;  :propagations            286
;  :quant-instantiations    80
;  :rlimit-count            356417)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@41@03) $k@53@03) $k@73@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          660
;  :arith-assert-diseq      121
;  :arith-assert-lower      490
;  :arith-assert-upper      655
;  :arith-conflicts         348
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         429
;  :arith-offset-eqs        1
;  :arith-pivots            747
;  :binary-propagations     16
;  :conflicts               868
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3698
;  :mk-clause               566
;  :num-allocs              5515453
;  :num-checks              1420
;  :propagations            286
;  :quant-instantiations    80
;  :rlimit-count            356446)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03)))))))))))))))))))))))))))
  $t@54@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          660
;  :arith-assert-diseq      121
;  :arith-assert-lower      490
;  :arith-assert-upper      655
;  :arith-conflicts         348
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         429
;  :arith-offset-eqs        1
;  :arith-pivots            747
;  :binary-propagations     16
;  :conflicts               869
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3699
;  :mk-clause               566
;  :num-allocs              5515453
;  :num-checks              1421
;  :propagations            286
;  :quant-instantiations    80
;  :rlimit-count            356776)
(declare-const $k@139@03 $Perm)
(assert ($Perm.isReadVar $k@139@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          662
;  :arith-assert-diseq      122
;  :arith-assert-lower      492
;  :arith-assert-upper      657
;  :arith-conflicts         349
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         430
;  :arith-offset-eqs        1
;  :arith-pivots            748
;  :binary-propagations     16
;  :conflicts               870
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3704
;  :mk-clause               568
;  :num-allocs              5515453
;  :num-checks              1422
;  :propagations            287
;  :quant-instantiations    80
;  :rlimit-count            357130)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          662
;  :arith-assert-diseq      122
;  :arith-assert-lower      492
;  :arith-assert-upper      657
;  :arith-conflicts         349
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         430
;  :arith-offset-eqs        1
;  :arith-pivots            748
;  :binary-propagations     16
;  :conflicts               870
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3704
;  :mk-clause               568
;  :num-allocs              5515453
;  :num-checks              1423
;  :propagations            287
;  :quant-instantiations    80
;  :rlimit-count            357141)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          662
;  :arith-assert-diseq      122
;  :arith-assert-lower      492
;  :arith-assert-upper      657
;  :arith-conflicts         349
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         430
;  :arith-offset-eqs        1
;  :arith-pivots            748
;  :binary-propagations     16
;  :conflicts               870
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3704
;  :mk-clause               568
;  :num-allocs              5515453
;  :num-checks              1424
;  :propagations            287
;  :quant-instantiations    80
;  :rlimit-count            357182)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@139@03 $Perm.No) (< $Perm.No $k@139@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          662
;  :arith-assert-diseq      122
;  :arith-assert-lower      492
;  :arith-assert-upper      657
;  :arith-conflicts         349
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         430
;  :arith-offset-eqs        1
;  :arith-pivots            748
;  :binary-propagations     16
;  :conflicts               871
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3704
;  :mk-clause               568
;  :num-allocs              5515453
;  :num-checks              1425
;  :propagations            287
;  :quant-instantiations    80
;  :rlimit-count            357232)
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
  $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          662
;  :arith-assert-diseq      122
;  :arith-assert-lower      492
;  :arith-assert-upper      657
;  :arith-conflicts         349
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         430
;  :arith-offset-eqs        1
;  :arith-pivots            748
;  :binary-propagations     16
;  :conflicts               871
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3704
;  :mk-clause               568
;  :num-allocs              5515453
;  :num-checks              1426
;  :propagations            287
;  :quant-instantiations    80
;  :rlimit-count            357243)
(push) ; 8
(assert (not (not (= $k@68@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          662
;  :arith-assert-diseq      122
;  :arith-assert-lower      492
;  :arith-assert-upper      657
;  :arith-conflicts         349
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         430
;  :arith-offset-eqs        1
;  :arith-pivots            748
;  :binary-propagations     16
;  :conflicts               871
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3704
;  :mk-clause               568
;  :num-allocs              5515453
;  :num-checks              1427
;  :propagations            287
;  :quant-instantiations    80
;  :rlimit-count            357254)
(assert (< $k@139@03 $k@68@03))
(assert (<= $Perm.No (- $k@68@03 $k@139@03)))
(assert (<= (- $k@68@03 $k@139@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@68@03 $k@139@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@03))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          664
;  :arith-assert-diseq      122
;  :arith-assert-lower      494
;  :arith-assert-upper      659
;  :arith-conflicts         350
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         431
;  :arith-offset-eqs        1
;  :arith-pivots            752
;  :binary-propagations     16
;  :conflicts               872
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3708
;  :mk-clause               568
;  :num-allocs              5515453
;  :num-checks              1428
;  :propagations            287
;  :quant-instantiations    80
;  :rlimit-count            357656)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          664
;  :arith-assert-diseq      122
;  :arith-assert-lower      494
;  :arith-assert-upper      659
;  :arith-conflicts         350
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         431
;  :arith-offset-eqs        1
;  :arith-pivots            752
;  :binary-propagations     16
;  :conflicts               872
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3708
;  :mk-clause               568
;  :num-allocs              5515453
;  :num-checks              1429
;  :propagations            287
;  :quant-instantiations    80
;  :rlimit-count            357667)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          664
;  :arith-assert-diseq      122
;  :arith-assert-lower      494
;  :arith-assert-upper      659
;  :arith-conflicts         350
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         431
;  :arith-offset-eqs        1
;  :arith-pivots            752
;  :binary-propagations     16
;  :conflicts               872
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3708
;  :mk-clause               568
;  :num-allocs              5515453
;  :num-checks              1430
;  :propagations            287
;  :quant-instantiations    80
;  :rlimit-count            357708)
(push) ; 8
(assert (not (= diz@6@03 $t@58@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          664
;  :arith-assert-diseq      122
;  :arith-assert-lower      494
;  :arith-assert-upper      659
;  :arith-conflicts         350
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         431
;  :arith-offset-eqs        1
;  :arith-pivots            752
;  :binary-propagations     16
;  :conflicts               872
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3708
;  :mk-clause               568
;  :num-allocs              5515453
;  :num-checks              1431
;  :propagations            287
;  :quant-instantiations    80
;  :rlimit-count            357719)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          666
;  :arith-assert-diseq      122
;  :arith-assert-lower      494
;  :arith-assert-upper      660
;  :arith-conflicts         351
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         432
;  :arith-offset-eqs        1
;  :arith-pivots            753
;  :binary-propagations     16
;  :conflicts               873
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3709
;  :mk-clause               568
;  :num-allocs              5515453
;  :num-checks              1432
;  :propagations            287
;  :quant-instantiations    80
;  :rlimit-count            357925)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          668
;  :arith-assert-diseq      122
;  :arith-assert-lower      494
;  :arith-assert-upper      661
;  :arith-conflicts         352
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         433
;  :arith-offset-eqs        1
;  :arith-pivots            756
;  :binary-propagations     16
;  :conflicts               874
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3710
;  :mk-clause               568
;  :num-allocs              5515453
;  :num-checks              1433
;  :propagations            287
;  :quant-instantiations    80
;  :rlimit-count            358138)
(declare-const $k@140@03 $Perm)
(assert ($Perm.isReadVar $k@140@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          670
;  :arith-assert-diseq      123
;  :arith-assert-lower      496
;  :arith-assert-upper      663
;  :arith-conflicts         353
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         434
;  :arith-offset-eqs        1
;  :arith-pivots            757
;  :binary-propagations     16
;  :conflicts               875
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3715
;  :mk-clause               570
;  :num-allocs              5515453
;  :num-checks              1434
;  :propagations            288
;  :quant-instantiations    80
;  :rlimit-count            358492)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@140@03 $Perm.No) (< $Perm.No $k@140@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          670
;  :arith-assert-diseq      123
;  :arith-assert-lower      496
;  :arith-assert-upper      663
;  :arith-conflicts         353
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         434
;  :arith-offset-eqs        1
;  :arith-pivots            757
;  :binary-propagations     16
;  :conflicts               876
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3715
;  :mk-clause               570
;  :num-allocs              5515453
;  :num-checks              1435
;  :propagations            288
;  :quant-instantiations    80
;  :rlimit-count            358542)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          670
;  :arith-assert-diseq      123
;  :arith-assert-lower      496
;  :arith-assert-upper      663
;  :arith-conflicts         353
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         434
;  :arith-offset-eqs        1
;  :arith-pivots            757
;  :binary-propagations     16
;  :conflicts               877
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3716
;  :mk-clause               570
;  :num-allocs              5515453
;  :num-checks              1436
;  :propagations            288
;  :quant-instantiations    80
;  :rlimit-count            358627)
(push) ; 8
(assert (not (not (= $k@65@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          670
;  :arith-assert-diseq      123
;  :arith-assert-lower      496
;  :arith-assert-upper      663
;  :arith-conflicts         353
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         434
;  :arith-offset-eqs        1
;  :arith-pivots            757
;  :binary-propagations     16
;  :conflicts               877
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3716
;  :mk-clause               570
;  :num-allocs              5515453
;  :num-checks              1437
;  :propagations            288
;  :quant-instantiations    80
;  :rlimit-count            358638)
(assert (< $k@140@03 $k@65@03))
(assert (<= $Perm.No (- $k@65@03 $k@140@03)))
(assert (<= (- $k@65@03 $k@140@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@65@03 $k@140@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@62@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@63@03 (- (+ (- $k@18@03 $k@42@03) $k@46@03) $k@74@03))
    (- (+ (- $k@13@03 $k@37@03) $k@55@03) $k@69@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          672
;  :arith-assert-diseq      123
;  :arith-assert-lower      498
;  :arith-assert-upper      665
;  :arith-conflicts         354
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         435
;  :arith-offset-eqs        1
;  :arith-pivots            761
;  :binary-propagations     16
;  :conflicts               878
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3720
;  :mk-clause               570
;  :num-allocs              5515453
;  :num-checks              1438
;  :propagations            288
;  :quant-instantiations    80
;  :rlimit-count            359017)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@84@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          672
;  :arith-assert-diseq      123
;  :arith-assert-lower      498
;  :arith-assert-upper      665
;  :arith-conflicts         354
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         435
;  :arith-offset-eqs        1
;  :arith-pivots            761
;  :binary-propagations     16
;  :conflicts               878
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3720
;  :mk-clause               570
;  :num-allocs              5515453
;  :num-checks              1439
;  :propagations            288
;  :quant-instantiations    80
;  :rlimit-count            359028)
(push) ; 8
(assert (not (<
  $Perm.No
  (-
    (+ (+ (- (- (+ $k@15@03 $k@19@03) $k@39@03) $k@43@03) $k@49@03) $k@57@03)
    $k@71@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7731
;  :arith-add-rows          672
;  :arith-assert-diseq      123
;  :arith-assert-lower      498
;  :arith-assert-upper      665
;  :arith-conflicts         354
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         435
;  :arith-offset-eqs        1
;  :arith-pivots            761
;  :binary-propagations     16
;  :conflicts               878
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2024
;  :datatype-occurs-check   287
;  :datatype-splits         1446
;  :decisions               1927
;  :del-clause              538
;  :final-checks            108
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              4.76
;  :memory                  4.76
;  :mk-bool-var             3720
;  :mk-clause               570
;  :num-allocs              5515453
;  :num-checks              1440
;  :propagations            288
;  :quant-instantiations    80
;  :rlimit-count            359069)
; [exec]
; inhale false
(pop) ; 7
(push) ; 7
; [else-branch: 49 | bit@10@03 == 1]
(assert (= bit@10@03 1))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 39 | sys__result@44@03 == bit@10@03]
(assert (= sys__result@44@03 bit@10@03))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 29 | i__13@61@03 < pos@9@03]
(assert (< i__13@61@03 pos@9@03))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
