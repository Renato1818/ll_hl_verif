
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.37 (git sha1 a5c7f69ed8f, clang 14.0.6 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: half_adder.sv
Parsing formal SystemVerilog input from `half_adder.sv' to AST representation.
Storing AST representation for module `$abstract\half_adder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

3. Executing AST frontend in derive mode using pre-parsed AST for module `\half_adder'.
Generating RTLIL representation for module `\half_adder'.
Warning: reg '\f_sum' is assigned in a continuous assignment at half_adder.sv:59.10-59.39.
Warning: reg '\f_carry' is assigned in a continuous assignment at half_adder.sv:60.10-60.43.

3.1. Analyzing design hierarchy..
Top module:  \half_adder

3.2. Analyzing design hierarchy..
Top module:  \half_adder
Removing unused module `$abstract\half_adder'.
Removed 1 unused modules.
Module half_adder directly or indirectly contains formal properties -> setting "keep" attribute.

4. Executing PREP pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \half_adder

4.1.2. Analyzing design hierarchy..
Top module:  \half_adder
Removed 0 unused modules.
Module half_adder directly or indirectly contains formal properties -> setting "keep" attribute.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$half_adder.sv:74$27 in module half_adder.
Marked 1 switch rules as full_case in process $proc$half_adder.sv:62$25 in module half_adder.
Marked 1 switch rules as full_case in process $proc$half_adder.sv:30$19 in module half_adder.
Removed a total of 0 dead cases.

4.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 5 redundant assignments.
Promoted 33 assignments to connections.

4.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\half_adder.$proc$half_adder.sv:0$90'.
  Set init value: $formal$half_adder.sv:95$12_EN = 1'0
Found init rule in `\half_adder.$proc$half_adder.sv:0$88'.
  Set init value: $formal$half_adder.sv:94$11_EN = 1'0
Found init rule in `\half_adder.$proc$half_adder.sv:0$86'.
  Set init value: $formal$half_adder.sv:93$10_EN = 1'0
Found init rule in `\half_adder.$proc$half_adder.sv:0$84'.
  Set init value: $formal$half_adder.sv:92$9_EN = 1'0
Found init rule in `\half_adder.$proc$half_adder.sv:0$82'.
  Set init value: $formal$half_adder.sv:90$8_EN = 1'0
Found init rule in `\half_adder.$proc$half_adder.sv:0$80'.
  Set init value: $formal$half_adder.sv:89$7_EN = 1'0
Found init rule in `\half_adder.$proc$half_adder.sv:0$78'.
  Set init value: $formal$half_adder.sv:87$6_EN = 1'0
Found init rule in `\half_adder.$proc$half_adder.sv:0$76'.
  Set init value: $formal$half_adder.sv:86$5_EN = 1'0
Found init rule in `\half_adder.$proc$half_adder.sv:0$74'.
  Set init value: $formal$half_adder.sv:81$4_EN = 1'0
Found init rule in `\half_adder.$proc$half_adder.sv:0$72'.
  Set init value: $formal$half_adder.sv:80$3_EN = 1'0
Found init rule in `\half_adder.$proc$half_adder.sv:0$70'.
  Set init value: $formal$half_adder.sv:77$2_EN = 1'0
Found init rule in `\half_adder.$proc$half_adder.sv:0$68'.
  Set init value: $formal$half_adder.sv:76$1_EN = 1'0
Found init rule in `\half_adder.$proc$half_adder.sv:51$67'.
  Set init value: \f_past_valid = 1'0

4.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rstn in `\half_adder.$proc$half_adder.sv:62$25'.
Found async reset \rstn in `\half_adder.$proc$half_adder.sv:30$19'.

4.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

4.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\half_adder.$proc$half_adder.sv:0$90'.
Creating decoders for process `\half_adder.$proc$half_adder.sv:0$88'.
Creating decoders for process `\half_adder.$proc$half_adder.sv:0$86'.
Creating decoders for process `\half_adder.$proc$half_adder.sv:0$84'.
Creating decoders for process `\half_adder.$proc$half_adder.sv:0$82'.
Creating decoders for process `\half_adder.$proc$half_adder.sv:0$80'.
Creating decoders for process `\half_adder.$proc$half_adder.sv:0$78'.
Creating decoders for process `\half_adder.$proc$half_adder.sv:0$76'.
Creating decoders for process `\half_adder.$proc$half_adder.sv:0$74'.
Creating decoders for process `\half_adder.$proc$half_adder.sv:0$72'.
Creating decoders for process `\half_adder.$proc$half_adder.sv:0$70'.
Creating decoders for process `\half_adder.$proc$half_adder.sv:0$68'.
Creating decoders for process `\half_adder.$proc$half_adder.sv:51$67'.
Creating decoders for process `\half_adder.$proc$half_adder.sv:74$27'.
     1/8: $0$formal$half_adder.sv:76$1_EN[0:0]$29
     2/8: $0$formal$half_adder.sv:76$1_CHECK[0:0]$28
     3/8: $0$formal$half_adder.sv:77$2_EN[0:0]$31
     4/8: $0$formal$half_adder.sv:77$2_CHECK[0:0]$30
     5/8: $0$formal$half_adder.sv:80$3_EN[0:0]$33
     6/8: $0$formal$half_adder.sv:80$3_CHECK[0:0]$32
     7/8: $0$formal$half_adder.sv:81$4_EN[0:0]$35
     8/8: $0$formal$half_adder.sv:81$4_CHECK[0:0]$34
Creating decoders for process `\half_adder.$proc$half_adder.sv:62$25'.
     1/3: $0\f_past_valid[0:0]
     2/3: $0\f_b[0:0]
     3/3: $0\f_a[0:0]
Creating decoders for process `\half_adder.$proc$half_adder.sv:30$19'.
     1/2: $0\carry_out[0:0]
     2/2: $0\sum_out[0:0]
Creating decoders for process `\half_adder.$proc$half_adder.sv:16$13'.

4.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\half_adder.\sum_next' from process `\half_adder.$proc$half_adder.sv:16$13'.
No latch inferred for signal `\half_adder.\carry_next' from process `\half_adder.$proc$half_adder.sv:16$13'.
No latch inferred for signal `\half_adder.\prc_half_adder_comb.s_nand' from process `\half_adder.$proc$half_adder.sv:16$13'.
No latch inferred for signal `\half_adder.\prc_half_adder_comb.s_or' from process `\half_adder.$proc$half_adder.sv:16$13'.

4.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\half_adder.$formal$half_adder.sv:76$1_CHECK' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$124' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:76$1_EN' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$125' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:77$2_CHECK' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$126' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:77$2_EN' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$127' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:80$3_CHECK' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$128' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:80$3_EN' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$129' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:81$4_CHECK' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$130' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:81$4_EN' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$131' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:86$5_CHECK' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$132' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:86$5_EN' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$133' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:87$6_CHECK' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$134' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:87$6_EN' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$135' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:89$7_CHECK' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$136' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:89$7_EN' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$137' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:90$8_CHECK' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$138' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:90$8_EN' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$139' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:92$9_CHECK' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$140' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:92$9_EN' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$141' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:93$10_CHECK' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$142' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:93$10_EN' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$143' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:94$11_CHECK' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$144' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:94$11_EN' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$145' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:95$12_CHECK' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$146' with positive edge clock.
Creating register for signal `\half_adder.$formal$half_adder.sv:95$12_EN' using process `\half_adder.$proc$half_adder.sv:74$27'.
  created $dff cell `$procdff$147' with positive edge clock.
Creating register for signal `\half_adder.\f_a' using process `\half_adder.$proc$half_adder.sv:62$25'.
  created $adff cell `$procdff$148' with positive edge clock and negative level reset.
Creating register for signal `\half_adder.\f_b' using process `\half_adder.$proc$half_adder.sv:62$25'.
  created $adff cell `$procdff$149' with positive edge clock and negative level reset.
Creating register for signal `\half_adder.\f_past_valid' using process `\half_adder.$proc$half_adder.sv:62$25'.
  created $adff cell `$procdff$150' with positive edge clock and negative level reset.
Creating register for signal `\half_adder.\sum_out' using process `\half_adder.$proc$half_adder.sv:30$19'.
  created $adff cell `$procdff$151' with positive edge clock and negative level reset.
Creating register for signal `\half_adder.\carry_out' using process `\half_adder.$proc$half_adder.sv:30$19'.
  created $adff cell `$procdff$152' with positive edge clock and negative level reset.

4.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `half_adder.$proc$half_adder.sv:0$90'.
Removing empty process `half_adder.$proc$half_adder.sv:0$88'.
Removing empty process `half_adder.$proc$half_adder.sv:0$86'.
Removing empty process `half_adder.$proc$half_adder.sv:0$84'.
Removing empty process `half_adder.$proc$half_adder.sv:0$82'.
Removing empty process `half_adder.$proc$half_adder.sv:0$80'.
Removing empty process `half_adder.$proc$half_adder.sv:0$78'.
Removing empty process `half_adder.$proc$half_adder.sv:0$76'.
Removing empty process `half_adder.$proc$half_adder.sv:0$74'.
Removing empty process `half_adder.$proc$half_adder.sv:0$72'.
Removing empty process `half_adder.$proc$half_adder.sv:0$70'.
Removing empty process `half_adder.$proc$half_adder.sv:0$68'.
Removing empty process `half_adder.$proc$half_adder.sv:51$67'.
Found and cleaned up 2 empty switches in `\half_adder.$proc$half_adder.sv:74$27'.
Removing empty process `half_adder.$proc$half_adder.sv:74$27'.
Removing empty process `half_adder.$proc$half_adder.sv:62$25'.
Removing empty process `half_adder.$proc$half_adder.sv:30$19'.
Removing empty process `half_adder.$proc$half_adder.sv:16$13'.
Cleaned up 2 empty switches.

4.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module half_adder.
<suppressed ~8 debug messages>

4.3. Executing FUTURE pass.

4.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module half_adder.

4.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \half_adder..
Removed 3 unused cells and 67 unused wires.
<suppressed ~4 debug messages>

4.6. Executing CHECK pass (checking for obvious problems).
Checking module half_adder...
Found and reported 0 problems.

4.7. Executing OPT pass (performing simple optimizations).

4.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module half_adder.

4.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\half_adder'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

4.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \half_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \half_adder.
Performed a total of 0 changes.

4.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\half_adder'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

4.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \half_adder..
Removed 0 unused cells and 18 unused wires.
<suppressed ~1 debug messages>

4.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module half_adder.

4.7.8. Rerunning OPT passes. (Maybe there is more to do..)

4.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \half_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \half_adder.
Performed a total of 0 changes.

4.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\half_adder'.
Removed a total of 0 cells.

4.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \half_adder..

4.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module half_adder.

4.7.14. Finished OPT passes. (There is nothing left to do.)

4.8. Executing WREDUCE pass (reducing word size of cells).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \half_adder..

4.10. Executing MEMORY_COLLECT pass (generating $mem cells).

4.11. Executing OPT pass (performing simple optimizations).

4.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module half_adder.

4.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\half_adder'.
Removed a total of 0 cells.

4.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \half_adder..

4.11.4. Finished fast OPT passes.

4.12. Printing statistics.

=== half_adder ===

   Number of wires:                 52
   Number of wire bits:             52
   Number of public wires:          17
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $adff                           5
     $and                            1
     $assert                         4
     $cover                          8
     $dff                           15
     $logic_and                      5
     $logic_not                      7
     $logic_or                       1
     $mux                            9
     $xor                            3

4.13. Executing CHECK pass (checking for obvious problems).
Checking module half_adder...
Found and reported 0 problems.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \half_adder

5.2. Analyzing design hierarchy..
Top module:  \half_adder
Removed 0 unused modules.
Module half_adder directly or indirectly contains formal properties -> setting "keep" attribute.

6. Executing jny backend.

7. Executing RTLIL backend.
Output filename: ../model/design.il

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 2a29499990, CPU: user 0.09s system 0.02s, MEM: 14.70 MB peak
Yosys 0.37 (git sha1 a5c7f69ed8f, clang 14.0.6 -fPIC -Os)
Time spent: 22% 3x hierarchy (0 sec), 21% 5x opt_clean (0 sec), ...
