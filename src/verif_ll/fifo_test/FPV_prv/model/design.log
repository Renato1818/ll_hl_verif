
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.37 (git sha1 a5c7f69ed8f, clang 14.0.6 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: fifo.sv
Parsing formal SystemVerilog input from `fifo.sv' to AST representation.
Storing AST representation for module `$abstract\addr_gen'.
Storing AST representation for module `$abstract\fifo'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

3. Executing AST frontend in derive mode using pre-parsed AST for module `\fifo'.
Generating RTLIL representation for module `\fifo'.

3.1. Analyzing design hierarchy..
Top module:  \fifo
Parameter \MAX_DATA = 16

3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\addr_gen'.
Parameter \MAX_DATA = 16
Generating RTLIL representation for module `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000'.
Parameter \MAX_DATA = 16
Found cached RTLIL representation for module `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000'.

3.3. Analyzing design hierarchy..
Top module:  \fifo
Used module:     $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000

3.4. Analyzing design hierarchy..
Top module:  \fifo
Used module:     $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000
Removing unused module `$abstract\fifo'.
Removing unused module `$abstract\addr_gen'.
Removed 2 unused modules.
Module fifo directly or indirectly contains formal properties -> setting "keep" attribute.

4. Executing PREP pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \fifo
Used module:     $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000

4.1.2. Analyzing design hierarchy..
Top module:  \fifo
Used module:     $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000
Removed 0 unused modules.
Module fifo directly or indirectly contains formal properties -> setting "keep" attribute.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$fifo.sv:11$216 in module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.
Marked 1 switch rules as full_case in process $proc$fifo.sv:96$67 in module fifo.
Marked 2 switch rules as full_case in process $proc$fifo.sv:64$39 in module fifo.
Marked 1 switch rules as full_case in process $proc$fifo.sv:38$29 in module fifo.
Removed a total of 0 dead cases.

4.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 34 assignments to connections.

4.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.$proc$fifo.sv:0$219'.
  Set init value: \addr = 4'0000
Found init rule in `\fifo.$proc$fifo.sv:0$214'.
  Set init value: $formal$fifo.sv:189$28_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$212'.
  Set init value: $formal$fifo.sv:176$27_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$210'.
  Set init value: $formal$fifo.sv:138$26_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$208'.
  Set init value: $formal$fifo.sv:135$25_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$206'.
  Set init value: $formal$fifo.sv:134$24_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$204'.
  Set init value: $formal$fifo.sv:131$23_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$202'.
  Set init value: $formal$fifo.sv:130$22_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$200'.
  Set init value: $formal$fifo.sv:127$21_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$198'.
  Set init value: $formal$fifo.sv:126$20_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$196'.
  Set init value: $formal$fifo.sv:125$19_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$194'.
  Set init value: $formal$fifo.sv:124$18_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$192'.
  Set init value: $formal$fifo.sv:119$17_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$190'.
  Set init value: $formal$fifo.sv:116$16_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$188'.
  Set init value: $formal$fifo.sv:110$15_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$186'.
  Set init value: $formal$fifo.sv:106$14_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$184'.
  Set init value: $formal$fifo.sv:103$13_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$182'.
  Set init value: $formal$fifo.sv:102$12_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$180'.
  Set init value: $formal$fifo.sv:99$11_EN = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$179'.
  Set init value: \past_nren = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$178'.
  Set init value: \past_nwen = 1'0
Found init rule in `\fifo.$proc$fifo.sv:0$177'.
  Set init value: \data_count = 5'00000

4.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.$proc$fifo.sv:11$216'.
Found async reset \rst in `\fifo.$proc$fifo.sv:64$39'.

4.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~10 debug messages>

4.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.$proc$fifo.sv:0$219'.
Creating decoders for process `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.$proc$fifo.sv:11$216'.
     1/1: $0\addr[3:0]
Creating decoders for process `\fifo.$proc$fifo.sv:0$214'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$212'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$210'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$208'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$206'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$204'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$202'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$200'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$198'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$196'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$194'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$192'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$190'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$188'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$186'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$184'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$182'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$180'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$179'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$178'.
Creating decoders for process `\fifo.$proc$fifo.sv:0$177'.
Creating decoders for process `\fifo.$proc$fifo.sv:186$169'.
     1/3: $0$formal$fifo.sv:189$28_EN[0:0]$172
     2/3: $0$formal$fifo.sv:189$28_CHECK[0:0]$171
     3/3: $0\past_nren[0:0]
Creating decoders for process `\fifo.$proc$fifo.sv:173$161'.
     1/3: $0$formal$fifo.sv:176$27_EN[0:0]$164
     2/3: $0$formal$fifo.sv:176$27_CHECK[0:0]$163
     3/3: $0\past_nwen[0:0]
Creating decoders for process `\fifo.$proc$fifo.sv:96$67'.
     1/32: $0$formal$fifo.sv:99$11_EN[0:0]$76
     2/32: $0$formal$fifo.sv:99$11_CHECK[0:0]$75
     3/32: $0$formal$fifo.sv:102$12_EN[0:0]$78
     4/32: $0$formal$fifo.sv:102$12_CHECK[0:0]$77
     5/32: $0$formal$fifo.sv:103$13_EN[0:0]$80
     6/32: $0$formal$fifo.sv:103$13_CHECK[0:0]$79
     7/32: $0$formal$fifo.sv:106$14_EN[0:0]$82
     8/32: $0$formal$fifo.sv:106$14_CHECK[0:0]$81
     9/32: $0$formal$fifo.sv:110$15_EN[0:0]$84
    10/32: $0$formal$fifo.sv:110$15_CHECK[0:0]$83
    11/32: $0$formal$fifo.sv:116$16_EN[0:0]$86
    12/32: $0$formal$fifo.sv:116$16_CHECK[0:0]$85
    13/32: $0$formal$fifo.sv:119$17_EN[0:0]$88
    14/32: $0$formal$fifo.sv:119$17_CHECK[0:0]$87
    15/32: $0$formal$fifo.sv:124$18_EN[0:0]$90
    16/32: $0$formal$fifo.sv:124$18_CHECK[0:0]$89
    17/32: $0$formal$fifo.sv:125$19_EN[0:0]$92
    18/32: $0$formal$fifo.sv:125$19_CHECK[0:0]$91
    19/32: $0$formal$fifo.sv:126$20_EN[0:0]$94
    20/32: $0$formal$fifo.sv:126$20_CHECK[0:0]$93
    21/32: $0$formal$fifo.sv:127$21_EN[0:0]$96
    22/32: $0$formal$fifo.sv:127$21_CHECK[0:0]$95
    23/32: $0$formal$fifo.sv:130$22_EN[0:0]$98
    24/32: $0$formal$fifo.sv:130$22_CHECK[0:0]$97
    25/32: $0$formal$fifo.sv:131$23_EN[0:0]$100
    26/32: $0$formal$fifo.sv:131$23_CHECK[0:0]$99
    27/32: $0$formal$fifo.sv:134$24_EN[0:0]$102
    28/32: $0$formal$fifo.sv:134$24_CHECK[0:0]$101
    29/32: $0$formal$fifo.sv:135$25_EN[0:0]$104
    30/32: $0$formal$fifo.sv:135$25_CHECK[0:0]$103
    31/32: $0$formal$fifo.sv:138$26_EN[0:0]$106
    32/32: $0$formal$fifo.sv:138$26_CHECK[0:0]$105
Creating decoders for process `\fifo.$proc$fifo.sv:64$39'.
     1/1: $0\data_count[4:0]
Creating decoders for process `\fifo.$proc$fifo.sv:38$29'.
     1/3: $1$memwr$\data$fifo.sv:40$10_EN[7:0]$35
     2/3: $1$memwr$\data$fifo.sv:40$10_DATA[7:0]$34
     3/3: $1$memwr$\data$fifo.sv:40$10_ADDR[3:0]$33

4.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.\addr' using process `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.$proc$fifo.sv:11$216'.
  created $adff cell `$procdff$351' with positive edge clock and positive level reset.
Creating register for signal `\fifo.\past_nren' using process `\fifo.$proc$fifo.sv:186$169'.
  created $dff cell `$procdff$352' with positive edge clock.
Creating register for signal `\fifo.$past$fifo.sv:189$9$0' using process `\fifo.$proc$fifo.sv:186$169'.
  created $dff cell `$procdff$353' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:189$28_CHECK' using process `\fifo.$proc$fifo.sv:186$169'.
  created $dff cell `$procdff$354' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:189$28_EN' using process `\fifo.$proc$fifo.sv:186$169'.
  created $dff cell `$procdff$355' with positive edge clock.
Creating register for signal `\fifo.\past_nwen' using process `\fifo.$proc$fifo.sv:173$161'.
  created $dff cell `$procdff$356' with positive edge clock.
Creating register for signal `\fifo.$past$fifo.sv:176$8$0' using process `\fifo.$proc$fifo.sv:173$161'.
  created $dff cell `$procdff$357' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:176$27_CHECK' using process `\fifo.$proc$fifo.sv:173$161'.
  created $dff cell `$procdff$358' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:176$27_EN' using process `\fifo.$proc$fifo.sv:173$161'.
  created $dff cell `$procdff$359' with positive edge clock.
Creating register for signal `\fifo.$past$fifo.sv:111$1$0' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$360' with positive edge clock.
Creating register for signal `\fifo.$past$fifo.sv:112$2$0' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$361' with positive edge clock.
Creating register for signal `\fifo.$past$fifo.sv:113$3$0' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$362' with positive edge clock.
Creating register for signal `\fifo.$past$fifo.sv:117$4$0' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$363' with positive edge clock.
Creating register for signal `\fifo.$past$fifo.sv:118$5$0' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$364' with positive edge clock.
Creating register for signal `\fifo.$past$fifo.sv:120$6$0' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$365' with positive edge clock.
Creating register for signal `\fifo.$past$fifo.sv:121$7$0' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$366' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:99$11_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$367' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:99$11_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$368' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:102$12_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$369' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:102$12_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$370' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:103$13_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$371' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:103$13_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$372' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:106$14_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$373' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:106$14_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$374' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:110$15_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$375' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:110$15_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$376' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:116$16_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$377' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:116$16_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$378' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:119$17_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$379' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:119$17_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$380' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:124$18_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$381' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:124$18_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$382' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:125$19_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$383' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:125$19_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$384' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:126$20_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$385' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:126$20_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$386' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:127$21_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$387' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:127$21_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$388' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:130$22_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$389' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:130$22_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$390' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:131$23_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$391' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:131$23_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$392' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:134$24_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$393' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:134$24_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$394' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:135$25_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$395' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:135$25_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$396' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:138$26_CHECK' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$397' with positive edge clock.
Creating register for signal `\fifo.$formal$fifo.sv:138$26_EN' using process `\fifo.$proc$fifo.sv:96$67'.
  created $dff cell `$procdff$398' with positive edge clock.
Creating register for signal `\fifo.\data_count' using process `\fifo.$proc$fifo.sv:64$39'.
  created $adff cell `$procdff$399' with positive edge clock and positive level reset.
Creating register for signal `\fifo.$memwr$\data$fifo.sv:40$10_ADDR' using process `\fifo.$proc$fifo.sv:38$29'.
  created $dff cell `$procdff$400' with positive edge clock.
Creating register for signal `\fifo.$memwr$\data$fifo.sv:40$10_DATA' using process `\fifo.$proc$fifo.sv:38$29'.
  created $dff cell `$procdff$401' with positive edge clock.
Creating register for signal `\fifo.$memwr$\data$fifo.sv:40$10_EN' using process `\fifo.$proc$fifo.sv:38$29'.
  created $dff cell `$procdff$402' with positive edge clock.

4.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.$proc$fifo.sv:0$219'.
Found and cleaned up 2 empty switches in `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.$proc$fifo.sv:11$216'.
Removing empty process `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.$proc$fifo.sv:11$216'.
Removing empty process `fifo.$proc$fifo.sv:0$214'.
Removing empty process `fifo.$proc$fifo.sv:0$212'.
Removing empty process `fifo.$proc$fifo.sv:0$210'.
Removing empty process `fifo.$proc$fifo.sv:0$208'.
Removing empty process `fifo.$proc$fifo.sv:0$206'.
Removing empty process `fifo.$proc$fifo.sv:0$204'.
Removing empty process `fifo.$proc$fifo.sv:0$202'.
Removing empty process `fifo.$proc$fifo.sv:0$200'.
Removing empty process `fifo.$proc$fifo.sv:0$198'.
Removing empty process `fifo.$proc$fifo.sv:0$196'.
Removing empty process `fifo.$proc$fifo.sv:0$194'.
Removing empty process `fifo.$proc$fifo.sv:0$192'.
Removing empty process `fifo.$proc$fifo.sv:0$190'.
Removing empty process `fifo.$proc$fifo.sv:0$188'.
Removing empty process `fifo.$proc$fifo.sv:0$186'.
Removing empty process `fifo.$proc$fifo.sv:0$184'.
Removing empty process `fifo.$proc$fifo.sv:0$182'.
Removing empty process `fifo.$proc$fifo.sv:0$180'.
Removing empty process `fifo.$proc$fifo.sv:0$179'.
Removing empty process `fifo.$proc$fifo.sv:0$178'.
Removing empty process `fifo.$proc$fifo.sv:0$177'.
Found and cleaned up 2 empty switches in `\fifo.$proc$fifo.sv:186$169'.
Removing empty process `fifo.$proc$fifo.sv:186$169'.
Found and cleaned up 2 empty switches in `\fifo.$proc$fifo.sv:173$161'.
Removing empty process `fifo.$proc$fifo.sv:173$161'.
Found and cleaned up 1 empty switch in `\fifo.$proc$fifo.sv:96$67'.
Removing empty process `fifo.$proc$fifo.sv:96$67'.
Found and cleaned up 2 empty switches in `\fifo.$proc$fifo.sv:64$39'.
Removing empty process `fifo.$proc$fifo.sv:64$39'.
Found and cleaned up 1 empty switch in `\fifo.$proc$fifo.sv:38$29'.
Removing empty process `fifo.$proc$fifo.sv:38$29'.
Cleaned up 10 empty switches.

4.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.
Optimizing module fifo.
<suppressed ~45 debug messages>

4.3. Executing FUTURE pass.

4.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.
Optimizing module fifo.

4.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \fifo..
Removed 6 unused cells and 135 unused wires.
<suppressed ~8 debug messages>

4.6. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000...
Checking module fifo...
Found and reported 0 problems.

4.7. Executing OPT pass (performing simple optimizations).

4.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.
Optimizing module fifo.

4.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000'.
Finding identical cells in module `\fifo'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

4.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $procmux$329: \rst -> 1'1
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$229.
    dead port 2/2 on $mux $procmux$237.
Removed 2 multiplexer ports.
<suppressed ~44 debug messages>

4.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.
  Optimizing cells in module \fifo.
    Consolidated identical input bits for $mux cell $procmux$343:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\data$fifo.sv:40$10_EN[7:0]$32
      New ports: A=1'0, B=1'1, Y=$0$memwr$\data$fifo.sv:40$10_EN[7:0]$32 [0]
      New connections: $0$memwr$\data$fifo.sv:40$10_EN[7:0]$32 [7:1] = { $0$memwr$\data$fifo.sv:40$10_EN[7:0]$32 [0] $0$memwr$\data$fifo.sv:40$10_EN[7:0]$32 [0] $0$memwr$\data$fifo.sv:40$10_EN[7:0]$32 [0] $0$memwr$\data$fifo.sv:40$10_EN[7:0]$32 [0] $0$memwr$\data$fifo.sv:40$10_EN[7:0]$32 [0] $0$memwr$\data$fifo.sv:40$10_EN[7:0]$32 [0] $0$memwr$\data$fifo.sv:40$10_EN[7:0]$32 [0] }
  Optimizing cells in module \fifo.
Performed a total of 1 changes.

4.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000'.
Finding identical cells in module `\fifo'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

4.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \fifo..
Removed 0 unused cells and 54 unused wires.
<suppressed ~1 debug messages>

4.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.
Optimizing module fifo.
<suppressed ~1 debug messages>

4.7.8. Rerunning OPT passes. (Maybe there is more to do..)

4.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

4.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.
  Optimizing cells in module \fifo.
Performed a total of 0 changes.

4.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000'.
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

4.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \fifo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.
Optimizing module fifo.

4.7.14. Rerunning OPT passes. (Maybe there is more to do..)

4.7.15. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

4.7.16. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.
  Optimizing cells in module \fifo.
Performed a total of 0 changes.

4.7.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000'.
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

4.7.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \fifo..

4.7.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.
Optimizing module fifo.

4.7.20. Finished OPT passes. (There is nothing left to do.)

4.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.$add$fifo.sv:18$218 ($add).
Removed top 28 bits (of 32) from port Y of cell $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.$add$fifo.sv:18$218 ($add).
Removed top 28 bits (of 32) from wire $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.$add$fifo.sv:18$218_Y.
Removed top 27 bits (of 32) from port B of cell fifo.$lt$fifo.sv:67$42 ($lt).
Removed top 31 bits (of 32) from port B of cell fifo.$add$fifo.sv:68$44 ($add).
Removed top 27 bits (of 32) from port Y of cell fifo.$add$fifo.sv:68$44 ($add).
Removed top 31 bits (of 32) from port B of cell fifo.$gt$fifo.sv:69$47 ($gt).
Removed top 31 bits (of 32) from port B of cell fifo.$sub$fifo.sv:70$49 ($sub).
Removed top 27 bits (of 32) from port Y of cell fifo.$sub$fifo.sv:70$49 ($sub).
Removed top 27 bits (of 32) from port B of cell fifo.$ge$fifo.sv:80$56 ($ge).
Removed top 27 bits (of 32) from port Y of cell fifo.$sub$fifo.sv:92$63 ($sub).
Removed top 27 bits (of 32) from port B of cell fifo.$add$fifo.sv:93$64 ($add).
Removed top 26 bits (of 32) from port Y of cell fifo.$add$fifo.sv:93$64 ($add).
Removed top 26 bits (of 32) from port A of cell fifo.$sub$fifo.sv:93$65 ($sub).
Removed top 25 bits (of 32) from port Y of cell fifo.$sub$fifo.sv:93$65 ($sub).
Removed top 27 bits (of 32) from mux cell fifo.$ternary$fifo.sv:91$66 ($mux).
Removed top 27 bits (of 32) from port B of cell fifo.$le$fifo.sv:102$109 ($le).
Removed top 27 bits (of 32) from port B of cell fifo.$lt$fifo.sv:103$110 ($lt).
Removed top 31 bits (of 32) from port B of cell fifo.$add$fifo.sv:112$119 ($add).
Removed top 26 bits (of 32) from port Y of cell fifo.$add$fifo.sv:112$119 ($add).
Removed top 26 bits (of 32) from port B of cell fifo.$eq$fifo.sv:112$120 ($eq).
Removed top 31 bits (of 32) from port B of cell fifo.$sub$fifo.sv:113$122 ($sub).
Removed top 26 bits (of 32) from port Y of cell fifo.$sub$fifo.sv:113$122 ($sub).
Removed top 1 bits (of 5) from port B of cell fifo.$eq$fifo.sv:125$140 ($eq).
Removed top 4 bits (of 5) from port B of cell fifo.$eq$fifo.sv:127$147 ($eq).
Removed top 31 bits (of 32) from port B of cell fifo.$add$fifo.sv:118$159 ($add).
Removed top 27 bits (of 32) from port Y of cell fifo.$add$fifo.sv:118$159 ($add).
Removed top 31 bits (of 32) from port B of cell fifo.$add$fifo.sv:121$160 ($add).
Removed top 27 bits (of 32) from port Y of cell fifo.$add$fifo.sv:121$160 ($add).
Removed top 2 bits (of 7) from port Y of cell fifo.$sub$fifo.sv:93$65 ($sub).
Removed top 1 bits (of 6) from port A of cell fifo.$sub$fifo.sv:93$65 ($sub).
Removed top 1 bits (of 6) from port Y of cell fifo.$add$fifo.sv:93$64 ($add).
Removed top 27 bits (of 32) from wire fifo.$0$past$fifo.sv:118$5$0[31:0]$72.
Removed top 27 bits (of 32) from wire fifo.$0$past$fifo.sv:121$7$0[31:0]$74.
Removed top 26 bits (of 32) from wire fifo.$add$fifo.sv:112$119_Y.
Removed top 27 bits (of 32) from wire fifo.$add$fifo.sv:68$44_Y.
Removed top 27 bits (of 32) from wire fifo.$add$fifo.sv:93$64_Y.

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \fifo..
Removed 0 unused cells and 7 unused wires.
<suppressed ~2 debug messages>

4.10. Executing MEMORY_COLLECT pass (generating $mem cells).

4.11. Executing OPT pass (performing simple optimizations).

4.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000.
Optimizing module fifo.

4.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000'.
Finding identical cells in module `\fifo'.
Removed a total of 0 cells.

4.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \fifo..

4.11.4. Finished fast OPT passes.

4.12. Printing statistics.

=== $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000 ===

   Number of wires:                  8
   Number of wire bits:             20
   Number of public wires:           4
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $add                            1
     $adff                           1
     $eq                             1
     $mux                            2

=== fifo ===

   Number of wires:                135
   Number of wire bits:            423
   Number of public wires:          17
   Number of public wire bits:      49
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                147
     $add                            5
     $adff                           1
     $assert                        10
     $cover                          8
     $dff                           31
     $eq                            11
     $ge                             2
     $gt                             1
     $le                             1
     $logic_and                     17
     $logic_not                      8
     $logic_or                      12
     $lt                             2
     $mem_v2                         1
     $mux                           28
     $ne                             2
     $not                            1
     $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000      2
     $sub                            4

=== design hierarchy ===

   fifo                              1
     $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000      2

   Number of wires:                151
   Number of wire bits:            463
   Number of public wires:          25
   Number of public wire bits:      63
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                155
     $add                            7
     $adff                           3
     $assert                        10
     $cover                          8
     $dff                           31
     $eq                            13
     $ge                             2
     $gt                             1
     $le                             1
     $logic_and                     17
     $logic_not                      8
     $logic_or                      12
     $lt                             2
     $mem_v2                         1
     $mux                           32
     $ne                             2
     $not                            1
     $sub                            4

4.13. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000...
Checking module fifo...
Found and reported 0 problems.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \fifo
Used module:     $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000

5.2. Analyzing design hierarchy..
Top module:  \fifo
Used module:     $paramod\addr_gen\MAX_DATA=s32'00000000000000000000000000010000
Removed 0 unused modules.
Module fifo directly or indirectly contains formal properties -> setting "keep" attribute.

6. Executing jny backend.

7. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: e4a92cae38, CPU: user 0.08s system 0.00s, MEM: 29.18 MB peak
Yosys 0.37 (git sha1 a5c7f69ed8f, clang 14.0.6 -fPIC -Os)
Time spent: 19% 6x opt_clean (0 sec), 16% 7x opt_expr (0 sec), ...
