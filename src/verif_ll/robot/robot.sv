//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.3
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: Robot ()
//
module robot #(
	parameter DATA_IN_WIDTH       = 16,
	parameter MIN_DIST            = 16'd50
  )
(
	input wire clk,
	input wire rstn,
	input wire [DATA_IN_WIDTH-1:0] dist_v,
	output wire alarm_flag,
	//output wire obs_detected_aux
);

	// Variables generated for SystemC signals
	reg obs_detected;
	reg out_alarm_flag;
	reg [DATA_IN_WIDTH-1:0] buff_dist_v;
	
	//------------------------------------------------------------------------------
	// Clocked THREAD: sensor (Robot.h:34:2) 
	
	// Thread-local variables
	reg [1:0] sensor_counter;
	reg [1:0] sensor_counter_next;
	reg [1:0] sensor_controller;
	reg [1:0] sensor_controller_next;
	reg obs_detected_next;
	reg sensor_PROC_STATE;
	reg sensor_PROC_STATE_next;
	reg alarm_flag_next;
	reg controller_PROC_STATE;
	reg controller_PROC_STATE_next;
	
	assign buff_dist_v = dist_v;
	//assign obs_detected_aux = obs_detected;
	
	// Next-state combinational logic
	always @(posedge clk) begin : sensor_comb    
		obs_detected_next <= 1'd0;
		sensor_counter_next <= 1'd0;
		sensor_PROC_STATE_next <= 1'd0;
		
		case (sensor_PROC_STATE)
			0: begin
				sensor_counter_next <= 2;
				sensor_PROC_STATE_next <= 1;     
			end
			1: begin
				if (sensor_counter != 1) begin
					sensor_counter_next <= sensor_counter - 1;
					sensor_PROC_STATE_next <= 1;     
				end
				if (buff_dist_v < MIN_DIST) begin
					obs_detected_next <= 1'd1;
				end 
				sensor_counter_next <= 2;
				sensor_PROC_STATE_next <= 1;    
			end
		endcase
	end
	
	// Synchronous register update
	always @(posedge clk or negedge rstn) begin : sensor_ff
		if ( !rstn ) begin
			obs_detected <= 1'd0;
			sensor_PROC_STATE <= 1'd0;    
			sensor_counter <= 1'd0;
		end else begin
			sensor_counter <= sensor_counter_next;
			obs_detected <= obs_detected_next;
			sensor_PROC_STATE <= sensor_PROC_STATE_next;
		end
	end
	
	//------------------------------------------------------------------------------
	// Clocked THREAD: controller (Robot.h:54:2) 
	
	// Thread-local variables
	
	// Next-state combinational logic
	always @(posedge clk) begin : controller_comb  
		alarm_flag_next <= 1'd0;
		controller_PROC_STATE_next <= 1'd0;
		
		case (controller_PROC_STATE)
			0: begin
				sensor_controller_next <= 1;
				controller_PROC_STATE_next <= 1'd1;     // Robot.h:59:6;
			end
			1: begin
				if (sensor_controller != 1) begin
					sensor_controller_next <= sensor_controller - 1;
					controller_PROC_STATE_next <= 1;     // Robot.h:59:6;
				end
				if (obs_detected) begin
					alarm_flags_next <= 1'd1;
				end
				sensor_controller_next <= 1;
				controller_PROC_STATE_next <= 1'd1;     // Robot.h:59:6;
			end
		endcase
	end
	
	// Synchronous register update
	always @(posedge clk or negedge rstn) begin : controller_ff
		if ( !rstn ) begin
			out_alarm_flag <= 1'd0;
			controller_PROC_STATE <= 1'd0;    
			sensor_controller <= 1'd0;
		end else begin
			sensor_controller <= sensor_controller_next;
			out_alarm_flag <= alarm_flag_next;
			controller_PROC_STATE <= controller_PROC_STATE_next;
		end
	end
	
	assign alarm_flag = out_alarm_flag;

	`ifdef FORMAL
        logic aux_dist_v;
		assign aux_dist_v = (dist_v < MIN_DIST) ? 1 : 0;
	
        always @(posedge clk) begin				
			obs_detected_cover: cover (obs_detected);
			alarm_flag_cover: cover (alarm_flag);
			if (~rstn) begin		
				
                assert_obs_detected_reset: assert (!obs_detected);                 
                assert_alarm_false_reset: assert (!alarm_flag);

            end else begin  		
				w_reset: cover  (rstn);		
				//#2
                //if ($past((aux_dist_v)) == 1 ) begin
                //	assert_obs_detected: assert (((obs_detected)==1));
                //end
                //assert_alarm_true: assert property ( @(posedge clk) disable iff(!rstn) 
                //        obs_detected ##2 alarm_flag);  
            end 
        end
    `endif 

endmodule