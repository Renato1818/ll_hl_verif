package de.wwu.embdsys.sc2pvl.pvlmodel;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import de.wwu.embdsys.sc2pvl.pvlmodel.specifications.Specifiable;
import de.wwu.embdsys.sc2pvl.pvlmodel.specifications.Specification;
import de.tub.pes.syscir.sc_model.SCVariable;
import de.tub.pes.syscir.sc_model.variables.SCClassInstance;

/**
 * This is the base class of the internal representation of a PVL class. Like a
 * usual PVL class it consists of a name, a number of fields, constructors and
 * functions. Additionally, this intermediate representation provides a method
 * to construct a string representation of the corresponding PVL class.
 * 
 * @author Pauline Blohm
 *
 */
public class PVLClass implements Specifiable {

	/***
	 * Name of the represented PVL class.
	 */
	private String name = "";
	/**
	 * List of fields of the represented PVL class.
	 */
	private LinkedList<PVLVariable> fields;
	/**
	 * List of constructors of the represented PVL class.
	 */
	private LinkedList<PVLConstructor> constructors;

	/**
	 * List of functions of the represented PVL class.
	 */
	private LinkedList<PVLFunction> functions;

	/**
	 * If class has global invariant, otherwise null.
	 */
	private List<Specification> specifications;

	/**
	 * List of all events the PVL class uses.
	 */
	private List<PVLEventVariable> events;
	
	/**
	 * Mapping of SystemC events to PVL events
	 */
	private final Map<SCVariable, PVLEventVariable> event_mapping;
	
	/**
	 * List of all ports the PVL class uses.
	 */
	private List<PVLVariable> ports;
	/**
	 * If this is a thread class this corresponds to the state class, otherwise
	 * null;
	 */
	private PVLClass corr_state_class;

	/**
	 * Variable that references the object of the main class.
	 */
	private PVLVariable main_ref;

	/**
	 * Id of the instance in the sequence of all runnable objects.
	 */
	private int runnable_id;

	/**
	 * Whether the class contains the run method.
	 */
	private boolean runnable;
	
	/**
	 * SystemC instance that caused the generation of this class
	 */
	private SCClassInstance generating_instance;
	
	/**
	 * The number of auto-generated functions that exist in this class; used for indexing
	 */
	private int nr_autogenerated_functions;

	/**
	 * Standard constructor, initializes the lists and sets the name of the class.
	 * 
	 * @param name of the corresponding PVL class.
	 */
	public PVLClass(String name) {
		this.name = name;
		this.fields = new LinkedList<PVLVariable>();
		this.constructors = new LinkedList<PVLConstructor>();
		this.functions = new LinkedList<PVLFunction>();
		this.corr_state_class = null;
		this.events = new LinkedList<PVLEventVariable>();
		this.ports = new LinkedList<PVLVariable>();
		this.specifications = new LinkedList<Specification>();
		this.event_mapping = new HashMap<SCVariable, PVLEventVariable>();
		this.nr_autogenerated_functions = 0;
	}

	/**
	 * @return SystemC instance that caused the class to be generated
	 */
	public SCClassInstance getGenerating_instance() {
		return generating_instance;
	}

	/**
	 * Sets the generating SystemC instance
	 * @param generating_instance SystemC instance that caused the class to be generated
	 */
	public void setGenerating_instance(SCClassInstance generating_instance) {
		this.generating_instance = generating_instance;
	}

	/**
	 * Returns the corresponding variable with the given name. If multiple exist,
	 * the first one is returned. If none exists, null is returned.
	 * 
	 * @param string the name of the field
	 * @return
	 */
	public PVLVariable getFieldByName(String string) {
		for (PVLVariable var : fields) {
			if (var.getName().equals(string))
				return var;
		}
		return null;
	}

	/**
	 * Returns the corresponding variable with the given tListype. If multiple exist,
	 * the first one is returned. If none exists, null is returned.
	 * 
	 * @param string the type of the field
	 * @return
	 */
	public PVLVariable getFieldByType(String string) {
		for (PVLVariable var : fields) {
			if (var.getType().equals(string))
				return var;
		}
		return null;
	}

	/**
	 * Returns the corresponding function with the given name. If multiple exist,
	 * the first one is returned. If none exists, null is returned.
	 * 
	 * @param string the name of the function
	 * @return
	 */
	public Object getFunctionByName(String string) {
		for (PVLFunction function : getFunctions()) {
			if (function.getName().equals(string))
				return function;
		}
		return null;
	}

	/**
	 * Returns all fields that are instances of classes. If none exist an empty list
	 * is returned.
	 * 
	 * @return
	 */
	public List<PVLClassInstance> getAllClassInstanceFields() {
		List<PVLClassInstance> class_instances = new LinkedList<PVLClassInstance>();
		for (PVLVariable field : getFields()) {
			if (field instanceof PVLClassInstance) {
				class_instances.add((PVLClassInstance) field);
			}
		}
		return class_instances;
	}

	/**
	 * Generates a string representation of the PVL class which can be used to
	 * obtain a PVL file for the represented class.
	 * 
	 * The string is in accordance to the syntax of the PVL language.
	 */
	@Override
	public String toString() {
		StringBuilder ret = new StringBuilder("class " + name + " { \n");
		ret.append("//Auto-generated fields of the ").append(name).append(" class:\n");
		for (PVLVariable field : getFields()) {
			ret.append(field.toString());
			ret.append("\n");
		}

		if (getSpecifications().size() > 0) {
			ret.append("\n");
			ret.append("//Auto-generated global invariant: \n");
			for (Specification spec : getSpecifications()) {
				ret.append(spec.toString());
				ret.append("\n");
			}
		}
		ret.append("\n");
		ret.append("//Auto-generated constructor:\n");
		for (PVLConstructor constructor : getConstructors()) {
			ret.append(constructor.toString());
			ret.append("\n");
			ret.append("\n");
		}

		ret.append("\n");
		ret.append("//Auto-generated functions:\n");
		for (PVLFunction function : getFunctions()) {
			ret.append(function.toString());
			ret.append("\n");
			ret.append("\n");
		}

		ret.append("}");
		return ret.toString();
	}

	/* GETTER AND SETTER */

	/**
	 * Gets the name of the PVL class.
	 */
	public String getName() {
		return name;
	}

	/**
	 * Sets the name of the PVL class.
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Gets the list of fields of the PVL class.
	 */
	public List<PVLVariable> getFields() {
		return fields;
	}

	/**
	 * Sets the list of fields of the PVL class.
	 */
	public void setFields(LinkedList<PVLVariable> fields) {
		this.fields = fields;
	}

	/**
	 * Adds a field to the list of fields.
	 */
	public void addField(PVLVariable field) {
		this.fields.add(field);
	}

	/**
	 * Gets the list of constructors of the PVL class.
	 */
	public List<PVLConstructor> getConstructors() {
		return constructors;
	}

	/**
	 * Sets the list of constructors of the PVL class.
	 */
	public void setConstructors(LinkedList<PVLConstructor> constructors) {
		this.constructors = constructors;
	}

	/**
	 * Adds a constructor to the list of constructors of the PVL class.
	 */
	public void addConstructors(PVLConstructor constructor) {
		this.constructors.add(constructor);
	}

	/**
	 * Gets the list of functions of the PVL class.
	 */
	public List<PVLFunction> getFunctions() {
		return functions;
	}

	/**
	 * Sets the list of functions of the PVL class.
	 */
	public void setFunctions(LinkedList<PVLFunction> functions) {
		this.functions = functions;
	}
	
	public void addAllFunctions(LinkedList<PVLFunction> functions) {
		this.functions.addAll(functions);
	}

	/**
	 * Adds a function to the list of functions of the PVL class.
	 */
	public void addFunction(PVLFunction function) {
		this.functions.add(function);
	}

	/**
	 * Gets the corresponding state class.
	 */
	public PVLClass getCorrStateClass() {
		return corr_state_class;
	}

	/**
	 * Sets the corresponding state class
	 */
	public void setCorrStateClass(PVLClass corr_state_class) {
		this.corr_state_class = corr_state_class;
	}

	/**
	 * Return the list of events.
	 */
	public List<PVLEventVariable> getEvents() {
		return events;
	}
	
	/**
	 * Returns the event corresponding to the SystemC variable
	 */
	public PVLEventVariable getEventByVariable(SCVariable sc_event) {
		return event_mapping.get(sc_event);
	}

	/**
	 * Sets the list of events.
	 */
	public void setEvents(List<PVLEventVariable> events) {
		this.events = events;
	}

	/**
	 * Adds an event to the list of events.
	 */
	public void addEvent(PVLEventVariable event) {
		this.events.add(event);
	}
	
	/**
	 * Adds a new PVL event to the event mapping and to the event list
	 * 
	 * @param sc_event Original SystemC event
	 * @param pvl_event Translated PVL event
	 */
	public void addEvent(SCVariable sc_event, PVLEventVariable pvl_event) {
		events.add(pvl_event);
		event_mapping.put(sc_event, pvl_event);
	}

	/**
	 * Return the list of ports.
	 */
	public List<PVLVariable> getPorts() {
		return ports;
	}

	/**
	 * Sets the list of ports.
	 */
	public void setPorts(List<PVLVariable> ports) {
		this.ports = ports;
	}

	/**
	 * Adds a port to the list of ports.
	 */
	public void addPort(PVLVariable port) {
		this.ports.add(port);
	}
	
	/**
	 * Returns the variable that references the main object.
	 */
	public PVLVariable getMainRef() {
		return main_ref;
	}

	/**
	 * Sets the reference to the main object.
	 */
	public void setMainRef(PVLVariable main_ref) {
		this.main_ref = main_ref;
	}

	/**
	 * Returns the runnable id.
	 */
	public int getRunnableId() {
		return runnable_id;
	}

	/**
	 * Sets the runnable id.
	 */
	public void setRunnableId(int runnable_id) {
		this.runnable_id = runnable_id;
	}

	/**
	 * Returns the list of specifications for the class. Primarily used for
	 * resources.
	 */
	public List<Specification> getSpecifications() {
		return specifications;
	}

	/**
	 * Sets the list of specifications.
	 */
	public void setSpecifications(List<Specification> specifications) {
		this.specifications = specifications;
	}

	/**
	 * Add a specification to the class.
	 */
	public void appendSpecification(Specification s) {
		specifications.add(s);

	}

	/**
	 * Returns whether the class is runnable.
	 */
	public boolean isRunnable() {
		return runnable;
	}

	/**
	 * Sets the runnable status of the class.
	 */
	public void setRunnable(boolean runnable) {
		this.runnable = runnable;
	}

	public int getNrAutogeneratedFunctions() {
		return nr_autogenerated_functions;
	}

	public void addAutogeneratedFunction(PVLFunction function) {
		++nr_autogenerated_functions;
		addFunction(function);
	}

}
